---
title: "Feedbacks"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
    code-fold: true
    code-summary: "Show the code"
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

## Setup

```{r, message= FALSE, warning=FALSE, echo=FALSE}
# upload to the git
library(readxl)
library(foreach)
library(stringr)
library(dplyr)
library(tokenizers)
library(data.table)
library(ggplot2)
library(plyr)
library(quanteda)
library(SemNetCleaner)
library(purrr)
library(tidytext)
library(tm)
library(topicmodels)
library(SnowballC)
library(Matrix)
library(text2vec)
library(tidyr)
library(kableExtra)
library(stringi)
library("xlsx")
library(padr)
library(janitor)
library(formattable)
```

```{r, message= FALSE, warning=FALSE}
data <- read_excel("data/results-survey.xlsx")
data <- data[1:121] %>% 
  filter(.[[18]] !='Yes') # not analysed any EEG method

```

## word_preproc

```{r}
word_preproc <- function(data, N){
 # N = 69
  stop_list = c("a", "an", "the", "wise", "like", "s", "plot", "plots")
  tmp <- data %>% filter(!is.na(.[[N]])) %>% select(., N) %>% 
    dplyr::rename(words = !!names(.)[1]) %>% mutate(words = tolower(words)) %>% 
    mutate(words_prep = str_split(words, "\\s+")) %>%
    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = " "))) %>% 
    mutate(words_prep = stri_replace_all_regex(words_prep,
                                  pattern=c(" \\(.*", ", or.*", " across.*", " with.*", " at.*", " by.*", " over.*", #" of.*", 
  " for.*", " per.*", " across.*", " accross.*", " between.*"),
                                  replacement=c(''),
                                  vectorize=FALSE)) %>% 
    mutate(words_prep = str_split(words_prep, "\\s+")) %>%
    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = " ")))
     
  return(tmp)
}

```

```{r}
vec_plotted <- names(data[ , grepl( "Have you ever plotted " , names(data))]) 
vec_named <- names(data[ , grepl( "How would you " , names(data))])

do_vec <- function(vec_plotted, data, plot_names){
  t1 <- table(data[vec_plotted[1]])
  for (i in 2:length(vec_plotted)) {
    t <- table(data[vec_plotted[i]])
    t1 <- rbind(t1, t)
  }
  rownames(t1) <- plot_names 
  return(t1)
}
plot_names <- c("line", "butterfly", "topo", "topo_map", "topo_array", "erp_img", "parallel", "channel_img")

familiar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% 
  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.=="Yes", 1, 0)))
tab <- do_vec(vec_plotted, data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., "plots") %>%  
  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% 
  filter(type == "Yes") %>% dplyr::select(-type) 

na_table <- function(data, vec){
    temp <- data.frame(1:10)
    for (i in vec){
      temp1 <- word_preproc(data, i)  %>%
      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|why'), "NA", as.character(words))) %>%
      mutate(words = ifelse(nchar(words)==0, NA, words)) %>% 
      table(.) %>% 
      data.frame(.) %>% filter(words != "NA") %>% 
      summarise(n = sum(Freq))  
      temp <- cbind(temp, temp1)
    }
    temp <- temp[2:length(temp)]
    colnames(temp) <- plot_names
    return(temp)
}
num_named <- na_table(data, vec_named)
named <- slice(num_named, 1)  %>% 
  gather(., plots, succeeded, `line`:`channel_img`, factor_key=TRUE)%>% 
  mutate(failed = nrow(data) - succeeded) %>% 
  dplyr::rename(named = succeeded) %>% 
  dplyr::select(-failed)

mem_tab <- data.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., "plot") %>% 
   rename_at(vars(colnames(.)), ~ c("plots", "recognized")) %>%
  merge(., named)  %>% left_join(., tab)  
mem_tab
```

## The most common names for each plot

#### 1

```{r}
n1 <- word_preproc(data, 69)  %>% #View()
   mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|remember)\\b", words_prep) == TRUE ~ "bad", 
      grepl("\\b(average(d)?|averagded)\\b.*\\b(erp(s)?|ep|related)\\b|\\b(erp(s)?|ep|related)\\b.*\\baverage(d)?\\b", words_prep) == TRUE ~ "averaged erp",
      grepl("\\bwave(form|forms)?\\b.*\\b(erp(s)?|ep|related)\\b|\\b(erp(s)?|ep|related)\\b.*\\bwave(form|forms)?\\b", words_prep) == TRUE ~ "erp wave(form)s",
      grepl("\\btime(course|series|domain)?\\b.*\\b(erp(s)?|ep|related)\\b|\\b(erp(s)?|ep|related)\\b.*\\btime(course|series|domain)?\\b", words_prep) == TRUE ~ "erp timecourse/timeseries",
      grepl("\\b(classic(al)?)\\b", words) == TRUE ~ "classic erp",
      grepl("\\b(standard)\\b", words) == TRUE ~ "standart erp",
      grepl("\\b(evoked)\\b", words) == TRUE ~ "evoked potential/reponses",
      grepl("\\b(erp(s)?|ep|related)\\b", words) == TRUE ~ "erp", 
      grepl("\\b(time|timeseries)\\b", words) == TRUE ~ "time series",
  
      grepl("\\b(line|boundedline)\\b", words) == TRUE ~ "line",
      grepl("\\b(single|singleplot|singe)\\b", words) == TRUE ~ "single (channel)",
      grepl("\\b(waveform(s)?)\\b", words) == TRUE ~ "waveform",
       grepl("\\b(p300)\\b", words) == TRUE ~ "p300",
      grepl("\\b(average|mean)\\b", words) == TRUE ~ "average/mean",
      grepl("\\b(amplitude)\\b", words) == TRUE ~ "amplitude",
  
      TRUE ~ '_other'
      ))  %>% #filter(type == "erp timecourse/timeseries") %>%  View()
   filter(!is.na(type), type != "bad") %>% dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq))  %>% 
   rename_at(vars(colnames(.)), ~ c("Line plot", "n")) 
n1 
```

#### 2

```{r}
n2 <- word_preproc(data, 80)  %>% #View()
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\b", words) == TRUE ~ "bad", 
      grepl("\\b(butterfly|bitterfly|buterfly|buttefly)\\b", words) == TRUE ~ "butterfly",
      grepl("\\b(spaghetti)\\b", words) == TRUE ~ "spaghetti",
      grepl("\\b(channel|single|singleplot|individual)\\b", words)  == TRUE ~ "single/individual channel erp",
      grepl("\\b(time|timeseries|timecourse)\\b", words) == TRUE ~ "time series/course",
      grepl("\\b(channels|multichannel|multeple|multiple|multi|all|muti|electrodes)\\b", words)  == TRUE ~ "multichannel/multielectrode erp",
      #grepl("\\b(evoked)\\b", words)  == TRUE ~ "evoked responses",
      grepl("\\b(erp(s)?|eprs|event-related)\\b", words) == TRUE ~ "erp",
      TRUE ~ '_other'
      )) %>% #filter(type == "erp") %>%  View()
  filter(!is.na(type), type != "bad") %>%
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq))  %>% 
   rename_at(vars(colnames(.)), ~ c("Butterfly_plot", "n")) 
n2
```

#### 3

```{r}
n3 <- word_preproc(data, 85)  %>%
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\b", words) == TRUE ~ "bad", 
      grepl("\\b(topo|topoplot(s)?)\\b", words) == TRUE ~ "topo", 
      grepl("\\b(topomap|topomape)\\b", words) == TRUE ~ "topomap",
      grepl("\\b(topograph(y|ic|ical|ies)|topgraphy|topograbphy)\\b", words) == TRUE ~ "topography",
      grepl("\\b(heat(map)?)\\b", words) == TRUE ~ "heatmap",
      grepl("\\b(map)\\b", words) == TRUE ~ "scalpmap",
      grepl("\\b(distribution)\\b", words) == TRUE ~ "scalp distribution",
      TRUE ~ '_other'
      )) %>% # filter(type == "_other") %>%  View()
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq))  %>% 
   rename_at(vars(colnames(.)), ~ c("Topoplot", "n")) 
n3
```

#### 4

```{r}
n4 <- word_preproc(data, 90)  %>%
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|\\?|unclear)\\b", words) == TRUE ~ "bad", 
      grepl("\\btopo(plot|plots)?\\b.*\\btime(course)?\\b|\\btime(course)?\\b.*\\btopo(plot|plots)?|timetopoplot\\b", words) == TRUE ~ "time topo",
      grepl("\\btopo(plot|plots)?\\b.*\\bseries\\b|\\bseries\\b.*\\btopo(plot|plots)?\\b", words) == TRUE ~ "topo series",
      grepl("\\b(topo(s)?|topoplot(s)?)\\b", words) == TRUE ~ "topo", 
      grepl("\\b(topomap(s|e)|topomap)\\b", words) == TRUE ~ "topomap",
      grepl("\\btopograph(y|ic|ical|ies)\\b.*\\bmap(s)?\\b|\\bmap(s)?\\b.*\\btopograph(y|ic|ical|ies)\\b", words) == TRUE ~ "topographical map",
      grepl("\\btopograph(y|ic|ical|ies)\\b.*\\btime\\b|\\btime\\b.*\\btopograph(y|ic|ical|ies)\\b", words) == TRUE ~ "time topography",
      grepl("\\b(topograph(y|ic|ical|ies)|topgraphy|topograhy|topograbphy|topgraphies)\\b", words) == TRUE ~ "topography",
      grepl("\\b(heat(map)?)\\b", words) == TRUE ~ "heatmap",
      grepl("\\b(map(s)?)\\b", words) == TRUE ~ "scalp map",
      grepl("\\b(time(series)?|serie(s)?)\\b", words) == TRUE ~ "time series",
      grepl("\\b(distribution)\\b", words) == TRUE ~ "scalp distribution",
      TRUE ~ '_other'
      )) %>%  #View()
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != "bad")  %>% 
   rename_at(vars(colnames(.)), ~ c("Topo map", "n")) 
n4
```

#### 5

```{r}
n5 <- word_preproc(data, 97)  %>%
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|\\?|unclear|-|ugly|don't|useless)\\b", words) == TRUE ~ "bad", 
      grepl("\\bwave(form|forms)?\\b.*\\b(erp(s)?|ep|related)\\b|\\b(erp(s)?|ep|related)\\b.*\\bwave(form|forms)?\\b", words_prep) == TRUE ~ "erp wave(form)s",
      grepl("\\btopograph(y|ic|ical|ies)?|toprgraphic\\b.*\\berp(s)?\\b|\\berp(s)?\\b.*\\btopograph(y|ic|ical|ies)?|toprgraphic\\b", words) == TRUE ~ "topographic erp",
      grepl("\\b(scalp)\\b", words) == TRUE ~ "scalp (erp)",
      grepl("\\b(array)\\b", words) == TRUE ~ "(erp) array",
      grepl("\\btopo(plot|plots)?\\b.*\\berp(s)?\\b|\\berp(s)?\\b.*\\btopo(plot|plots)?\\b", words) == TRUE ~ "topo erp",
      grepl("\\b(erp(s)?|eprs|event-related)\\b", words) == TRUE ~ "erp",
      grepl("\\b(multi(plot|channel|ploter|ploterp)|multi)\\b", words) == TRUE ~ "multi or multichannel plot",
      grepl("\\b(topo(s)?|topoplot(s)?|toposplot)\\b", words) == TRUE ~ "topo", 
      grepl("\\b(topograph(y|ic|ical|ies)?|topgraphy|topograhy|topograbphy|topgraphies)\\b", words) == TRUE ~ "topography",
      grepl("\\b(channel(s|plot)?)\\b", words) == TRUE ~ "channel",
      grepl("\\b(time(series)?|serie(s)?)\\b", words) == TRUE ~ "time series",
      
      TRUE ~ '_other'
      )) %>%  #filter(type=="(erp) array") %>% View()
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != "bad")  %>% 
   rename_at(vars(colnames(.)), ~ c("Topo array", "n")) 
n5

```

#### 6

```{r}
n6 <- word_preproc(data, 102)  %>% #View()
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\?|\\?\\?|unclear|-|ugly|don't|x|useless)\\b", words) == TRUE ~ "bad", 
      grepl("\\b(sort(ed)?)\\b", words) == TRUE ~ "sorted erp trials",
      grepl("\\bimage\\b.*\\berp(s)?\\b|\\berp(s)?\\b.*\\bimage|erpimage|image\\b", words) == TRUE ~ "erp image",
      grepl("\\bimage\\b.*\\bepoch(s)?\\b|\\bepoch(s)?\\b.*\\bimage\\b", words) == TRUE ~ "epoch image",
      grepl("\\berp(s)?\\b.*\\btrial(s)?\\b|\\btrial(s)?\\b.*\\berp(s)?\\b", words) == TRUE ~ "erp trials",
      grepl("\\b(raster(plot)?)\\b", words) == TRUE ~ "raster",
      grepl("\\b(waterfall)\\b", words) == TRUE ~ "waterfall",
      grepl("\\b(heat(map)?)\\b", words) == TRUE ~ "heatmap",
      
      grepl("\\b(erp(s)?|eprs|ersp|event-related)\\b", words) == TRUE ~ "erp",
      grepl("\\b(voltage)\\b", words) == TRUE ~ "voltage",
      grepl("\\b(time(series)?|serie(s)?)\\b", words) == TRUE ~ "time series/frequencies",
      grepl("\\b(frequency|frecuencia)\\b", words) == TRUE ~ "time series/frequencies",
      grepl("\\b(trial(s|wise)?|trialplot)\\b", words) == TRUE ~ "trials",
      grepl("\\b(spectrum|spectral)\\b", words) == TRUE ~ "spectral",
      TRUE ~ '_other'
      )) %>%  #filter(type=="_other") %>% View()
  dplyr::select(type) %>%  table(.) %>%  
  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != "bad")  %>% 
   rename_at(vars(colnames(.)), ~ c("ERP image", "n")) 
n6
```

#### 7

```{r}
n7 <- word_preproc(data, 107)  %>% #View()
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\?|\\?\\?|unclear|-|ugly|don't|x|useless)\\b", words_prep) == TRUE ~ "bad", 
      grepl("\\b(amplitude(s)?)\\b", words_prep) == TRUE ~ "(erp) amplitudes",
      grepl("\\b(parallel)\\b", words_prep) == TRUE ~ "parallel coordinates",
      TRUE ~ '_other'
      )) %>% #View()
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != "bad")  %>% 
   rename_at(vars(colnames(.)), ~ c("Parallel plot", "n")) 
n7
```

#### 8

```{r}
n8 <- word_preproc(data, 112)  %>% #View()
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|normal|\\?|\\?\\?|unclear|recall|-|ugly|don't|x|useless|nan|clear)\\b", words) == TRUE ~ "bad", 
      grepl("\\b(sort(ed))\\b", words) == TRUE ~ "sorted channels",
      #grepl("\\bimage\\b.*\\berp(s)?\\b|\\berp(s)?\\b.*\\bimage|erpimage\\b", words) == TRUE ~ "erp image",
      grepl("\\bimage\\b.*\\bchannel\\b|\\bchannel\\b.*\\bimage|chanimage|imagesc\\b", words) == TRUE ~ "channel image",
      grepl("\\b(heat(map)?)\\b", words) == TRUE ~ "(erp) heatmap",
      grepl("\\b(image)\\b", words) == TRUE ~ "(erp) image",
      grepl("\\b(raster(plot)?|custer)\\b", words) == TRUE ~ "raster",
      grepl("\\b(matrix)\\b", words) == TRUE ~ "matrix",
      grepl("\\b(channel(s|wise)?)\\b", words) == TRUE ~ "(erp) channels",
      grepl("\\b(erp(s)?|eprs|ersp|event-related)\\b", words) == TRUE ~ "erp",
      grepl("\\b(voltage)\\b", words) == TRUE ~ "voltage",
     # TRUE ~ '_other'
      )) %>% #filter(type=="image") %>% View()
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != "bad") %>% 
   rename_at(vars(colnames(.)), ~ c("Channel_image", "n")) 

n8
# n8 %>% ggplot(data = ., aes(y = reorder(Channel_image, n),  x= n, fill = Channel_image)) +
#     geom_bar(stat="identity") + ylab("Channel plot") +
#     geom_text(aes(label = n), 
#     hjust = -0.2) + theme_classic() + theme(legend.position="none")

```

#### Combined

```{r}
plot_names <- c("Line plot", "Butterfly plot", "Topoplot", "Topo map", "Topo array", "ERP image", "Channel image", "Parallel plot")

t <- list(n1, n2, n3, n4, n5, n6, n8, n7) 

create_table <- function(t){
  tmp <- t[[1]] %>% slice(1:3) %>% mutate(n1, type = plot_names[1]) %>% rename_with(.cols = 1, ~"names") %>% relocate(type, names, )
  
  for (i in 2:8){
    tmp <- t[[i]] %>% slice(1:3) %>% mutate(n1, type = plot_names[i]) %>% rename_with(.cols = 1, ~"names") %>% relocate(type, names) %>%
      rbind(tmp, .)
  }
  tmp <- tmp %>% 
    group_by( type) %>%
    dplyr::mutate(groupRow = 1:n()) %>%
    ungroup() %>%
    dplyr::mutate(type = ifelse(groupRow == 1, as.character( type), "")) %>%
    select(-c(groupRow))
}


tab <- create_table(t) %>% data.frame() %>%
  mutate(names = str_to_sentence(names)) %>% 
  mutate(names = str_replace(names, "Erp", "ERP")) %>% 
  mutate(names = str_replace(names, "erp", "ERP")) %>% 
  dplyr::rename(`Plot types` = type,
         `Names given by respondents` = names,
         `Scores` = n) 

tab %>% kable(
  #format="latex",
)  %>% kable_minimal(full_width = F,  html_font = "Source Sans Pro")



```
```{r}
library(tables)
library(kableExtra)
library(stargazer)
options(kableExtra.latex.load_packages = TRUE)

set.seed(1206)
q <- data.frame(p = rep(c("A","B"),each=10,len=30),
 a = rep(c(1,2,3),each=10),id=seq(30),
 b = round(runif(30,10,20)),
 c = round(runif(30,40,70)),
 stringsAsFactors = FALSE)
tab <- tabular((Factor(p)*Factor(a)+1)  ~ (N = 1) + (b + c)*(mean+sd),data=q)
toLatex(tab)


```


## Struggles with plots

```{r}
vec <- names(data[ , grepl( ".*Which parts of*." , names(data))])
which(names(data) %in% vec)
```

```{r, warning=FALSE}
word_preproc_tool_2 <- function(data, N, lim){
  #lim = 10
  tmp <- data %>% dplyr::select(N, N+1, N+2) %>% dplyr::rename(soft = !!names(.)[1], parts = !!names(.)[2], new_feature = !!names(.)[3]) %>% 
    filter(!is.na(soft)) %>% 
    mutate_at(vars(colnames(.)), funs(tolower(.))) %>% 
    mutate(soft = str_replace(soft, 'own', "custom"), 
           soft = str_replace(soft, '(matlab)', "matlab"), 
           soft = case_when(
      str_detect(soft, 'brain vision') ~ "brain vision analyser",
      #str_detect(soft, 'matlab|bar.m|boundedline') ~ "custom matlab",
      str_detect(soft, 'mne') ~ "mne",
      TRUE ~ as.character(soft)
    ), 
    parts = case_when(
      str_detect(parts, 'none|n/a|nope|na|idk|nothing|sure|know|can\'t|don\'t|easy') ~ "-",
      TRUE ~ as.character(parts)
    ),
    new_feature = case_when(
      str_detect(new_feature, 'none|n/a|nope|na|idk|nothing|sure|know|can\'t|don\'t') ~ "-",
      TRUE ~ as.character(new_feature)
    )) %>% 
  
    filter_at(vars(parts, new_feature), all_vars(!is.na(.))) %>% mutate(n = lengths(gregexpr("\\W+", soft)) + 1) %>% 
    filter(parts != "-" | new_feature != "-", n < lim) %>%  dplyr::select(-4) %>% arrange(soft)
  return(tmp)
}
```

#### 1

```{r, warning=FALSE}
struggle1 <- word_preproc_tool_2(data, 71, 10) 
separated_row <- separate_rows(struggle1[98, ], parts, sep = ",|\\.") %>% dplyr::select(soft, parts)

tmp <- struggle1 %>% filter( parts != "-") %>% dplyr::select(soft, parts) %>% 
  filter(!row_number() %in% c(2, 11, 40, 41, 69, 78, 83, 87, 89, 91))  %>% 
  separate_rows(parts, sep = "2\\)", convert = FALSE) %>% 
  separate_rows(parts, sep = "\\\r\\\n", convert = FALSE) %>%  rbind(., separated_row) %>%
  mutate(problems = case_when(
      grepl("\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\b", parts) == TRUE ~ "uncertainty", 
      grepl("\\b(axes|lable(s)?|label(s)?|legend|ticks)\\b", parts) == TRUE ~ "plot components\n(axes, lables, legend)", 
      grepl("\\b(color(s)?|colour(s)?|proportion(s)?|publication|scal(e|ing))\\b", parts) == TRUE ~ "styling and color", 
      grepl("\\b(preprocessing|extracting|datatype)\\b", parts) == TRUE ~ "preprocessing", 
      grepl("\\b(syncronisation|organizing|groups)\\b", parts) == TRUE ~ "subplotting", 
      grepl("\\b(mean|significan(t|ce)|permutations|combine)\\b", parts) == TRUE ~ "statistics", 
      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) #%>% View()

n_rest <- mem_tab[4, 3] - nrow(tmp)

tmp1 <- tmp  %>% group_by(problems) %>%
      dplyr::summarise(n = n()) %>% 
      rbind(c("no complains", as.numeric(n_rest))) %>% 
      mutate(n = as.numeric(n)) %>% 
      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) 

problem1 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = "line plot")

tmp1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")
# problems: n of problems is higher than number of rows 
```

```{r}
tmp1 %>% 
  arrange(desc(n)) %>% 
  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +
  geom_col() +
  geom_text(aes(label = paste0(percent, "%"), y = problems, x = percent),
            position = position_stack(vjust = 0.5), color = "black") +
  labs(x = "Percent", y  = "Problem category") +
  theme_classic() +
  theme(axis.text = element_text(size = 12), legend.position = "none")
```

```{r}
tmp %>%  mutate(soft1 = case_when(
      grepl("\\bmne\\w*", soft) == TRUE ~ "mne", 
      grepl("\\bcustom\\b.*\\bmatlab\\b|\\bmatlab\\b.*\\bcustom\\b", soft) == TRUE ~ "custom matlab",

      TRUE ~ as.character(soft)
      )) %>% dplyr::rename(initial = parts) %>% View()
```

#### 2

```{r, warning=FALSE}
struggle2 <- word_preproc_tool_2(data, 82, 10) 
#separated_row <- separate_rows(struggle1[98, ], parts, sep = ",|\\.") %>% dplyr::select(parts)

tmp <- struggle2 %>% filter( parts != "-") %>% dplyr::select(parts) %>%
  filter(!row_number() %in% c(18, 31))  %>% 
  #separate_rows(parts, sep = "2\\)", convert = FALSE) %>% 
  #separate_rows(parts, sep = "\\\r\\\n", convert = FALSE) %>%  rbind(., separated_row) %>%
  mutate(problems = case_when(
      grepl("\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\b", parts) == TRUE ~ "uncertainty", 
      grepl("\\b(ax(is|es)?|lable(s)?|label(s)?|legend|ticks)\\b", parts) == TRUE ~ "plot components\n(axes, lables, legend)", 
      grepl("\\b(color(s|ing)?|colour(s)?|proportion(s)?|publication|neg|scal(e|ing))\\b", parts) == TRUE ~ "styling and color", 
      grepl("\\btopo\\w*", parts) == TRUE ~ "adding topography", 
      grepl("\\b(channel(s)?|electrodes(s)?|interpretable|read|remembering)\\b", parts) == TRUE ~ "channel selection"
      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) 

n_rest <- mem_tab[1, 3] - nrow(tmp)

tmp1 <- tmp %>% group_by(problems) %>%
      dplyr::summarise(n = n()) %>% 
      rbind(c("no complains", as.numeric(n_rest))) %>% 
      mutate(n = as.numeric(n)) %>% 
      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) 

problem2 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = "butterfly plot")

tmp1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")
```

```{r}
tmp1 %>% 
  arrange(desc(n)) %>% 
  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +
  geom_col() +
  geom_text(aes(label = paste0(percent, "%"), y = problems, x = percent),
            position = position_stack(vjust = 0.5), color = "black") +
  labs(x = "Percent", y  = "Problem category") +
  theme_classic() +
  theme(axis.text = element_text(size = 12), legend.position = "none")
```

#### 3

```{r, warning=FALSE}
struggle3 <- word_preproc_tool_2(data, 87, 10) 
#separated_row <- separate_rows(struggle1[98, ], parts, sep = ",|\\.") %>% dplyr::select(parts)

tmp <- struggle3 %>% filter( parts != "-") %>% dplyr::select(parts) %>% 
  filter(!row_number() %in% c(5, 7, 16, 18, 43, 50))  %>% 
  separate_rows(parts, sep = ";", convert = FALSE) %>% filter(nchar(parts) != 0) %>%  
  filter(!row_number() %in% c(59))  %>% 
  #separate_rows(parts, sep = "\\\r\\\n", convert = FALSE) %>%  rbind(., separated_row) %>%
  mutate(problems = case_when(
    grepl("\\b(head|headshape|montage|topographies)\\b", parts) == TRUE ~ "head shape and montage",
    grepl("\\b(time|threshold)\\b", parts) == TRUE ~ "time selection",
      grepl("\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\b", parts) == TRUE ~ "uncertainty",
      grepl("\\b(scal(e|ing|es))\\b", parts) == TRUE ~ "scaling", 
      grepl("\\b(interpolat(e|ion)?|edges)\\b", parts) == TRUE ~ "interpolation",
      grepl("\\b(color(s|ing|bar|map)?|colour(s)?|proportion(s)?|publication|limits|neg)\\b", parts) == TRUE ~ "styling and color", 
      grepl("\\b(channel(s)?|electrode(s)?|sensors|elec)\\b", parts) == TRUE ~ "channel selection",
      
      grepl("\\b(ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|features|layout)\\b", parts) == TRUE ~ "plot components\n(axes, lables, legend)", 
      grepl("\\b(mean|significan(t|ce)|permutations|p-value(s)?|smoothing|statistical|stats)\\b", parts) == TRUE ~ "statistics",
      

     
      )) %>% #View() 

filter(nchar(parts) != 0) %>% filter(!is.na(problems)) 

n_rest <- mem_tab[6, 3] - nrow(tmp)

tmp1 <- tmp %>% group_by(problems) %>%
      dplyr::summarise(n = n()) %>% 
      rbind(c("no complains", as.numeric(n_rest))) %>% 
      mutate(n = as.numeric(n)) %>% 
      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) 

problem3 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = "topoplot")

tmp1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")


```

```{r}
tmp1 %>% 
  arrange(desc(n)) %>% 
  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +
  geom_col() + 
  geom_text(aes(label = paste0(percent, "%"), y = problems, x = percent),
            position = position_stack(vjust = 0.5), color = "black") +
  labs(x = "Percent", y  = "Problem category") +
  theme_classic() +
  theme(axis.text = element_text(size = 12), legend.position = "none")
```

#### 4

```{r, warning=FALSE}
struggle4 <- word_preproc_tool_2(data, 92, 10) 
#separated_row <- separate_rows(struggle1[98, ], parts, sep = ",|\\.") %>% dplyr::select(parts)

tmp <- struggle4 %>% filter( parts != "-") %>% dplyr::select(parts) %>% 
  filter(!grepl("\\b(no|okay|certain|see|same as|\"\"|reaching)\\b", parts)) %>% #View()
  filter(!row_number() %in% c(17, 51, 12 ))  %>% 
  separate_rows(parts, sep = ";", convert = FALSE) %>% 
#filter(!row_number() %in% c(59))  %>% 
  #separate_rows(parts, sep = "\\\r\\\n", convert = FALSE) %>%  rbind(., separated_row) %>%
  mutate(problems = case_when(
    grepl("\\b(head|headshape|montage|topographies|topoplots|shape)\\b", parts) == TRUE ~ "head shape and montage",
    grepl("\\b(time(s|course|points)?|threshold)\\b", parts) == TRUE ~ "time selection",
      grepl("\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\b", parts) == TRUE ~ "uncertainty",
      grepl("\\b(channel(s)?|electrode(s)?|sensors|elec)\\b", parts) == TRUE ~ "channel selection",
      grepl("\\b(color(s|ing|bar|map|scale)?|colour(s)?|proportion(s)?|publication|limits|neg|scal(e|ing|es))\\b", parts) == TRUE ~ "styling and color", 
      grepl("\\b(ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|features|markers|layout|specifications)\\b", parts) == TRUE ~ "plot components\n(axes, lables, legend)", 
       grepl("\\b(legible|readable|visible|small|datatype|shape|montage|subplots|size(s)?|resizing|arrange|channel(s)?|electrode(s)?|sensors)|scal(e|ing|es)|references\\b", parts) == TRUE ~ "legibility and scaling",
      grepl("\\b(mean|significan(t|ce)|permutations|p-value(s)?|smoothing|statistical|stats|t-stat)\\b", parts) == TRUE ~ "statistics",
      grepl("\\b(interpolat(e|ion)?|edges)\\b", parts) == TRUE ~ "interpolation",
      TRUE ~ '_other'
      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) #%>% 
  filter(problems =="_other") %>% View()

n_rest <- mem_tab[8, 3] - nrow(tmp)

tmp1 <- tmp %>% group_by(problems) %>%
      dplyr::summarise(n = n()) %>% 
      rbind(c("no complains", as.numeric(n_rest))) %>% 
      mutate(n = as.numeric(n)) %>% 
      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) 
problem4 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = "topomap")

tmp1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")

 # words = ifelse(nchar(words)==0, NA, words),
#write.xlsx(tmp, "data/struggles.xlsx", sheetName = "line plot", col.names = TRUE, row.names = TRUE, append = FALSE)

# problems: n of problems is higher than number of rows 

```

```{r}
tmp1 %>% 
  arrange(desc(n)) %>% 
  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +
  geom_col() + 
  geom_text(aes(label = paste0(percent, "%"), y = problems, x = percent),
            position = position_stack(vjust = 0.5), color = "black") +
  labs(x = "Percent", y  = "Problem category") +
  theme_classic() +
  theme(axis.text = element_text(size = 12), legend.position = "none")
```

#### 5

```{r, warning=FALSE}
struggle5 <- word_preproc_tool_2(data, 99, 10) 
#separated_row <- separate_rows(struggle1[98, ], parts, sep = ",|\\.") %>% dplyr::select(parts)

tmp <- struggle5 %>% filter( parts != "-") %>% dplyr::select(parts) %>% #View()
  filter(!grepl("\\b(_|reaching)\\b", parts)) %>%
  filter(!row_number() %in% c(33 ))  %>% 
  separate_rows(parts, sep = ";", convert = FALSE) %>% #View()
#filter(!row_number() %in% c(59))  %>% 
  #separate_rows(parts, sep = "\\\r\\\n", convert = FALSE) %>%  rbind(., separated_row) %>%
  mutate(problems = case_when(
    grepl("\\b(selecting|marking|spotting)\\b", parts) == TRUE ~ "channel selection\n(differentiation, identification)",
    grepl("\\b(legible|readable|visible|small|datatype|shape|montage|subplots|size(s)?|larger|dimensions|channel(s)?|electrode(s)?|sensors)|scal(e|ing|es)|references\\b", parts) == TRUE ~ "legibility and scaling",
      grepl("\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\b", parts) == TRUE ~ "uncertainty",
      grepl("\\b(color(s|ing|bar|map)?|colour(s)?|proportion(s)?|publication|limits|quality|scal(e|ing|es))\\b", parts) == TRUE ~ "styling and color", 
      grepl("\\b(ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|edit|features|markers|layout|specifications)\\b", parts) == TRUE ~ "plot components\n(axes, lables, legend)", 
      grepl("\\b(preprocessing|extracting|masks)\\b", parts) == TRUE ~ "preprocessing", 
    
      TRUE ~ '_other'
      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) #%>% 
  filter(problems =="legibility and scaling") %>% View()


n_rest <- mem_tab[7, 3] - nrow(tmp)

tmp1 <- tmp %>% group_by(problems) %>%
      dplyr::summarise(n = n()) %>% 
      rbind(c("no complains", as.numeric(n_rest))) %>% 
      mutate(n = as.numeric(n)) %>% 
      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) 

problem5 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = "topo array")

tmp1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")

```

```{r}
tmp1 %>% 
  arrange(desc(n)) %>% 
  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +
  geom_col() + 
  geom_text(aes(label = paste0(percent, "%"), y = problems, x = percent),
            position = position_stack(vjust = 0.5), color = "black") +
  labs(x = "Percent", y  = "Problem category") +
  theme_classic() +
  theme(axis.text = element_text(size = 12), legend.position = "none")
```

#### 6

```{r, warning=FALSE}
struggle6 <- word_preproc_tool_2(data, 104, 10) 
#separated_row <- separate_rows(struggle1[98, ], parts, sep = ",|\\.") %>% dplyr::select(parts)

tmp <- struggle6 %>% filter( parts != "-") %>% dplyr::select(parts) %>% 
  filter(!grepl("\\b(x|ok|no)\\b", parts)) %>% 
 # filter(!row_number() %in% c(33 ))  %>% 
  separate_rows(parts, sep = ";", convert = FALSE) %>% #View()
#filter(!row_number() %in% c(59))  %>% 
  #separate_rows(parts, sep = "\\\r\\\n", convert = FALSE) %>%  rbind(., separated_row) %>%
  mutate(problems = case_when(
    grepl("\\b(sort(ing)?|max|correspondance)\\b", parts) == TRUE ~ "sorting", 
    grepl("\\b(smoothing)\\b", parts) == TRUE ~ "smoothing", 
    grepl("\\b(epochs|time)\\b", parts) == TRUE ~ "defining epochs", 
    grepl("\\b(colo(r|ur)|paper)\\b", parts) == TRUE ~ "styling and color", 
    
      TRUE ~ '_other'
      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) #%>% 
  filter(problems =="defining epochs") %>% View()

n_rest <- mem_tab[7, 3] - nrow(tmp)

tmp1 <- tmp %>% group_by(problems) %>%
      dplyr::summarise(n = n()) %>% 
      rbind(c("no complains", as.numeric(n_rest))) %>% 
      mutate(n = as.numeric(n)) %>% 
      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) 


problem6 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = "erp image")

tmp1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")

```

```{r}
tmp1 %>% 
  arrange(desc(n)) %>% 
  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +
  geom_col() + 
  geom_text(aes(label = paste0(percent, "%"), y = problems, x = percent),
            position = position_stack(vjust = 0.5), color = "black") +
  labs(x = "Percent", y  = "Problem category") +
  theme_classic() +
  theme(axis.text = element_text(size = 12), legend.position = "none")
```

#### 8

```{r, warning=FALSE}
struggle8 <- word_preproc_tool_2(data, 114, 10) 
#separated_row <- separate_rows(struggle1[98, ], parts, sep = ",|\\.") %>% dplyr::select(parts)

tmp <- struggle8 %>% filter( parts != "-") %>% dplyr::select(parts) %>% 
  filter(!grepl("\\b(n|x|ok|dont)\\b", parts)) %>% #View()
 # filter(!row_number() %in% c(33 ))  %>% 
  #separate_rows(parts, sep = ";", convert = FALSE) %>% #View()
#filter(!row_number() %in% c(59))  %>% 
  #separate_rows(parts, sep = "\\\r\\\n", convert = FALSE) %>%  rbind(., separated_row) %>%
  mutate(problems = case_when(
    grepl("\\b(sort(ing)?|order(ing)?|organisation)\\b", parts) == TRUE ~ "order and sorting", 
    grepl("\\b(scale|visability|interpreting|range)\\b", parts) == TRUE ~ "legibility and scaling", 
    grepl("\\b(color(bar)?|paper)\\b", parts) == TRUE ~ "styling and color", 
    
      TRUE ~ '_other'
      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems))# %>% 
  filter(problems =="_other") %>% View()

n_rest <- mem_tab[2, 3] - nrow(tmp)

tmp1 <- tmp %>% group_by(problems) %>%
      dplyr::summarise(n = n()) %>% 
      rbind(c("no complains", as.numeric(n_rest))) %>% 
      mutate(n = as.numeric(n)) %>% 
      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) 
problem8 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = "channel image")

tmp1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")
```

```{r}
tmp1 %>% 
  arrange(desc(n)) %>% 
  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +
  geom_col() + 
  geom_text(aes(label = paste0(percent, "%"), y = problems, x = percent),
            position = position_stack(vjust = 0.5), color = "black") +
  labs(x = "Percent", y  = "Problem category") +
  theme_classic() +
  theme(axis.text = element_text(size = 12), legend.position = "none")
```

## The most common struggles

```{r}

problems <- rbind(problem1, problem2, problem3, problem4, problem5, problem6, problem8) %>%
  group_by(name) %>%  mutate(index = match(name, unique(name))) 

```

```{r}
problems %>% filter(problems == "no complains") %>% 
  ggplot(., aes(y = reorder(name, percent1), x = percent1, fill = name)) +
  geom_col() + 
  geom_text(aes(label = paste0(percent1, "%"), y = name, x = percent1),
            position = position_stack(vjust = 0.5), color = "black") +
  labs(x = "Percent of no complains", y  = "Problem category") +
  theme_classic() +
  theme(axis.text = element_text(size = 12), legend.position = "none")
```

```{r}
problems %>% filter(problems != "no complains") %>% group_by(name) %>% 
  arrange(desc(percent1)) %>% slice(1:3) %>% 
  arrange(index) %>%  dplyr::select(name, problems, percent1) %>%  
  mutate(name = str_to_sentence(name)) %>% 
  mutate(name = str_replace(name, "Erp", "ERP")) %>% 
  mutate(name = str_replace(name, "erp", "ERP")) %>%  
  group_by(name) %>%
  dplyr::mutate(groupRow = 1:n()) %>%
  ungroup() %>%
  dplyr::mutate(name = ifelse(groupRow == 1, as.character(name), "")) %>%
  select(-c(groupRow)) %>% 
  kable(escape = F, booktabs = T, col.names = c("Plot name", "The main problem", "Percent of respondents"))   %>% 
  kable_minimal(full_width = F,  html_font = "Source Sans Pro") 
```

## New feature

#### 1

```{r, warning=FALSE}

tmp <- struggle1 %>% filter( new_feature != "-") %>% dplyr::select(new_feature) %>%
  filter(!grepl("\\b(\\.|\\/|see)\\b", new_feature)) %>%  
  filter(!row_number() %in% c(13, 18, 20  ))  %>% 
  separate_rows(new_feature, sep = ";", convert = FALSE) %>% 
#filter(!row_number() %in% c(59))  %>% 
  separate_rows(new_feature, sep = "\\\r\\\n", convert = FALSE) %>% 
  mutate(group = case_when(
    grepl("\\bsignif\\w*", new_feature) == TRUE ~ "adding significance", 
    grepl("\\bstat\\w*", new_feature) == TRUE ~ "adding statistics", 
    grepl("\\btopo\\w*", new_feature) == TRUE ~ "adding topoplot", 
    grepl("\\b(custom\\w*|details|annotations|font|labels|color|colours|thicker)", new_feature) == TRUE ~ "customization (color, labels)", 
    grepl("\\b(electrode|click|control|interact\\w*|gui|select\\w*)", new_feature) == TRUE ~ "interactivity and channel selection", 
    grepl("\\b(highlight|shadow|window)", new_feature) == TRUE ~ "area highlighting", 
    grepl("\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\b", new_feature) == TRUE ~ "uncertainty", 
    
      TRUE ~ '_other'
      )) %>% filter(nchar(new_feature) != 0) #%>% View()

#n_rest <- mem_tab[2, 3] - nrow(tmp)

tmp1 <- tmp %>% group_by(group) %>%
      dplyr::summarise(n = n()) %>% 
     # rbind(c("no complains", as.numeric(n_rest))) %>% 
      mutate(n = as.numeric(n)) %>% 
      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) 


tmp1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")

 # words = ifelse(nchar(words)==0, NA, words),
#write.xlsx(tmp, "data/struggles.xlsx", sheetName = "line plot", col.names = TRUE, row.names = TRUE, append = FALSE)

# problems: n of problems is higher than number of rows 

```

#### 2

```{r, warning=FALSE}

tmp <- struggle2 %>% filter( new_feature != "-") %>% dplyr::select(new_feature) %>% #View()
  filter(!grepl("\\b(see|not|useful)\\b", new_feature)) %>%  
  #filter(!row_number() %in% c(13, 18, 20  ))  %>% 
  #separate_rows(new_feature, sep = ";", convert = FALSE) %>% 
#filter(!row_number() %in% c(59))  %>% 
  separate_rows(new_feature, sep = "\\\r\\\n", convert = FALSE) %>% 
  mutate(group = case_when(
    grepl("\\bsignif\\w*", new_feature) == TRUE ~ "adding significance", 
    grepl("\\b(stat\\w*|average|mean)", new_feature) == TRUE ~ "adding statistics", 
    grepl("\\btopo\\w*", new_feature) == TRUE ~ "adding topoplot", 
    grepl("\\b(custom\\w*|details|annotations|opacity|font|labels|color|colour(s)?|thicker)", new_feature) == TRUE ~ "customization (color, labels)", 
    grepl("\\b(manipulating|highlight|graying|click|control|interact\\w*|gui|select\\w*)", new_feature) == TRUE ~ "interactivity and channel selection", 
    grepl("\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\b", new_feature) == TRUE ~ "uncertainty", 
    
      TRUE ~ '_other'
      )) %>% filter(nchar(new_feature) != 0) #%>% View()

#n_rest <- mem_tab[2, 3] - nrow(tmp)

tmp1 <- tmp %>% group_by(group) %>%
      dplyr::summarise(n = n()) %>% 
     # rbind(c("no complains", as.numeric(n_rest))) %>% 
      mutate(n = as.numeric(n)) %>% 
      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) 


tmp1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")

```

#### 3

```{r, warning=FALSE}

tmp <- struggle3 %>% filter( new_feature != "-") %>% dplyr::select(new_feature) %>% 
  filter(!grepl("\\b(no|\\/|above|good|balanced)\\b", new_feature)) %>%  #View()
  #filter(!row_number() %in% c(13, 18, 20  ))  %>% 
  #separate_rows(new_feature, sep = ";", convert = FALSE) %>% 
#filter(!row_number() %in% c(59))  %>% 
  separate_rows(new_feature, sep = "\\\r\\\n", convert = FALSE) %>% 
  mutate(group = case_when(
    grepl("\\bsignif\\w*", new_feature) == TRUE ~ "adding significance",
    grepl("\\b(3d)\\b", new_feature) == TRUE ~ "3d", 
    grepl("\\b(stat\\w*|average|mean)\\b", new_feature) == TRUE ~ "adding statistics", 
    grepl("\\b(interpolat\\w*|extrapolat\\w*)\\b", new_feature) == TRUE ~ "interpolation and extrapolation", 
    grepl("\\btopo\\w*", new_feature) == TRUE ~ "adding topoplot", 
    grepl("\\b(custom\\w*|details|annotations|opacity|font|labels|color(s|map|maps|bar)?|colour(s)?|thicker)\\b", new_feature) == TRUE ~ "customization (color, labels)", 
    grepl("\\b(anomatiom|slider|scrolling|gif|manipulating|hightlight|highlight|graying|click|control|interact\\w*|gui|select\\w*)", new_feature) == TRUE ~ "interactivity and channel selection", 
    grepl("\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\b", new_feature) == TRUE ~ "uncertainty", 
     grepl("\\b(shape(s)?|circle|head)\\b", new_feature) == TRUE ~ "head shape", 
      TRUE ~ '_other'
      )) %>% filter(nchar(new_feature) != 0)# %>% View()

#n_rest <- mem_tab[2, 3] - nrow(tmp)

tmp1 <- tmp %>% group_by(group) %>%
      dplyr::summarise(n = n()) %>% 
     # rbind(c("no complains", as.numeric(n_rest))) %>% 
      mutate(n = as.numeric(n)) %>% 
      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) 


tmp1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")

```

## Feedback

```{r}
feed <- data[120] %>% dplyr::rename(feed = !!names(.)[1]) %>%  filter(!is.na(feed), feed != "-") #%>% View()
feed  %>%
  filter(!row_number() %in% c(3, 14, 17, 32, 37, 41))# just appreciation
```

```{r, eval = FALSE, echo = FALSE}
corpus <- VCorpus(VectorSource(d))
corpus <- corpus %>%
  tm_map(removeNumbers) %>%
  tm_map(removePunctuation) %>%
  tm_map(stripWhitespace) %>%
  tm_map(content_transformer(tolower)) %>%
  tm_map(removeWords, stopwords("english")) %>%
  tm_map(stemDocument)

corpus[[1]][[1]][1]
  
dtm <- DocumentTermMatrix(corpus)
lda <- LDA(dtm, k = 10)
terms(lda, 10)



```

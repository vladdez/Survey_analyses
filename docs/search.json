[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello! We provided a survey to find out how researchers use EEG plotting tools in their daily work. Here you can find the analysis of this survey."
  },
  {
    "objectID": "connections.html",
    "href": "connections.html",
    "title": "user_study",
    "section": "",
    "text": "library(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\nlibrary(janitor)\nlibrary(GGally)\nlibrary(formattable)\nlibrary(kableExtra)\n\n\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method"
  },
  {
    "objectID": "connections.html#up-or-down",
    "href": "connections.html#up-or-down",
    "title": "user_study",
    "section": "Up or down",
    "text": "Up or down"
  },
  {
    "objectID": "connections.html#experience-tools",
    "href": "connections.html#experience-tools",
    "title": "user_study",
    "section": "Experience ~ tools",
    "text": "Experience ~ tools\n\nvec <- names(data[25:50]) %>% str_split_i(., \"\\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:50] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %>% \n  cbind(data[20], .) %>% dplyr::rename(years = !!names(.)[1]) %>% filter(years < 50) %>% \n  select_if(colSums(.) != 0)\n\n\nTools and year of experince\n\na <- software  %>% \n  select_if(colSums(.) > 10) \n\nres <- a %>%  dplyr::select(years, BESA) %>% \n  group_by(BESA) %>% dplyr::summarise(mean(years)) %>% dplyr::rename(., Usage = BESA,BESA = `mean(years)`)\n\ncn <- colnames(a[3:length(a)])\nfor (i in 1:length(cn)){\n  tmp <- a %>%  dplyr::select(years, cn[i]) %>% \n  group_by_at(2) %>% dplyr::summarise( mean(years)) %>%  dplyr::select(-1)\n  colnames(tmp) <- cn[i] \n  res <- cbind(res, tmp) \n  \n  \n  print(cn[i])\n}\n\n[1] \"Brainstorm\"\n[1] \"Brain Vision An.. \"\n[1] \"EEGLAB\"\n[1] \"ERPLAB\"\n[1] \"FieldTrip\"\n[1] \"LIMO\"\n[1] \"MNE-Python\"\n[1] \"SPM\"\n[1] \"Custom scripts\"\n\n res %>% t()  %>%\n  row_to_names(row_number = 1) %>% data.frame() %>% dplyr::rename(., not_used = X0, used = X1) %>% \n  tibble::rownames_to_column(., \"software\") %>%  \n  dplyr::mutate(., not_used = round(not_used, 2), used = round(used, 2)) %>% \n  dplyr::mutate(., status = ifelse(not_used > used, \"younger\", \"older\")) %>% \n  mutate(status = cell_spec(status, color = ifelse(status == \"younger\", \"green\", \"black\")))   %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>%\n   add_header_above(header = c(\" \" = 1, \"Years of user experience\" = 3))   %>%\n  kable_classic(full_width = T, html_font = \"Arial\")\n\n\n\n \n\n\nYears of user experience\n\n  \n    software \n    not_used \n    used \n    status \n  \n \n\n  \n    BESA \n    7.68 \n    8.58 \n    older \n  \n  \n    Brainstorm \n    7.54 \n    8.71 \n    older \n  \n  \n    Brain Vision An.. \n    7.76 \n    7.70 \n    younger \n  \n  \n    EEGLAB \n    6.27 \n    8.68 \n    older \n  \n  \n    ERPLAB \n    7.39 \n    9.17 \n    older \n  \n  \n    FieldTrip \n    7.53 \n    7.99 \n    older \n  \n  \n    LIMO \n    7.49 \n    11.08 \n    older \n  \n  \n    MNE-Python \n    8.22 \n    7.02 \n    younger \n  \n  \n    SPM \n    7.65 \n    8.58 \n    older \n  \n  \n    Custom scripts \n    7.17 \n    8.74 \n    older \n  \n\n\n\n\n\n\n# number of used software and years of experience\nny <- merge(data.frame(rowSums(software)), data[20]) %>% \n   rename_at(vars(colnames(.)), ~ c(\"n_soft\", \"years\")) %>% filter(years < 50)  %>% data.frame()\n\nny %>% \n  lm(data=., n_soft ~ years) %>% summary(.)\n\n\nCall:\nlm(formula = n_soft ~ years, data = .)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-9.206 -4.706 -1.206  2.544 23.294 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  1.071e+01  5.988e-02   178.8   <2e-16 ***\nyears       -8.780e-16  6.211e-03     0.0        1    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.421 on 32398 degrees of freedom\nMultiple R-squared:  4.853e-28, Adjusted R-squared:  -3.087e-05 \nF-statistic: 1.572e-23 on 1 and 32398 DF,  p-value: 1\n\nny %>% ggplot(., aes(x=n_soft, y=years)) + geom_point()\n\n\n\n\n\n# number of used software and  self assessment\nmerge(data.frame(rowSums(software)), data[21]) %>% \n   rename_at(vars(colnames(.)), ~ c(\"n_soft\", \"selfass\")) %>% \n  #lm(data=., n_soft ~ selfass) %>% summary(.)\n  ggplot(., aes(y=n_soft, x=selfass)) + geom_violin()"
  },
  {
    "objectID": "connections.html#in-search-of-single-variable-representing-experience",
    "href": "connections.html#in-search-of-single-variable-representing-experience",
    "title": "user_study",
    "section": "In search of single variable representing experience",
    "text": "In search of single variable representing experience\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggpairs(exp_data[1:2]) \n\n\n\n\n\nggpairs(exp_data[4:5]) \n\n\n\n\n\nggpairs(exp_data[3:5]) \n\n\n\n\n\nggpairs(exp_data) \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "exploration.html",
    "href": "exploration.html",
    "title": "exploration",
    "section": "",
    "text": "# upload to the git\nlibrary(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\nlibrary(kableExtra)\n\n\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method"
  },
  {
    "objectID": "exploration.html#bio-stats",
    "href": "exploration.html#bio-stats",
    "title": "exploration",
    "section": "Bio stats",
    "text": "Bio stats\nCountry\n\ndata.frame(table(data[8])) %>% arrange(desc(Freq)) %>% dplyr::rename(country_work = !!names(.)[1]) %>%\n    ggplot(data = ., aes(y = reorder(country_work, Freq),  x= Freq)) +\n    geom_bar(stat=\"identity\") + ylab(\"Country of work for participant\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2)+ theme(legend.position=\"none\")\n\n\n\n\nField\n\nfield <- as.data.frame(table(data[9])) %>% arrange(desc(Freq)) %>% head(3)\nfield$Freq[1] <- field$Freq[1] + 1 # from Others\nfield$Freq[2] <- field$Freq[2] + 1\nfield$Freq[3] <- field$Freq[3] + 1\nfield %>% dplyr::rename(area = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = reorder(area, Freq),  y= Freq, fill = area)) +\n    geom_bar(stat=\"identity\") + xlab(\"Area of research\") +\n    geom_text(aes(label = Freq), \n    vjust = -0.2)+ theme(legend.position=\"none\")\n\n\n\n\n\nArea\n\nt <- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt <- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\n\narea <- data.frame(matrix(tt)) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), \"affective neuroscience\", words)) %>%  \n  #mutate(words =ifelse(str_detect(.[[1]], 'spatial'), \"spatial\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'memory'), \"memory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), \"auditory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognition|consciousness|meditation|cognitive control|self|executive functions'), \"cognitive control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), \"deep brain stimulation\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), \"decision making\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), \"ageing\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'social'), \"social cognition\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), \"olfaction\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), \"language and speech\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'bci'), \"bci\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), \"sleep\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), \"time\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|perception'), \"attention and perception\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'vis'), \"vision\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development'), \"development\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), \"motor control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), \"mental disorders\", words)) %>%   \n  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), \"dsp\", words))\n\n   \narea %>% group_by(words) %>% dplyr::summarise(Freq = n()) %>% \n  data.frame(.)  %>% mutate(words = as.character(words)) %>%  #arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(words, Freq),  x= Freq)) +\n    geom_bar(stat=\"identity\") + ylab(\"Words\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2)\n\n\n\n\n\n\nMethod\n\nmethod <- data[14:17]\nch <- colnames(method)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\[\", 2) \ncolnames(method) <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd <- data.frame(rowSums(t(data.frame(foreach(i = colnames(method)) %do% ifelse(method[i]==\"Yes\", 1, 0))))) \nd <- tibble::rownames_to_column(d, \"plots\") \ncolnames(d) <- c(\"method\", \"sum_scores\")\nd %>% arrange(desc(sum_scores)) %>% \n    ggplot(., aes(x = reorder(method, sum_scores), y = sum_scores, fill = method)) +\n    geom_col(stat = \"identity\") + labs(x = \"Method\", y = \"Value\", fill = \"Method\") +\n    theme_classic() + theme(legend.position=\"none\")\n\nWarning in geom_col(stat = \"identity\"): Ignoring unknown parameters: `stat`\n\n\n\n\n\n\n\nExperience\nPapers\n\ndata[19] %>% dplyr::rename(papers = !!names(.)[1]) %>% filter(papers < 100) %>%  ggplot(data = ., aes(papers)) +\n  geom_histogram() +\n  labs(x =\"How many published papers/preprints do you have, where you used EEG, MEG or iEEG analysis?\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n# PCA for clustering it \n\nPosition\n\n#na.omit(data[13]) # recode Others\nas.data.frame(table(na.omit(data[12]))) %>% dplyr::rename(position = !!names(.)[1]) %>%\n  arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(position, Freq),  x= Freq, fill = position)) +\n    geom_bar(stat=\"identity\") + ylab(\"Position\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2)+ theme(legend.position=\"none\")\n\n\n\n\nYears\n\ndata %>% filter(.[[20]] < 50) %>% ggplot(data = ., aes_(as.name(names(data)[20]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 30, 5)) +\n    labs(x =\"Years of experience with EEG, MEG, or iEEG analysis\")\n\nWarning: `aes_()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nSelf-assessed level\n\ntable(data[21]) %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = level, y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Self-assessed level\") +\n    geom_text(aes(label = Freq), vjust = -0.2) + theme(legend.position=\"none\") +\n    scale_x_discrete(limits = c(\"Beginner\", \"Intermediate\", \"Expert\"))\n\n\n\n\nCode contribution\n\ntable(data[22])  %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = reorder(level, Freq),  y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Code contribution\") +\n    geom_text(aes(label = Freq), vjust = -0.2) + theme(legend.position=\"none\")\n\n\n\n\n\n\nChannels\nHow many channels do you typically measure?\n\ndata %>% ggplot(data = ., aes_(as.name(names(data)[23]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30)) +\n    labs(x =\"How many channels do you typically measure?\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nHow many channels do you typically measure?\n\ndata %>% filter(.[[24]] < 500) %>% ggplot(data = ., aes_(as.name(names(data)[24]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30))+\n    labs(x =\"How many channels of those you measured do you typically analyse?\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n# plots should be combined"
  },
  {
    "objectID": "exploration.html#software-usage",
    "href": "exploration.html#software-usage",
    "title": "exploration",
    "section": "Software usage",
    "text": "Software usage\n\nfrequency\n\nna.omit(data[51]) %>% nrow()\n\n[1] 20\n\nother <- c(rep(\"Custom scripts\",each=9), \"4DBTi\", rep(\"letswave\", 3), \"mTRF\", \"RAGU\", \"IGOR Pro\", \"EEGProcessor\", \"ELAN\", \"WinEEG\") %>% table(.) %>% data.frame(.) %>% rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))\n\n\nvec <- names(data[25:50]) %>% str_split_i(., \"\\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:50] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\n\nd <- data.frame(rowSums(t(software))) %>%  tibble::rownames_to_column(., \"soft\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))   %>% \n  rbind(., other) %>% dplyr::group_by(soft) %>% dplyr::summarise(sum_scores = sum(sum_scores)) %>% \n  arrange(., desc(sum_scores))\n\nd  %>% filter(sum_scores >= 1) %>% \n    ggplot(data = ., aes(y = reorder(soft, sum_scores),  x= sum_scores, fill = soft)) +\n    geom_bar(stat=\"identity\") + ylab(\"Soft\") +\n    geom_text(aes(label = sum_scores), \n    hjust = -0.2) + theme(legend.position=\"none\")\n\n\n\n\n\n\ncooccurence\n\n# how to order by diagonal matrix \n# how to add others\nsoftware <- data[25:50]\nch <- colnames(software)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\[\", 2) \nch1 <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd1 <- foreach(i = colnames(software)) %do% ifelse(software[i]==\"Yes\", 1, 0)\nc <- crossprod(matrix(unlist(d1), ncol = 26))\nrownames(c) <- ch1\ncolnames(c) <- rownames(c)\n\ndiag.order <- order(diag(c), decreasing = FALSE)\nmat_reordered <- c[diag.order, diag.order]\n\nmelt(mat_reordered) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))"
  },
  {
    "objectID": "exploration.html#important-features",
    "href": "exploration.html#important-features",
    "title": "exploration",
    "section": "Important features",
    "text": "Important features\n\nfeatures <- data[52:60]\nch <- colnames(features)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\[\", 2) \ncolnames(features) <- foreach(i = ch1) %do% str_sub(i, 1, -2)\n\nfeatures <- features %>%  mutate_at(c(colnames(features)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 ))) %>% \n  colSums(., na.rm =T) %>% data.frame(.) %>%  tibble::rownames_to_column(., \"Feature\") %>% \n  arrange(desc(.))\ncolnames(features) <- c(\"Feature\", \"sum_scores\")\nfeatures %>%   kbl() \n\n\n\n \n  \n    Feature \n    sum_scores \n  \n \n\n  \n    Flexible tweaki.. \n    284 \n  \n  \n    Presentation/pu.. \n    222 \n  \n  \n    Reproducibility.. \n    215 \n  \n  \n    Generating plot.. ]...6 \n    213 \n  \n  \n    Combine with a .. \n    115 \n  \n  \n    Zooming or pann.. \n    104 \n  \n  \n    Speed of plotting \n    77 \n  \n  \n    Interactive sel.. \n    68 \n  \n  \n    Generating plot.. ]...5 \n    -68 \n  \n\n\n\n\n# divide by number of people \n# individual plots\n# correlation with experience factor"
  },
  {
    "objectID": "exploration.html#familiarity-with-plots",
    "href": "exploration.html#familiarity-with-plots",
    "title": "exploration",
    "section": "Familiarity with plots",
    "text": "Familiarity with plots\n\nRecognition\n\nvec <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_image\", \"parallel\", \"channel_image\")\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plot\", \"sum_scores\"))  %>% \n  arrange(., desc(sum_scores)) %>% \n  ggplot(data = ., aes(y = reorder(plot, sum_scores), x= sum_scores, fill=plot)) +\n  geom_bar(stat=\"identity\") + ylab(\"plot\") + \n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Select ERP plot you are familiar with\")\n\n\n\n\n\n\nPlotting\n\nvec <- names(data[ , grepl( \"Have you ever\" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\n\n\ndo_vec <- function(vec, data){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., answer, score, `N.A`:`Yes`, factor_key=TRUE) %>% \n  mutate(answer = str_replace(answer, 'N.A', \"No\"))\n\nWarning in rbind(t1, t): number of columns of result is not a multiple of vector\nlength (arg 1)\n\ntab %>% \n  ggplot(., aes(x = plots, y = score, fill = answer)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic() +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Have you ever plotted this kind of figure?\")\n\n\n\n\n\n\nRecognition and plotting\n\nvec <- names(data[ , grepl( \"Have you ever\" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_img\", \"parallel\", \"channel_img\")\n\ndo_vec <- function(vec, data, plot_names){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec[2:length(vec)], data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>% merge(., tab)  %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of familiarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2) +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Familiarity with plots\")"
  },
  {
    "objectID": "exploration.html#have-you-ever-plotted-this-king-of-figure",
    "href": "exploration.html#have-you-ever-plotted-this-king-of-figure",
    "title": "exploration",
    "section": "Have you ever plotted this king of figure",
    "text": "Have you ever plotted this king of figure\n\nvec <- names(data[ , grepl( \"Have you ever\" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nvec\n\n[1]  22  70  81  86  91  98 103 108 113\n\n\n\ndo_vec <- function(vec, data){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., answer, score, `N.A`:`Yes`, factor_key=TRUE) %>% \n  mutate(answer = str_replace(answer, 'N.A', \"No\"))\n\nWarning in rbind(t1, t): number of columns of result is not a multiple of vector\nlength (arg 1)\n\ntab %>% \n  ggplot(., aes(x = plots, y = score, fill = answer)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic()"
  },
  {
    "objectID": "exploration.html#familiar-and-plotted",
    "href": "exploration.html#familiar-and-plotted",
    "title": "exploration",
    "section": "Familiar and plotted",
    "text": "Familiar and plotted\n\nvec <- names(data[ , grepl( \"Have you ever\" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_img\", \"parallel\", \"channel_img\")\n\ndo_vec <- function(vec, data, plot_names){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec[2:length(vec)], data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(plot_names)\n\n  # Now:\n  data %>% select(all_of(plot_names))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>% merge(., tab)  %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of familiarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2)"
  },
  {
    "objectID": "exploration.html#up-or-down",
    "href": "exploration.html#up-or-down",
    "title": "exploration",
    "section": "Up or down",
    "text": "Up or down\n\ntable(data[79]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n    ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"In ERP plot, should positive voltages be plotted upwards, or downwards?\")"
  },
  {
    "objectID": "exploration.html#error-bars",
    "href": "exploration.html#error-bars",
    "title": "exploration",
    "section": "Error bars",
    "text": "Error bars\n\ntable(data[74]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n    ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"In your paper, did you published ERP plot with error bars?\")\n\n\n\n\n\ndata[75] %>%  filter(!is.na(.)) %>% table()  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n    ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"In your figure, what did error bars depicted?\")\n\n\n\n\n\ndata[76] %>%  filter(!is.na(.)) %>% table()\n\nWhat did the er..  [Other]\n68% CI, which is close to SEM under normality \n                                            1 \n                    95% ci over channel means \n                                            1 \n          i'm not sure but i think it was sem \n                                            1 \n        median absolute deviaton or quantiles \n                                            1 \n                                           Sd \n                                            1"
  },
  {
    "objectID": "exploration.html#baseline",
    "href": "exploration.html#baseline",
    "title": "exploration",
    "section": "Baseline",
    "text": "Baseline\n\nperiods\n\ntable(abs(data[77])) %>% data.frame() %>%  dplyr::rename(baseline = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = baseline, y= Freq)) +\n    geom_bar(stat=\"identity\") + xlab(\"Recomended baseline in msec\") +  \n  scale_y_continuous(breaks=seq(0, 60, 5)) + theme_classic() +\n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = Freq, group = baseline), position = position_dodge(width = .9), vjust = -0.2)\n\n\n\n\n\n\njustification\n\n# If you don't want to provide a number on previous question, please, provide a justification\n# depends on what??\n# manual categorization of depending\nj <- data %>%    \n  dplyr::rename(q = !!names(.)[78]) %>% filter(!is.na(q)) %>% dplyr::select(q) %>% \n  mutate(q = tolower(q)) %>% mutate(q = gsub('depends in|depending on', 'depends on', q),\n         dependson = ifelse(grepl(\"depends|depend\", q), q, NA)) %>% \n  separate(dependson, into = c(\"a\",\"b\"), sep = \"depends on |depend on \") %>% \n  dplyr::select(-a) %>% \n  dplyr::rename(dependson = b) #%>% \nj %>% filter(is.na(dependson))  %>% select(-dependson)\n\n# A tibble: 17 × 1\n   q                                                                            \n   <chr>                                                                        \n 1 minimum 200ms for erps and theta or beta power                               \n 2 should match the duration of baseline-correction                             \n 3 as a rule of thumb, i would plot at least 1/3 of the duration (post-stimulus…\n 4 half of the illustrated task interval                                        \n 5 in general i would always try to plot the full baseline period used for base…\n 6 the same duration as the one used for baseline correction                    \n 7 at least 300, preferably more                                                \n 8 put down 100, but that's just what i typically use, might be diff for differ…\n 9 at least the baseline window used for the baseline correction?               \n10 in this case it has sense as the -100 : 0 ms is not flat                     \n11 1/3 to 1/2 of the post-stimulus time plotted                                 \n12 i would plot the same baseline period as the one used for baseline correction\n13 i would recommend to plot the baseline period corresponding to the baseline-…\n14 in general, i think it should be roughly the same length as the time window …\n15 assuming the baseline is -250 to 0 ms, i would like to see activity before t…\n16 the actual baseline length you have in the experiment                        \n17 ideally, the entire duration for the baseline correction should be depicted  \n\nj %>% filter(!is.na(dependson)) %>% select(dependson)\n\n# A tibble: 32 × 1\n   dependson                                                                    \n   <chr>                                                                        \n 1 \"the design of course\"                                                       \n 2 \"the topic\"                                                                  \n 3 \"the study. if you have interstimulus interval of 1 second and you expect to…\n 4 \"the experiment and research question\"                                       \n 5 \"the rest period between the measured evoked responses. e.g. it can be very …\n 6 \"the analysis\"                                                               \n 7 \"paradigm, 100-300 ms range preferable\"                                      \n 8 \"the task design\"                                                            \n 9 \"the type of response (eg for mrcps response is seen before actual movement …\n10 \"the task design, paradigm and signal of interest.\"                          \n# … with 22 more rows\n\n  #View()"
  },
  {
    "objectID": "exploration.html#colorbars",
    "href": "exploration.html#colorbars",
    "title": "exploration",
    "section": "Colorbars",
    "text": "Colorbars\n\ntable(data[117]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Are you aware of perceptual controvericies of colorbars?\")\n\n\n\n\n\ntable(data[118]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Do you know about two-dimensional colorbars?\")\n\n\n\n\n\ntable(data[119])  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(stat = \"identity\", width=0.5)  + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Would you like to use a two-dimensional colorbar\\nin your publications, if it was easily available?\")"
  },
  {
    "objectID": "exploration.html#feedback",
    "href": "exploration.html#feedback",
    "title": "exploration",
    "section": "Feedback",
    "text": "Feedback\n\nfeed <- data[120] %>% dplyr::rename(feed = !!names(.)[1]) %>%  filter(!is.na(feed), feed != \"-\") #%>% View()\nfeed  %>%\n  filter(!row_number() %in% c(3, 14, 17, 32, 37, 41))# just appreciation\n\n# A tibble: 48 × 1\n   feed                                                                         \n   <chr>                                                                        \n 1 \"Not only 2-d, but also CIRCULAR colorbars please\\r\\nThey are essential to v…\n 2 \"I think a great feature to have would be a selection of colors for comparis…\n 3 \"stop pushing this jet bullshit on me so hard\"                               \n 4 \"Make it very modular. It will be useless to experts or people trying someth…\n 5 \"This is more of a tangential comment, but one issue for me is lack of aware…\n 6 \"Easy creation of different types of error bars on ERP plots (shading)\"      \n 7 \"I use R for most analyses and visualization but matlab/eeglab/Erplab (for n…\n 8 \"Dynamic head montage videos\"                                                \n 9 \"I feel like Matlab is not very easy to implement in public and interactive …\n10 \"I think everything that relates to plotting ERPs + results of statistical t…\n# … with 38 more rows"
  },
  {
    "objectID": "exploration.html#time-in-minutes",
    "href": "exploration.html#time-in-minutes",
    "title": "exploration",
    "section": "Time in minutes",
    "text": "Time in minutes\n\nmedian(as.numeric(data$`Total time`)) / 60\n\n[1] 14.0435"
  },
  {
    "objectID": "plot_breakdown.html",
    "href": "plot_breakdown.html",
    "title": "3.plot_breakdown",
    "section": "",
    "text": "# upload to the git\nlibrary(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\nlibrary(kableExtra)\nlibrary(stringi)\n\n\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\nvec <- names(data[ , grepl( \"How would you \" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nvec\n\n[1]  69  80  85  90  97 102 107 112\n\n\n\nword_preproc <- function(data, N){\n  #N = 69\n  tmp <- data %>% filter(!is.na(.[[N]])) %>% select(., N) %>% dplyr::rename(words = !!names(.)[1]) %>% mutate(words = tolower(words)) %>% \n    #mutate(words = gsub(\" \\\\(or.*\", \"\", words)) %>% mutate(words = gsub(\", or.*\", \"\", words)) %>% \n    mutate(words = stri_replace_all_regex(words,\n                                  pattern=c(\" \\\\(.*\", \", or.*\", \" across\", \" with\", \" at\", \" by\", \" over\", \" of\", \" per\", \"at\", \" across\", \" accross\"),\n                                  replacement=c(''),\n                                  vectorize=FALSE))\n     \n  t <- foreach(i = 1:nrow(tmp)) %do% tokenize_words(tmp$words)\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"like\", \"s\")\n  t2 <- foreach(i = 1:length(t)) %do% t[[1]][[i]][!(t[[1]][[i]] %in% stop_list)]\n  #t21 <- foreach(i = 1:length(t2)) %do% map(t2[i][[1]], singularize)\n  t3 <- foreach(i = 1:length(t2)) %do% paste(sort(unlist(t2[i])), collapse = ' ') \n  t4 <- data.frame(matrix(t3)) %>% dplyr::rename(words = !!names(.)[1])\n  return(t4)\n}"
  },
  {
    "objectID": "plot_breakdown.html#plot-naming",
    "href": "plot_breakdown.html#plot-naming",
    "title": "3.plot_breakdown",
    "section": "Plot naming",
    "text": "Plot naming\nThose who named a plot somehow and those who failed to do that\n\nna_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|why'), \"NA\", as.character(words))) %>%\n      mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n      table(.) %>% \n      data.frame(.) %>% filter(words != \"NA\") %>% \n      summarise(n = sum(Freq))  \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- c(\"line plot\",\"butterfly\",\"topoplot\",\"topoarray\",\"topomap\",\"ERP image\",\"parallel\", \"channel image\")\n    return(temp)\n}\n\nnum_named <- na_table(data, vec)\nslice(num_named, 1)  %>% \n  gather(., plots, succeeded, `line plot`:`channel image`, factor_key=TRUE) %>% \n  mutate(failed = nrow(data) - succeeded) %>% \n  gather(., res, score, succeeded:failed, factor_key=TRUE) %>% \n\n  ggplot(., aes(x = plots, y = score, fill = res)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic() + theme(axis.title.x=element_blank(), plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = score, group = res), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Plot naming\")\n\n\n\n\n\nTop 10 plot names\n\n# does it work?????\nfreq_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n     # i = 112\n      \n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|know|why|remember'), \"NA\", as.character(words)),\n      words = ifelse(nchar(words)==0, NA, words),\n      words = ifelse(str_detect(words, 'erps|ep|erp plot|event related potential'), \"erp_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words)),\n      words = str_replace(words, 'responses', \"response\"),  \n      words =  gsub('channels|chanel', 'channel', words) ,\n      \n      words = ifelse(str_detect(words, '.*grand average.*'), \"grand_average_erp_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'classic'), \"classic_erp_plot\", as.character(words)),\n      words =  gsub('mean|averaged', 'average', words),\n      words =  gsub('course time', 'timecourse', words),\n      words =  gsub('.*timecourse.*', 'time_course_plot', words),\n      words =  gsub('.*erp waveform.*', 'erp_waveform', words),\n      words =  gsub('average condition.*', 'average_condition_erp', words),\n      words =  gsub('electrode', 'channel', words),\n      words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'spaghetti'), \"spaghetti_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'all channels'), \"all_channels_erp\", as.character(words)),\n      words = ifelse(str_detect(words, 'single channel erp|single erp|erp of single channels'), \"single_channel_erp\", as.character(words)),\n      words = ifelse(str_detect(words, '.*channel erp.*'), \"channel_erp\", as.character(words)),\n      words = ifelse(str_detect(words, 'amplitude'), \"amplitude\", as.character(words)),\n      words =  gsub('x |multi |muti |multeple ', 'multiple ', words),\n      words =  gsub('several|each|multeple', 'multiple', words),\n              words =  gsub('erpimage', 'erp image', words),\n      words =  gsub('heat map', 'heatmap', words),\n      words =  gsub('topomaps', 'topomap', words),\n      words =  gsub('topoplots', 'topoplot', words),\n      words =  gsub('epochs', 'epoch', words),\n      words =  gsub('trials', 'trial', words),\n      words =  gsub('topographical', 'topographic', words)\n      ) %>% \n      table(.) %>% \n      data.frame(.) %>%  mutate(n = lengths(gregexpr(\"\\\\W+\", words)) + 1) %>% \n        filter(n < 10) %>% dplyr::select(-n) %>% filter(words != \"\") %>% \n      arrange(desc(Freq))  %>%  head(10) %>% \n      unite(word_freq, c(\"words\", \"Freq\")) %>%  filter(!grepl(\"NA\", word_freq))\n      if (length(temp1) < 10){\n        na_frame <- as.data.frame(matrix(NA, nrow = 10, ncol = 1))\n        names(na_frame) <- names(temp1)\n        temp1 <- rbind(temp1, na_frame)  %>%  head(10)\n      }\n      \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- c(\"line plot\",\"butterfly plot\",\"topoplot\",\"topoplot array\",\"topographic map\",\"ERP image\",\"parallel plot\",\"channel image\")\n    return(temp)\n}\n\ntop10 <- freq_table(data, vec)\ntop10 %>% \n  kbl() \n\n\n\n \n  \n    line plot \n    butterfly plot \n    topoplot \n    topoplot array \n    topographic map \n    ERP image \n    parallel plot \n    channel image \n  \n \n\n  \n    erp_19 \n    butterfly plot_45 \n    topoplot_38 \n    topoplot_6 \n    multiplot_10 \n    erp image_13 \n    amplitude channel peak_1 \n    erp image_3 \n  \n  \n    erp plot_18 \n    butterfly_9 \n    topography_14 \n    series topoplot_4 \n    distribution erp scalp_3 \n    erpimage_7 \n    amplitude electrode erp selective_1 \n    hemap_2 \n  \n  \n    average erp grand_4 \n    all channels erp_2 \n    scalp topography_10 \n    time topoplot_4 \n    erp topo_3 \n    erp single sorted trial_2 \n    amplitude electrode plot_1 \n    2d channel image plot time_1 \n  \n  \n    average erp plot_3 \n    butterfly erp plot_2 \n    topomap_8 \n    time topo_3 \n    channel multi plot_2 \n    frequency plot time_2 \n    amplitudes and channels conditions eeg for selected single trial_1 \n    all averages channels in plot same_1 \n  \n  \n    erp waveform_3 \n    channel erp multi plot_2 \n    plot topographic_7 \n    time topography_3 \n    channel plot_2 \n    plot raster_2 \n    NA \n    all channel channels or plot time_1 \n  \n  \n    average grand_2 \n    mess_2 \n    map scalp_5 \n    time topoplots_3 \n    erp_2 \n    plot werfall_2 \n    NA \n    all channel erp plot_1 \n  \n  \n    erp series time_2 \n    all amplitude for in post pre stimulus time voltage_1 \n    map topographic_5 \n    course time topography_2 \n    erp map scalp_2 \n    across erp plot trials_1 \n    NA \n    all channels response_1 \n  \n  \n    erp wave_2 \n    all average electrodes erps grand_1 \n    topo_4 \n    dynamic topographies_2 \n    erp multiplot_2 \n    activity change trials_1 \n    NA \n    amplitude as average channel eeg function single time_1 \n  \n  \n    erps_2 \n    all change channels dynamics on recoded time_1 \n    map topographical_3 \n    erp topoplot_2 \n    erp topography_2 \n    aligned response trials_1 \n    NA \n    amplitude channel erp spectral_1 \n  \n  \n    NA \n    NA \n    plot topo_3 \n    map scalp_2 \n    NA \n    NA \n    NA \n    NA \n  \n\n\n\n\n# cut after prepositions\n# remove those with 1 voice\n#is sorting is really needed? \n\n\n\nFor each case separately\n\n\n\n1\n\n# or - slipt and take first one\nword_preproc(data, 69)  %>%\n  mutate(words = ifelse(str_detect(words, 'sure|confus|aware|do not'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, '.*grand average.*'), \"grand_average_erp_plot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'average erp|averaged erp'), \"average_erp_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'erps|ep|erp plot|event related potential'), \"erp_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'classic'), \"classic_erp_plot\", as.character(words))) %>%\n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('mean|averaged', 'average', words)) %>% \n  mutate(words =  gsub('.*time course.*', 'time_course_plot', words)) %>% \n  mutate(words =  gsub('.*erp waveform.*', 'erp_waveform', words)) %>%\n  mutate(words =  gsub('average condition.*', 'average_condition_erp', words)) %>%\n   \n  table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) #%>%   View()\n\n                                                                                            words\n1                                                                                        erp_plot\n2                                                                                             erp\n3                                                                                average_erp_plot\n4                                                                           average_condition_erp\n5                                                                                    erp_waveform\n6                                                                                   average grand\n7                                                                                 erp series time\n8                                                                                        erp wave\n9                                                                                       line plot\n10                                                                                           p300\n11                                                                                    plot single\n12                                                                                   2 conditions\n13                                                                2 conditions course erp in time\n14                                                           2 conditions electrode erp for for x\n15                                                                               2 conditions erp\n16                                                  activity bars error evoked plot shaded single\n17                                                                            amplitude erp graph\n18                                                                    amplitude plot plot voltage\n19                                                                               amplitude signal\n20                                                              analysis erp locked time waveform\n21                                                                           analysis series time\n22                                                                and average b conditions da erp\n23                                                              and cars faces neural response to\n24                and compared conditioned erp in in post potential pre stimulus time two voltage\n25 anything but called don't erp ever have i i i in it know particular plot shows think this type\n26                                                                                  area errorbar\n27                                                                                        average\n28                                                                    average channel erp for one\n29                                                                  average da sensor series time\n30                                                average different grand series time trial types\n31                                                                                average erf erp\n32                                                                     average errors median plot\n33                                                            average event grand potential reled\n34                                                     average evoked grand one response specific\n35                                                                        average grand waveforms\n36                                                                                  average group\n37                                                                        average line plot trial\n38                                                                               average waveform\n39                                                                           averages event reled\n40                                                                              bar erroro shaded\n41                                                                bars conditional erp error plot\n42                                                                     bars error plot timeseries\n43                                                                               boundedline plot\n44                                                                         by erp point point sem\n45                                                                         channel contrast singe\n46                                                                 channel domain erp single time\n47                                                                       channel erp single trace\n48                                                                            channel plot single\n49                                                                                         ci erp\n50                                                           comparing conditions evoked plot two\n51                                                                                  comparing erp\n52                                                         comparison condition erp error shading\n53                                                                                 comparison erp\n54                                                                        condition graph voltage\n55                                                              conditions erp for timecourse two\n56                                                                    conditions evoked potential\n57                                                                   confidence erp intervalslaid\n58                                                                                course erp time\n59                                                                    course evoked response time\n60                                                                      dynamics electrode time x\n61                                                                         electrode erp interest\n62                                                                   elicited erp faces houses vs\n63                                                                          erp error lines trace\n64                                                                         erp error plot sd type\n65                                                                            erp error plots sme\n66                                                                              erp grand average\n67                                                                     erp graph or plot waveform\n68                                                                        erp individual variance\n69                                                                     erp intervals sem waveform\n70                                                                    erp locked or response stim\n71                                                                                 erp peaks wave\n72                                                                               erp time voltage\n73                                                                                 erp timeseries\n74                                                                                erp visualizion\n75                                                                                  error average\n76                                                                          event potential reled\n77                                                                         event potentials reled\n78                                                                               evoked potential\n79                                                                   evoked potential series time\n80                                                                                evoked response\n81                                                                    evoked response series time\n82                                                                              response temporal\n83                                                                                    series time\n84                                                                                         single\n   Freq\n1    38\n2    19\n3    17\n4     4\n5     4\n6     2\n7     2\n8     2\n9     2\n10    2\n11    2\n12    1\n13    1\n14    1\n15    1\n16    1\n17    1\n18    1\n19    1\n20    1\n21    1\n22    1\n23    1\n24    1\n25    1\n26    1\n27    1\n28    1\n29    1\n30    1\n31    1\n32    1\n33    1\n34    1\n35    1\n36    1\n37    1\n38    1\n39    1\n40    1\n41    1\n42    1\n43    1\n44    1\n45    1\n46    1\n47    1\n48    1\n49    1\n50    1\n51    1\n52    1\n53    1\n54    1\n55    1\n56    1\n57    1\n58    1\n59    1\n60    1\n61    1\n62    1\n63    1\n64    1\n65    1\n66    1\n67    1\n68    1\n69    1\n70    1\n71    1\n72    1\n73    1\n74    1\n75    1\n76    1\n77    1\n78    1\n79    1\n80    1\n81    1\n82    1\n83    1\n84    1\n\n\n\n\n2\n\nword_preproc(data, 80)  %>% \n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'spaghetti'), \"spaghetti_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'sure|confus|aware|do not'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'all channels'), \"all_channels_erp\", as.character(words))) %>%\n   mutate(words = ifelse(str_detect(words, 'multiple channel erp|multi channel erp'), \"multiple_channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'single channel erp|single erp|erp of single channels'), \"single_channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, '.*channel erp.*'), \"channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'amplitude'), \"amplitude\", as.character(words))) %>%\n  mutate(words =  gsub('several|each|x |multi |muti |multeple ', 'multiple', words)) %>% \n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('.*time course.*', 'time_course_plot', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                                                                               words\n1                                                                     butterfly_plot\n2                                                                        channel_erp\n3                                                                    all_channel_erp\n4                                                                          amplitude\n5                                                               channel erp multiple\n6                                                                               mess\n7                                                                     spaghetti_plot\n8                                                                   time_course_plot\n9  again but channel do erp for have i i it it multiple name not shows th understand\n10                                                     all average channel erp grand\n   Freq\n1    66\n2    13\n3     5\n4     3\n5     3\n6     2\n7     2\n8     2\n9     1\n10    1\n\n\n\n\n3\n\nword_preproc(data, 85) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|unclear'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n               words Freq\n1           topoplot   39\n2         topography   14\n3   scalp topography   10\n4            topomap    8\n5   plot topographic    7\n6          map scalp    5\n7    map topographic    5\n8               topo    4\n9  map topographical    3\n10         plot topo    3\n\n\n\n\n4\n\nword_preproc(data, 90) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|unclear'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                    words Freq\n1           time topoplot    7\n2                topoplot    7\n3         series topoplot    5\n4    series time topoplot    4\n5               time topo    3\n6         time topography    3\n7                 topomap    3\n8  course time topography    2\n9    dynamic topographies    2\n10           erp topoplot    2\n\n\n\n\n5\n\nword_preproc(data, 97)  %>% \n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly'), \"NA\", as.character(words))) %>%\n  \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                    words Freq\n1               multiplot   10\n2            channel plot    4\n3                erp topo    4\n4             channel erp    3\n5  distribution erp scalp    3\n6          erp topography    3\n7      channel erp layout    2\n8    channel multiple erp    2\n9   channel multiple plot    2\n10                    erp    2\n\n\n\n\n6\n\nword_preproc(data, 102)  %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ersp', 'erp', words)) %>% \n  mutate(words =  gsub('erpimage', 'erp image', words)) %>% \n  mutate(words =  gsub('heat map', 'heatmap', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words =  gsub('epochs', 'epoch', words)) %>% \n  mutate(words =  gsub('trials', 'trial', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good'), \"NA\", as.character(words))) %>%\n  \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                     words Freq\n1                erp image   20\n2  erp single sorted trial    3\n3              epoch image    2\n4          erp hemap trial    2\n5                erp trial    2\n6      frequency plot time    2\n7              plot raster    2\n8             plot werfall    2\n9    across erp plot trial    1\n10   activity change trial    1\n\n\n\n\n7\n\nword_preproc(data, 105)  %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ersp', 'erp', words)) %>% \n  mutate(words =  gsub('erpimage', 'erp image', words)) %>% \n  mutate(words =  gsub('heat map', 'heatmap', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words =  gsub('epochs', 'epoch', words)) %>% \n  mutate(words =  gsub('trials', 'trial', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good'), \"NA\", as.character(words))) %>%\n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                                                           words Freq\n1                                                           none   10\n2                                                              n    2\n3                                                        sorting    2\n4                  according arbitrary criteria sorting to trial    1\n5                       adding additional sorting time variables    1\n6                                                   all easy was    1\n7                and between correspondance reaction times trial    1\n8  any but chance different epoch have have i lenght to to would    1\n9                                        between smoothing trial    1\n10                                             color map setting    1\n\n\n\n\n8\n\nword_preproc(data, 112)  %>%\n\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good|remember|idea|nan'), \"NA\", as.character(words))) %>%\n  \n # filter(words != \"NA\") %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq)) #%>% View()\n\n                                                                          words\n1                                                                            NA\n2                                                                     erp image\n3                                                                         hemap\n4                                                    2d channel image plot time\n5                                            all averages channels in plot same\n6                                             all channel channels or plot time\n7                                                          all channel erp plot\n8  all channels coded color for in post pre stimulus time value voltage voltage\n9                                                         all channels response\n10                        amplitude as average channel eeg function single time\n11                                               amplitude channel erp spectral\n12                                                amplitude channels color plot\n13                                                     amplitude electrode plot\n14                                               amplitude electrodes erp hemap\n15                                       as eeg electrode function plot voltage\n16                                             average carpet channels erp plot\n17                                            average channel channel erp grand\n18                                                  average channel hemap multi\n19                                               by chanel channel time voltage\n20                                      changes each electrode for site voltage\n21                                                                    chanimage\n22                                                           channel cross plot\n23                                         channel each erp for in time voltage\n24                                                            channel erp hemap\n25                                                            channel erp image\n26                                                                 channel erps\n27                                              channel evoked responses sorted\n28                                                           channel hemap time\n29                                                                channel image\n30                                                         channel plot stacked\n31                                                               channel raster\n32                                            channel represention time voltage\n33                                                                 channel time\n34                                                        channels colormap erp\n35                                                    channels courses erp time\n36                                                         channels eeg voltage\n37                         channels electrodes ersp individual multiple plotted\n38                                                            channels erpimage\n39                                                                channels erps\n40                                                     channels he plot voltage\n41                                                  channels image time voltage\n42                                                 channels variability voltage\n43                                                    channels variions voltage\n44                                                             channelwise plot\n45                                                                        clear\n46                                                              coded color erp\n47                                                                  custer plot\n48                                                  density plot power spectral\n49                                                         electrode image time\n50                                                electrode plot single stacked\n51                                                 electrodes erp hemap lencies\n52                                                                   erp he map\n53                                                                    erp hemap\n54                                                              erp plot raster\n55                                                               erp scalp wide\n56                                                                     erpimage\n57                                                                 evoked image\n58                                                           field global power\n59                                                    for hemap sensors voltage\n60                                            frequency looks plot plot th time\n61                                                       frequency plot voltage\n62                                                                 hemap sensor\n63                                                                   image plot\n64                                                            image plot trials\n65                                                                image voltage\n66                                         imagesc multichannel plot timeseries\n67                                                                       normal\n68                                                                  plot raster\n69                                                         plot topographicview\n70                                                                   rasterplot\n71                                                                         sort\n72                                                                     wehermap\n   Freq\n1    30\n2     3\n3     2\n4     1\n5     1\n6     1\n7     1\n8     1\n9     1\n10    1\n11    1\n12    1\n13    1\n14    1\n15    1\n16    1\n17    1\n18    1\n19    1\n20    1\n21    1\n22    1\n23    1\n24    1\n25    1\n26    1\n27    1\n28    1\n29    1\n30    1\n31    1\n32    1\n33    1\n34    1\n35    1\n36    1\n37    1\n38    1\n39    1\n40    1\n41    1\n42    1\n43    1\n44    1\n45    1\n46    1\n47    1\n48    1\n49    1\n50    1\n51    1\n52    1\n53    1\n54    1\n55    1\n56    1\n57    1\n58    1\n59    1\n60    1\n61    1\n62    1\n63    1\n64    1\n65    1\n66    1\n67    1\n68    1\n69    1\n70    1\n71    1\n72    1"
  },
  {
    "objectID": "plot_breakdown.html#top-10-plot-names",
    "href": "plot_breakdown.html#top-10-plot-names",
    "title": "3.plot_breakdown",
    "section": "Top 10 plot names",
    "text": "Top 10 plot names\n\n# does it work?????\nfreq_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n     # i = 112\n      \n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|know|why|remember'), \"NA\", as.character(words)),\n      words = ifelse(nchar(words)==0, NA, words),\n      words = ifelse(str_detect(words, 'erps|ep|erp plot|event related potential'), \"erp_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words)),\n      words = str_replace(words, 'responses', \"response\"),  \n      words =  gsub('channels|chanel', 'channel', words) ,\n      \n      words = ifelse(str_detect(words, '.*grand average.*'), \"grand_average_erp_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'classic'), \"classic_erp_plot\", as.character(words)),\n      words =  gsub('mean|averaged', 'average', words),\n      words =  gsub('course time', 'timecourse', words),\n      words =  gsub('.*timecourse.*', 'time_course_plot', words),\n      words =  gsub('.*erp waveform.*', 'erp_waveform', words),\n      words =  gsub('average condition.*', 'average_condition_erp', words),\n      words =  gsub('electrode', 'channel', words),\n      words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'spaghetti'), \"spaghetti_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'all channels'), \"all_channels_erp\", as.character(words)),\n      words = ifelse(str_detect(words, 'single channel erp|single erp|erp of single channels'), \"single_channel_erp\", as.character(words)),\n      words = ifelse(str_detect(words, '.*channel erp.*'), \"channel_erp\", as.character(words)),\n      words = ifelse(str_detect(words, 'amplitude'), \"amplitude\", as.character(words)),\n      words =  gsub('x |multi |muti |multeple ', 'multiple ', words),\n      words =  gsub('several|each|multeple', 'multiple', words),\n              words =  gsub('erpimage', 'erp image', words),\n      words =  gsub('heat map', 'heatmap', words),\n      words =  gsub('topomaps', 'topomap', words),\n      words =  gsub('topoplots', 'topoplot', words),\n      words =  gsub('epochs', 'epoch', words),\n      words =  gsub('trials', 'trial', words),\n      words =  gsub('topographical', 'topographic', words)\n      ) %>% \n      table(.) %>% \n      data.frame(.) %>%  mutate(n = lengths(gregexpr(\"\\\\W+\", words)) + 1) %>% \n        filter(n < 10) %>% dplyr::select(-n) %>% filter(words != \"\") %>% \n      arrange(desc(Freq))  %>%  head(10) %>% \n      unite(word_freq, c(\"words\", \"Freq\")) %>%  filter(!grepl(\"NA\", word_freq))\n      if (length(temp1) < 10){\n        na_frame <- as.data.frame(matrix(NA, nrow = 10, ncol = 1))\n        names(na_frame) <- names(temp1)\n        temp1 <- rbind(temp1, na_frame)  %>%  head(10)\n      }\n      \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- c(\"line plot\",\"butterfly plot\",\"topoplot\",\"topoplot array\",\"topographic map\",\"ERP image\",\"parallel plot\",\"channel image\")\n    return(temp)\n}\n\ntop10 <- freq_table(data, vec)\ntop10 %>% \n  kbl() \n\n\n\n \n  \n    line plot \n    butterfly plot \n    topoplot \n    topoplot array \n    topographic map \n    ERP image \n    parallel plot \n    channel image \n  \n \n\n  \n    erp_19 \n    butterfly plot_45 \n    topoplot_38 \n    topoplot_6 \n    multiplot_10 \n    erp image_13 \n    amplitude channel peak_1 \n    erp image_3 \n  \n  \n    erp plot_18 \n    butterfly_9 \n    topography_14 \n    series topoplot_4 \n    distribution erp scalp_3 \n    erpimage_7 \n    amplitude electrode erp selective_1 \n    hemap_2 \n  \n  \n    average erp grand_4 \n    all channels erp_2 \n    scalp topography_10 \n    time topoplot_4 \n    erp topo_3 \n    erp single sorted trial_2 \n    amplitude electrode plot_1 \n    2d channel image plot time_1 \n  \n  \n    average erp plot_3 \n    butterfly erp plot_2 \n    topomap_8 \n    time topo_3 \n    channel multi plot_2 \n    frequency plot time_2 \n    amplitudes and channels conditions eeg for selected single trial_1 \n    all averages channels in plot same_1 \n  \n  \n    erp waveform_3 \n    channel erp multi plot_2 \n    plot topographic_7 \n    time topography_3 \n    channel plot_2 \n    plot raster_2 \n    NA \n    all channel channels or plot time_1 \n  \n  \n    average grand_2 \n    mess_2 \n    map scalp_5 \n    time topoplots_3 \n    erp_2 \n    plot werfall_2 \n    NA \n    all channel erp plot_1 \n  \n  \n    erp series time_2 \n    all amplitude for in post pre stimulus time voltage_1 \n    map topographic_5 \n    course time topography_2 \n    erp map scalp_2 \n    across erp plot trials_1 \n    NA \n    all channels response_1 \n  \n  \n    erp wave_2 \n    all average electrodes erps grand_1 \n    topo_4 \n    dynamic topographies_2 \n    erp multiplot_2 \n    activity change trials_1 \n    NA \n    amplitude as average channel eeg function single time_1 \n  \n  \n    erps_2 \n    all change channels dynamics on recoded time_1 \n    map topographical_3 \n    erp topoplot_2 \n    erp topography_2 \n    aligned response trials_1 \n    NA \n    amplitude channel erp spectral_1 \n  \n  \n    NA \n    NA \n    plot topo_3 \n    map scalp_2 \n    NA \n    NA \n    NA \n    NA \n  \n\n\n\n\n# cut after prepositions\n# remove those with 1 voice\n#is sorting is really needed? \n\n\n\nFor each case separately\n\n\n1\n\n# or - slipt and take first one\nword_preproc(data, 69)  %>%\n  mutate(words = ifelse(str_detect(words, 'sure|confus|aware|do not'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, '.*grand average.*'), \"grand_average_erp_plot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'average erp|averaged erp'), \"average_erp_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'erps|ep|erp plot|event related potential'), \"erp_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'classic'), \"classic_erp_plot\", as.character(words))) %>%\n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('mean|averaged', 'average', words)) %>% \n  mutate(words =  gsub('.*time course.*', 'time_course_plot', words)) %>% \n  mutate(words =  gsub('.*erp waveform.*', 'erp_waveform', words)) %>%\n  mutate(words =  gsub('average condition.*', 'average_condition_erp', words)) %>%\n   \n  table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) #%>%   View()\n\n                                                                                            words\n1                                                                                        erp_plot\n2                                                                                             erp\n3                                                                                average_erp_plot\n4                                                                           average_condition_erp\n5                                                                                    erp_waveform\n6                                                                                   average grand\n7                                                                                 erp series time\n8                                                                                        erp wave\n9                                                                                       line plot\n10                                                                                           p300\n11                                                                                    plot single\n12                                                                                   2 conditions\n13                                                                2 conditions course erp in time\n14                                                           2 conditions electrode erp for for x\n15                                                                               2 conditions erp\n16                                                  activity bars error evoked plot shaded single\n17                                                                            amplitude erp graph\n18                                                                    amplitude plot plot voltage\n19                                                                               amplitude signal\n20                                                              analysis erp locked time waveform\n21                                                                           analysis series time\n22                                                                and average b conditions da erp\n23                                                              and cars faces neural response to\n24                and compared conditioned erp in in post potential pre stimulus time two voltage\n25 anything but called don't erp ever have i i i in it know particular plot shows think this type\n26                                                                                  area errorbar\n27                                                                                        average\n28                                                                    average channel erp for one\n29                                                                  average da sensor series time\n30                                                average different grand series time trial types\n31                                                                                average erf erp\n32                                                                     average errors median plot\n33                                                            average event grand potential reled\n34                                                     average evoked grand one response specific\n35                                                                        average grand waveforms\n36                                                                                  average group\n37                                                                        average line plot trial\n38                                                                               average waveform\n39                                                                           averages event reled\n40                                                                              bar erroro shaded\n41                                                                bars conditional erp error plot\n42                                                                     bars error plot timeseries\n43                                                                               boundedline plot\n44                                                                         by erp point point sem\n45                                                                         channel contrast singe\n46                                                                 channel domain erp single time\n47                                                                       channel erp single trace\n48                                                                            channel plot single\n49                                                                                         ci erp\n50                                                           comparing conditions evoked plot two\n51                                                                                  comparing erp\n52                                                         comparison condition erp error shading\n53                                                                                 comparison erp\n54                                                                        condition graph voltage\n55                                                              conditions erp for timecourse two\n56                                                                    conditions evoked potential\n57                                                                   confidence erp intervalslaid\n58                                                                                course erp time\n59                                                                    course evoked response time\n60                                                                      dynamics electrode time x\n61                                                                         electrode erp interest\n62                                                                   elicited erp faces houses vs\n63                                                                          erp error lines trace\n64                                                                         erp error plot sd type\n65                                                                            erp error plots sme\n66                                                                              erp grand average\n67                                                                     erp graph or plot waveform\n68                                                                        erp individual variance\n69                                                                     erp intervals sem waveform\n70                                                                    erp locked or response stim\n71                                                                                 erp peaks wave\n72                                                                               erp time voltage\n73                                                                                 erp timeseries\n74                                                                                erp visualizion\n75                                                                                  error average\n76                                                                          event potential reled\n77                                                                         event potentials reled\n78                                                                               evoked potential\n79                                                                   evoked potential series time\n80                                                                                evoked response\n81                                                                    evoked response series time\n82                                                                              response temporal\n83                                                                                    series time\n84                                                                                         single\n   Freq\n1    38\n2    19\n3    17\n4     4\n5     4\n6     2\n7     2\n8     2\n9     2\n10    2\n11    2\n12    1\n13    1\n14    1\n15    1\n16    1\n17    1\n18    1\n19    1\n20    1\n21    1\n22    1\n23    1\n24    1\n25    1\n26    1\n27    1\n28    1\n29    1\n30    1\n31    1\n32    1\n33    1\n34    1\n35    1\n36    1\n37    1\n38    1\n39    1\n40    1\n41    1\n42    1\n43    1\n44    1\n45    1\n46    1\n47    1\n48    1\n49    1\n50    1\n51    1\n52    1\n53    1\n54    1\n55    1\n56    1\n57    1\n58    1\n59    1\n60    1\n61    1\n62    1\n63    1\n64    1\n65    1\n66    1\n67    1\n68    1\n69    1\n70    1\n71    1\n72    1\n73    1\n74    1\n75    1\n76    1\n77    1\n78    1\n79    1\n80    1\n81    1\n82    1\n83    1\n84    1\n\n\n\n\n2\n\nword_preproc(data, 80)  %>% \n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'spaghetti'), \"spaghetti_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'sure|confus|aware|do not'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'all channels'), \"all_channels_erp\", as.character(words))) %>%\n   mutate(words = ifelse(str_detect(words, 'multiple channel erp|multi channel erp'), \"multiple_channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'single channel erp|single erp|erp of single channels'), \"single_channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, '.*channel erp.*'), \"channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'amplitude'), \"amplitude\", as.character(words))) %>%\n  mutate(words =  gsub('several|each|x |multi |muti |multeple ', 'multiple', words)) %>% \n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('.*time course.*', 'time_course_plot', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                                                                               words\n1                                                                     butterfly_plot\n2                                                                        channel_erp\n3                                                                    all_channel_erp\n4                                                                          amplitude\n5                                                               channel erp multiple\n6                                                                               mess\n7                                                                     spaghetti_plot\n8                                                                   time_course_plot\n9  again but channel do erp for have i i it it multiple name not shows th understand\n10                                                     all average channel erp grand\n   Freq\n1    66\n2    13\n3     5\n4     3\n5     3\n6     2\n7     2\n8     2\n9     1\n10    1\n\n\n\n\n3\n\nword_preproc(data, 85) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|unclear'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n               words Freq\n1           topoplot   39\n2         topography   14\n3   scalp topography   10\n4            topomap    8\n5   plot topographic    7\n6          map scalp    5\n7    map topographic    5\n8               topo    4\n9  map topographical    3\n10         plot topo    3\n\n\n\n\n4\n\nword_preproc(data, 90) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|unclear'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                    words Freq\n1           time topoplot    7\n2                topoplot    7\n3         series topoplot    5\n4    series time topoplot    4\n5               time topo    3\n6         time topography    3\n7                 topomap    3\n8  course time topography    2\n9    dynamic topographies    2\n10           erp topoplot    2\n\n\n\n\n5\n\nword_preproc(data, 97)  %>% \n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly'), \"NA\", as.character(words))) %>%\n  \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                    words Freq\n1               multiplot   10\n2            channel plot    4\n3                erp topo    4\n4             channel erp    3\n5  distribution erp scalp    3\n6          erp topography    3\n7      channel erp layout    2\n8    channel multiple erp    2\n9   channel multiple plot    2\n10                    erp    2\n\n\n\n\n6\n\nword_preproc(data, 102)  %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ersp', 'erp', words)) %>% \n  mutate(words =  gsub('erpimage', 'erp image', words)) %>% \n  mutate(words =  gsub('heat map', 'heatmap', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words =  gsub('epochs', 'epoch', words)) %>% \n  mutate(words =  gsub('trials', 'trial', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good'), \"NA\", as.character(words))) %>%\n  \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                     words Freq\n1                erp image   20\n2  erp single sorted trial    3\n3              epoch image    2\n4          erp hemap trial    2\n5                erp trial    2\n6      frequency plot time    2\n7              plot raster    2\n8             plot werfall    2\n9    across erp plot trial    1\n10   activity change trial    1\n\n\n\n\n7\n\nword_preproc(data, 105)  %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ersp', 'erp', words)) %>% \n  mutate(words =  gsub('erpimage', 'erp image', words)) %>% \n  mutate(words =  gsub('heat map', 'heatmap', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words =  gsub('epochs', 'epoch', words)) %>% \n  mutate(words =  gsub('trials', 'trial', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good'), \"NA\", as.character(words))) %>%\n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                                                           words Freq\n1                                                           none   10\n2                                                              n    2\n3                                                        sorting    2\n4                  according arbitrary criteria sorting to trial    1\n5                       adding additional sorting time variables    1\n6                                                   all easy was    1\n7                and between correspondance reaction times trial    1\n8  any but chance different epoch have have i lenght to to would    1\n9                                        between smoothing trial    1\n10                                             color map setting    1\n\n\n\n\n8\n\nword_preproc(data, 112)  %>%\n\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good|remember|idea|nan'), \"NA\", as.character(words))) %>%\n  \n # filter(words != \"NA\") %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq)) #%>% View()\n\n                                                                          words\n1                                                                            NA\n2                                                                     erp image\n3                                                                         hemap\n4                                                    2d channel image plot time\n5                                            all averages channels in plot same\n6                                             all channel channels or plot time\n7                                                          all channel erp plot\n8  all channels coded color for in post pre stimulus time value voltage voltage\n9                                                         all channels response\n10                        amplitude as average channel eeg function single time\n11                                               amplitude channel erp spectral\n12                                                amplitude channels color plot\n13                                                     amplitude electrode plot\n14                                               amplitude electrodes erp hemap\n15                                       as eeg electrode function plot voltage\n16                                             average carpet channels erp plot\n17                                            average channel channel erp grand\n18                                                  average channel hemap multi\n19                                               by chanel channel time voltage\n20                                      changes each electrode for site voltage\n21                                                                    chanimage\n22                                                           channel cross plot\n23                                         channel each erp for in time voltage\n24                                                            channel erp hemap\n25                                                            channel erp image\n26                                                                 channel erps\n27                                              channel evoked responses sorted\n28                                                           channel hemap time\n29                                                                channel image\n30                                                         channel plot stacked\n31                                                               channel raster\n32                                            channel represention time voltage\n33                                                                 channel time\n34                                                        channels colormap erp\n35                                                    channels courses erp time\n36                                                         channels eeg voltage\n37                         channels electrodes ersp individual multiple plotted\n38                                                            channels erpimage\n39                                                                channels erps\n40                                                     channels he plot voltage\n41                                                  channels image time voltage\n42                                                 channels variability voltage\n43                                                    channels variions voltage\n44                                                             channelwise plot\n45                                                                        clear\n46                                                              coded color erp\n47                                                                  custer plot\n48                                                  density plot power spectral\n49                                                         electrode image time\n50                                                electrode plot single stacked\n51                                                 electrodes erp hemap lencies\n52                                                                   erp he map\n53                                                                    erp hemap\n54                                                              erp plot raster\n55                                                               erp scalp wide\n56                                                                     erpimage\n57                                                                 evoked image\n58                                                           field global power\n59                                                    for hemap sensors voltage\n60                                            frequency looks plot plot th time\n61                                                       frequency plot voltage\n62                                                                 hemap sensor\n63                                                                   image plot\n64                                                            image plot trials\n65                                                                image voltage\n66                                         imagesc multichannel plot timeseries\n67                                                                       normal\n68                                                                  plot raster\n69                                                         plot topographicview\n70                                                                   rasterplot\n71                                                                         sort\n72                                                                     wehermap\n   Freq\n1    30\n2     3\n3     2\n4     1\n5     1\n6     1\n7     1\n8     1\n9     1\n10    1\n11    1\n12    1\n13    1\n14    1\n15    1\n16    1\n17    1\n18    1\n19    1\n20    1\n21    1\n22    1\n23    1\n24    1\n25    1\n26    1\n27    1\n28    1\n29    1\n30    1\n31    1\n32    1\n33    1\n34    1\n35    1\n36    1\n37    1\n38    1\n39    1\n40    1\n41    1\n42    1\n43    1\n44    1\n45    1\n46    1\n47    1\n48    1\n49    1\n50    1\n51    1\n52    1\n53    1\n54    1\n55    1\n56    1\n57    1\n58    1\n59    1\n60    1\n61    1\n62    1\n63    1\n64    1\n65    1\n66    1\n67    1\n68    1\n69    1\n70    1\n71    1\n72    1"
  },
  {
    "objectID": "plot_breakdown.html#frequency-of-tool-usage",
    "href": "plot_breakdown.html#frequency-of-tool-usage",
    "title": "3.plot_breakdown",
    "section": "Frequency of tool usage",
    "text": "Frequency of tool usage\n\nvec <- names(data[ , grepl( \".*Which plotting\" , names(data))]) %>% str_split_i(., \"\\\\]\", 2) %>% \n  str_split_i(., \"\\\\...\", 2) %>% as.numeric()\nvec\n\n[1]  71  82  87  92  99 104 109 114\n\n\n\nword_preproc_tool <- function(data, N, lim){\n  N = 71\n  #lim = 10\n  tmp <- data %>% dplyr::select(N) %>% filter(!is.na(.)) %>% dplyr::rename(words = !!names(.)[1]) %>% \n    mutate(words = ifelse(str_detect(words, 'own|costum'), \"custom\", as.character(words))) %>% \n  mutate(n = lengths(gregexpr(\"\\\\W+\", words)) + 1) %>% arrange(desc(n))\n  rest <- tmp %>% filter(n >= lim) %>% dplyr::select(words)\n  tmp <- tmp %>% filter(n < lim) %>% dplyr::select(words)\n  \n  t <- foreach(i = 1:nrow(tmp)) %do% strsplit(tmp[[1]][i], \",|/|\\\\|+| and |&| or |\\\\n|\\\\r|;\")\n  tul <- foreach(i = 1:nrow(tmp)) %do% unlist(t[[i]])\n  tul1 <- unlist(tul)\n  tul2 <- tul1[tul1!=\"\"]\n  tul2[tul2==\"-\"] <- NA\n  tul2 <- na.omit(tul2)\n  \n  #t <- foreach(i = 1:nrow(tmp)) %do% tokenize_words(as.character(tmp[i, N]), strip_punct = FALSE)\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"by\", \"over\", \"of\", \"per\", \"for\", \"like\", \"s\", \"at\", \"code\", \"script\", \"recently\", \"my\", \"in\", \"written\", \"using\", \"built\", \"function\", \"plot\", \"with\",  \"itself\", \"scripting\", \"scrip\", \"scripts\", \"basic\")#, \"custom\")\n  t1 <- foreach(i = 1:length(tul2)) %do% tokenize_words(as.character(tul2[i]))\n  \n  \n  t2 <- foreach(i = 1:length(t1)) %do% map(t1[i][[1]], singularize)\n  t21 <- foreach(i = 1:length(t2)) %do% tokenize_words(as.character(t2[i][[1]]))\n  t22 <- foreach(i = 1:length(t21)) %do% t21[i][[1]][[1]][!(t21[i][[1]][[1]] %in% stop_list)]\n  t3 <- foreach(i = 1:length(t22)) %do% paste((unlist(t22[i])), collapse = ' ') \n  t4 <- data.frame(matrix(t3)) #%>% dplyr::rename(words = !!names(.)[1])\n  return(c(t4, rest))\n}\n\n\n1\n\ntest <- word_preproc_tool(data, 71, 10) \nrest <- test[[2]]\nfromrest <- data.frame(words = c(\"fieldtrip\",\"r\", \"matlab\", \"fieldtrip\", \"adobe illustrator\", \"custom matlab\", \"custom matlab\", \"mne\" ))\n\nbase <- data.frame(matrix(test[[1]]))%>% dplyr::rename(words = !!names(.)[1])%>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'brain vision'), \"brain vision analyser\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'mne'), \"mne\", as.character(words))) %>%  rbind(., fromrest) %>% \n  mutate(words = ifelse(str_detect(words, 'ggplot'), \"ggplot\", as.character(words))) \n\nwords <- base %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq)) \n\nnarrow1 <- base %>% \n  mutate(words = ifelse(str_detect(words, 'matlab|bar.m|boundedline'), \"custom matlab\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'fieldtrip'), \"fieldtrip\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'eeglab'), \"EEGLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'erplab'), \"ERPLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'python|seaborn|matplotlib|plotly'), \"custom python\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'mne'), \"MNE\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'ggplot|\\\\br\\\\b'), \"custom r\", as.character(words))) %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq))\nnarrow1 %>% head()\n\n          words Freq\n1 custom matlab   45\n2           MNE   35\n3     fieldtrip   31\n4 custom python   24\n5        EEGLAB   24\n6        custom   16\n\n\n\n\n2\n\ntest <- word_preproc_tool(data, 82, 10) \nrest <- test[[2]]\nfromrest <- data.frame(words = c(\"fieldtrip\",\"r\", \"matlab\", \"fieldtrip\", \"adobe illustrator\", \"custom matlab\", \"custom matlab\", \"mne\" ))\n\nbase <- data.frame(matrix(test[[1]]))%>% dplyr::rename(words = !!names(.)[1])%>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'brain vision'), \"brain vision analyser\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'mne'), \"MNE\", as.character(words))) %>%  rbind(., fromrest) %>% \n  mutate(words = ifelse(str_detect(words, 'ggplot'), \"ggplot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'own|cusom'), \"custom\", as.character(words))) \n\nwords <- base %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq)) \n\nnarrow2 <- base %>% \n  mutate(words = ifelse(str_detect(words, 'matlab|bar.m|boundedline'), \"custom matlab\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'fieldtrip|fieldteip|field trip'), \"fieldtrip\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'eeglab'), \"EEGLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'erplab'), \"ERPLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'python|seaborn|matplotlib|plotly'), \"custom python\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'ggplot|\\\\br\\\\b'), \"custom r\", as.character(words))) %>% \n   mutate(words = ifelse(str_detect(words, 'cartool'), \"cartool\", as.character(words))) %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq))\nnarrow2 %>% head()\n\n          words Freq\n1 custom matlab   45\n2           MNE   34\n3     fieldtrip   31\n4 custom python   24\n5        EEGLAB   24\n6        custom   16"
  },
  {
    "objectID": "plot_breakdown.html#general-struggles-with-plots",
    "href": "plot_breakdown.html#general-struggles-with-plots",
    "title": "3.plot_breakdown",
    "section": "General struggles with plots",
    "text": "General struggles with plots\n\nword_preproc_tool_2 <- function(data, N, lim){\n  #lim = 10\n  tmp <- data %>% dplyr::select(N, N+1, N+2) %>% dplyr::rename(soft = !!names(.)[1], parts = !!names(.)[2], new_feature = !!names(.)[3]) %>% \n    filter(!is.na(soft)) %>% \n    mutate_at(vars(colnames(.)), funs(tolower(.))) %>% \n    mutate(soft = str_replace(soft, 'own', \"custom\"), \n           soft = str_replace(soft, '(matlab)', \"matlab\"), \n           soft = case_when(\n      str_detect(soft, 'brain vision') ~ \"brain vision analyser\",\n      #str_detect(soft, 'matlab|bar.m|boundedline') ~ \"custom matlab\",\n      str_detect(soft, 'mne') ~ \"mne\",\n      TRUE ~ as.character(soft)\n    ), \n    parts = case_when(\n      str_detect(parts, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(parts)\n    ),\n    new_feature = case_when(\n      str_detect(new_feature, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(new_feature)\n    )) %>% \n  \n    filter_at(vars(parts, new_feature), all_vars(!is.na(.))) %>% mutate(n = lengths(gregexpr(\"\\\\W+\", soft)) + 1) %>% \n    filter(parts != \"-\" | new_feature != \"-\", n < lim) %>%  dplyr::select(-4) %>% arrange(soft)\n  return(tmp)\n}\n\n\nstruggle1 <- word_preproc_tool_2(data, 71, 10) \n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\nstruggle1 %>% filter( parts != \"-\") %>% dplyr::select(parts) \n\n# A tibble: 91 × 1\n   parts                                                                        \n   <chr>                                                                        \n 1 \"plotting is easy. getting the relevant data to plot (conditions, channels, …\n 2 \"plot the intersecting axes at 0,0\"                                          \n 3 \"scaling\"                                                                    \n 4 \"compute the se interval requires having the sd stored or calling all partic…\n 5 \"shading for error\"                                                          \n 6 \"indicating significant differences (hotly debated esthetic issue)\\r\\nshadin…\n 7 \"sme\"                                                                        \n 8 \"error and baseline correction\"                                              \n 9 \"it was initially annoying to figure out how to get the legend only for the …\n10 \"first time understanding the code\"                                          \n# … with 81 more rows"
  },
  {
    "objectID": "exploration.html#time-of-finishing-survey-in-minutes",
    "href": "exploration.html#time-of-finishing-survey-in-minutes",
    "title": "exploration",
    "section": "Time of finishing survey in minutes",
    "text": "Time of finishing survey in minutes\n\nmedian(as.numeric(data$`Total time`)) / 60\n\n[1] 14.0435"
  },
  {
    "objectID": "plot_breakdown.html#struggles-with-plots",
    "href": "plot_breakdown.html#struggles-with-plots",
    "title": "3.plot_breakdown",
    "section": "Struggles with plots",
    "text": "Struggles with plots\n\nvec <- names(data[ , grepl( \".*Which parts of*.\" , names(data))]) %>% str_split_i(., \"\\\\]\", 2) %>% \n  str_split_i(., \"\\\\...\", 2) %>% as.numeric()\nvec\n\n[1]  72  83  88  93 100 105 110 115\n\n\n####1\n\nword_preproc_tool_2 <- function(data, N, lim){\n  #lim = 10\n  tmp <- data %>% dplyr::select(N, N+1, N+2) %>% dplyr::rename(soft = !!names(.)[1], parts = !!names(.)[2], new_feature = !!names(.)[3]) %>% \n    filter(!is.na(soft)) %>% \n    mutate_at(vars(colnames(.)), funs(tolower(.))) %>% \n    mutate(soft = str_replace(soft, 'own', \"custom\"), \n           soft = str_replace(soft, '(matlab)', \"matlab\"), \n           soft = case_when(\n      str_detect(soft, 'brain vision') ~ \"brain vision analyser\",\n      #str_detect(soft, 'matlab|bar.m|boundedline') ~ \"custom matlab\",\n      str_detect(soft, 'mne') ~ \"mne\",\n      TRUE ~ as.character(soft)\n    ), \n    parts = case_when(\n      str_detect(parts, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(parts)\n    ),\n    new_feature = case_when(\n      str_detect(new_feature, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(new_feature)\n    )) %>% \n  \n    filter_at(vars(parts, new_feature), all_vars(!is.na(.))) %>% mutate(n = lengths(gregexpr(\"\\\\W+\", soft)) + 1) %>% \n    filter(parts != \"-\" | new_feature != \"-\", n < lim) %>%  dplyr::select(-4) %>% arrange(soft)\n  return(tmp)\n}\n\n\nstruggle1 <- word_preproc_tool_2(data, 71, 10) \n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\nstruggle1 %>% filter( parts != \"-\") %>% dplyr::select(parts) \n\n# A tibble: 91 × 1\n   parts                                                                        \n   <chr>                                                                        \n 1 \"plotting is easy. getting the relevant data to plot (conditions, channels, …\n 2 \"plot the intersecting axes at 0,0\"                                          \n 3 \"scaling\"                                                                    \n 4 \"compute the se interval requires having the sd stored or calling all partic…\n 5 \"shading for error\"                                                          \n 6 \"indicating significant differences (hotly debated esthetic issue)\\r\\nshadin…\n 7 \"sme\"                                                                        \n 8 \"error and baseline correction\"                                              \n 9 \"it was initially annoying to figure out how to get the legend only for the …\n10 \"first time understanding the code\"                                          \n# … with 81 more rows"
  },
  {
    "objectID": "plot_breakdown.html#new-features",
    "href": "plot_breakdown.html#new-features",
    "title": "3.plot_breakdown",
    "section": "New features",
    "text": "New features"
  }
]
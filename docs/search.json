[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello! We provided a survey to find out how researchers use EEG plotting tools in their daily work. Here you can find the analysis of this survey."
  },
  {
    "objectID": "connections.html",
    "href": "connections.html",
    "title": "Linear models",
    "section": "",
    "text": "Show the code\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method"
  },
  {
    "objectID": "connections.html#up-or-down",
    "href": "connections.html#up-or-down",
    "title": "Linear models",
    "section": "Up or down",
    "text": "Up or down"
  },
  {
    "objectID": "connections.html#experience-tools",
    "href": "connections.html#experience-tools",
    "title": "user_study",
    "section": "Experience  tools",
    "text": "Experience  tools\n\nvec <- names(data[25:51]) %>% str_split_i(., \"\\\\? \\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:51] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% #mutate(`Custom scripts` = ifelse(Other == \"Custom scripts\", \"Yes\", `Custom scripts`)) %>% \n  dplyr::select(-Other) %>% \n  mutate_at(vars(vec[1:26]), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %>% \n  cbind(data[20], .) %>% dplyr::rename(years = !!names(.)[1]) %>% filter(years < 50) %>% \n  select_if(colSums(.) != 0)\n\n\nTools and year of experience\n\na <- software  %>% \n  select_if(colSums(.) > 10) \n\nres <- a %>%  dplyr::select(years, BESA) %>% \n  group_by(BESA) %>% dplyr::summarise(mean(years)) %>% dplyr::rename(., Usage = BESA, BESA = `mean(years)`)\n\ncn <- colnames(a[3:length(a)])\nfor (i in 1:length(cn)){\n  tmp <- a %>%  dplyr::select(years, cn[i]) %>% \n  group_by_at(2) %>% dplyr::summarise( mean(years)) %>%  dplyr::select(-1)\n  colnames(tmp) <- cn[i] \n  res <- cbind(res, tmp) \n  #print(cn[i])\n}\n res %>% t()  %>%\n  row_to_names(row_number = 1) %>% data.frame() %>% dplyr::rename(., not_used = X0, used = X1) %>% \n  tibble::rownames_to_column(., \"software\") %>%  \n  dplyr::mutate(., not_used = round(not_used, 2), used = round(used, 2)) %>% \n  dplyr::mutate(., status = ifelse(not_used > used, \"younger\", \"older\")) %>% \n  mutate(status = cell_spec(status, color = ifelse(status == \"younger\", \"green\", \"black\")))   %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>%\n   add_header_above(header = c(\" \" = 1, \"Years of user experience\" = 3))   %>%\n  kable_classic(full_width = T, html_font = \"Arial\")\n\n\n\n \n\n\nYears of user experience\n\n  \n    software \n    not_used \n    used \n    status \n  \n \n\n  \n    BESA \n    7.74 \n    8.58 \n    older \n  \n  \n    Brainstorm \n    7.64 \n    8.53 \n    older \n  \n  \n    Brain Vision Analyser \n    7.74 \n    8.00 \n    older \n  \n  \n    EEGLAB \n    6.27 \n    8.72 \n    older \n  \n  \n    ERPLAB \n    7.46 \n    9.08 \n    older \n  \n  \n    FieldTrip \n    7.51 \n    8.11 \n    older \n  \n  \n    LIMO \n    7.57 \n    10.50 \n    older \n  \n  \n    MNE-Python \n    8.22 \n    7.19 \n    younger \n  \n  \n    SPM \n    7.71 \n    8.58 \n    older \n  \n  \n    Custom scripts \n    7.32 \n    8.62 \n    older \n  \n\n\n\n\n\n\n# na.omit(data[51]) %>% nrow() # change others here \n# other <- c(rep(\"Custom scripts\", each=9), \"4DBTi\", rep(\"letswave\", 3), \"mTRF\", \"RAGU\", \"IGOR Pro\", \"EEGProcessor\", \"ELAN\", \"WinEEG\") %>% table(.) %>% data.frame(.) %>% rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))\n# data.frame(rowSums(t(software))) %>%  tibble::rownames_to_column(., \"soft\") %>% \n#   rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\")) %>% \n#  rbind(., other) %>% dplyr::group_by(soft) %>% dplyr::summarise(sum_scores = sum(sum_scores))"
  },
  {
    "objectID": "connections.html#in-search-of-single-variable-representing-experience",
    "href": "connections.html#in-search-of-single-variable-representing-experience",
    "title": "Linear models",
    "section": "In search of single variable representing experience",
    "text": "In search of single variable representing experience\n\n\nShow the code\nm = FAMD(exp_data[1:5], ncp=2, axes=c(1,2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nfviz_famd_ind(m, col.ind = \"cos2\", \n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE)\n\n\n\n\n\n\n\nShow the code\nfactor_scores <- as.data.frame(m$ind$coord)\nhead(factor_scores)\n\n\n       Dim.1      Dim.2\n1 -1.5303106 -0.1469071\n2 -0.8668375 -0.5862766\n3 -0.2361600 -1.4409580\n4  0.6099401 -0.9023251\n5  0.1887863  1.2908970\n6  0.9587131 -0.7597601\n\n\nShow the code\ncbind(data[20], factor_scores[1])  %>% \n   rename_at(vars(colnames(.)), ~ c(\"years\", \"proxy\")) %>% \n  with(cor.test( proxy, years)) %>% \n  broom::tidy()\n\n\n# A tibble: 1 × 8\n  estimate statistic  p.value parameter conf.low conf.high method        alter…¹\n     <dbl>     <dbl>    <dbl>     <int>    <dbl>     <dbl> <chr>         <chr>  \n1    0.617      10.7 5.08e-21       185    0.520     0.699 Pearson's pr… two.si…\n# … with abbreviated variable name ¹​alternative\n\n\nShow the code\n  #lm(data=.,years ~ proxy) %>% summary(.)"
  },
  {
    "objectID": "exploration.html",
    "href": "exploration.html",
    "title": "exploration",
    "section": "",
    "text": "# upload to the git\nlibrary(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\nlibrary(kableExtra)\nlibrary(stringr)\n\n\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method"
  },
  {
    "objectID": "exploration.html#bio-stats",
    "href": "exploration.html#bio-stats",
    "title": "exploration",
    "section": "Bio stats",
    "text": "Bio stats\n\nCountry\n\ndata.frame(table(data[8]))  %>% dplyr::rename(country_work = !!names(.)[1]) %>%\n  mutate(country_work = ifelse(Freq >= 3, as.character(country_work), \"_Others\")) %>% group_by(country_work) %>% \n  dplyr::summarise(Freq = sum(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(country_work, Freq),  x= Freq, fill = country_work)) +\n    geom_bar(stat=\"identity\") + labs(x=\"Count\", y=\"Country of work of survey participant\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2) + theme_classic() + \n  theme(legend.position=\"none\", axis.text.y = element_text(size = 14))\n\n\n\n\n\n\nField\n\nfield <- as.data.frame(table(data[9])) %>% arrange(desc(Freq)) %>% head(3)\nfield$Freq[1] <- field$Freq[1] + 1 # from Others\nfield$Freq[2] <- field$Freq[2] + 1\nfield$Freq[3] <- field$Freq[3] + 1\nfield %>% dplyr::rename(area = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = reorder(area, Freq),  y= Freq, fill = area)) +\n    geom_bar(stat=\"identity\") + labs(x=\"Field of research\", y=\"Count\") +\n    geom_text(aes(label = Freq), \n    vjust = -0.2) + theme_classic() + \n  theme(legend.position=\"none\", axis.text.x = element_text(size = 12))\n\n\n\n\n\n\nTopic\n\nt <- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt <- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\n\narea <- data.frame(matrix(tt)) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), \"affective neuroscience\", words)) %>%  \n  #mutate(words =ifelse(str_detect(.[[1]], 'spatial'), \"spatial\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'memory'), \"memory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), \"auditory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognition|consciousness|meditation|cognitive control|self|executive functions'), \"cognitive control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), \"deep brain stimulation\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), \"decision making\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), \"ageing\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'social'), \"social cognition\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), \"olfaction\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), \"language and speech\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'bci'), \"bci\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), \"sleep\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), \"time\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|perception'), \"attention and perception\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'vis'), \"vision\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development'), \"development\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), \"motor control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), \"mental disorders\", words)) %>%   \n  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), \"dsp\", words))\n\n   \narea %>% group_by(words) %>% dplyr::summarise(Freq = n()) %>% \n  data.frame(.)  %>% mutate(words = as.character(words)) %>%  #arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(words, Freq),  x= Freq, fill = words)) +\n    geom_bar(stat=\"identity\") + labs(x=\"Topic of research\", y=\"Frequency\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2) + theme_classic() + theme(legend.position=\"none\")\n\n\n\n\n\n\nMethod\n\nmethod <- data[14:17]\nch <- colnames(method)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\? \\\\[\", 2) \ncolnames(method) <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd <- data.frame(rowSums(t(data.frame(foreach(i = colnames(method)) %do% ifelse(method[i]==\"Yes\", 1, 0))))) \nd <- tibble::rownames_to_column(d, \"plots\") \ncolnames(d) <- c(\"method\", \"sum_scores\")\nd %>% arrange(desc(sum_scores)) %>% \n    ggplot(., aes(x = reorder(method, sum_scores), y = sum_scores, fill = method)) +\n    geom_col(stat = \"identity\") + labs(x = \"Method\", y = \"Value\", fill = \"Method\") +\n    theme_classic() + theme(legend.position=\"none\")\n\nWarning in geom_col(stat = \"identity\"): Ignoring unknown parameters: `stat`\n\n\n\n\n\n\n\nExperience\nPapers\n\ndata[19] %>% dplyr::rename(papers = !!names(.)[1]) %>% filter(papers < 100) %>%  ggplot(data = ., aes(papers)) +\n  geom_histogram() +\n  labs(x =\"How many published papers/preprints do you have, where you used EEG, MEG or iEEG analysis?\") + theme_classic()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n# PCA for clustering it \n\nPosition\n\n#na.omit(data[13]) # recode Others\nas.data.frame(table(na.omit(data[12]))) %>% dplyr::rename(position = !!names(.)[1]) %>%\n  arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(position, Freq),  x= Freq, fill = position)) +\n    geom_bar(stat=\"identity\") + ylab(\"Position\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2) + theme_classic() + theme(legend.position=\"none\")\n\n\n\n\nYears\n\ndata %>% filter(.[[20]] < 50) %>% ggplot(data = ., aes_(as.name(names(data)[20]))) +\n  geom_histogram(bins = 45) +  scale_x_continuous(breaks=seq(0, 30, 5)) +\n  labs(x =\"Years of experience with EEG, MEG, or iEEG analysis\", y=\"Count\") +\n  theme_classic() + theme(legend.position=\"none\", axis.text.x = element_text(size = 12)) \n\nWarning: `aes_()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`\n\n\n\n\n\nSelf-assessed level\n\ntable(data[21]) %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = level, y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Self-assessed level\") +\n    geom_text(aes(label = Freq), vjust = -0.2) + theme_classic() +\n  theme(legend.position=\"none\", axis.text.x = element_text(size = 12)) +\n    scale_x_discrete(limits = c(\"Beginner\", \"Intermediate\", \"Expert\")) +\n  labs(y=\"Count\") \n\n\n\n\nCode contribution\n\ntable(data[22])  %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = reorder(level, Freq),  y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Code contribution\") +\n    geom_text(aes(label = Freq), vjust = -0.2)  + theme_classic() + theme(legend.position=\"none\")\n\n\n\n\n\n\nChannels\nHow many channels do you typically measure?\n\ndata %>% ggplot(data = ., aes_(as.name(names(data)[23]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30)) +\n    labs(x =\"How many channels do you typically measure?\") + theme_classic()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nHow many channels do you typically measure?\n\ndata %>% filter(.[[24]] < 500) %>% ggplot(data = ., aes_(as.name(names(data)[24]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30))+\n    labs(x =\"How many channels of those you measured do you typically analyse?\") + theme_classic()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n# plots should be combined"
  },
  {
    "objectID": "exploration.html#software-usage",
    "href": "exploration.html#software-usage",
    "title": "exploration",
    "section": "Software usage",
    "text": "Software usage\n\nfrequency\n\nna.omit(data[51]) %>% nrow()\n\n[1] 21\n\nother <- c(rep(\"Custom scripts\",each=9), \"4DBTi\", rep(\"letswave\", 3), \"mTRF\", \"RAGU\", \"IGOR Pro\", \"EEGProcessor\", \"ELAN\", \"WinEEG\") %>% table(.) %>% data.frame(.) %>% rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))\n\n\nvec <- names(data[25:50]) %>% str_split_i(., \"\\\\? \\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:50] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %>% \n  cbind(., data[51] %>% rename_at(vars(colnames(.)), ~ c(\"other\"))) %>% mutate(other = case_when(\n      grepl(\"\\\\b(letswave)\\\\b\", other, ignore.case = TRUE) == TRUE ~ \"Letswave\",\n      grepl(\"\\\\b(r|matlab|python|ggplot(2)?|own)\\\\b\", other, ignore.case = TRUE) == TRUE ~ \"Custom scripts\",\n      grepl(\"\\\\bnever\\\\b\", other, ignore.case = TRUE) == TRUE ~ NA_character_,\n      TRUE ~ as.character(other)\n      ))  %>%\n  mutate(cs = ifelse(other == \"Custom scripts\", other, NA_character_),\n         other2 = ifelse(other != \"Custom scripts\", other, NA_character_)) %>% \n  mutate(`Custom scripts` = case_when(\n    cs == \"Custom scripts\" ~ as.numeric(1),\n    TRUE ~ as.numeric(`Custom scripts`)\n  )) %>% \n  mutate(Letswave = case_when( #gross\n    other2 == \"Letswave\" ~ as.numeric(1),\n    TRUE ~ as.numeric(0)\n  )) %>% dplyr::select(-cs, -other, -other2) # next time I also will extend other 2 too\n\n\nd <- data.frame(rowSums(t(software))) %>%  tibble::rownames_to_column(., \"soft\") %>% \n    rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))   #%>% \n  # rbind(., other) %>% # not sure is it correct\n  # dplyr::group_by(soft) %>% dplyr::summarise(sum_scores = sum(sum_scores)) %>% \n  # arrange(., desc(sum_scores))\n\n\nd  %>% filter(sum_scores != 0) %>% \n  mutate(soft = ifelse(sum_scores >= 3, as.character(soft), \"_Others\")) %>% group_by(soft) %>% \n  dplyr::summarise(sum_scores = sum(sum_scores)) %>% ungroup() %>% \n  mutate(percent_score = round(sum_scores / sum(sum_scores) * 100)) %>% \n    ggplot(data = ., aes(y = reorder(soft, percent_score),  x= percent_score, fill = soft)) +\n    geom_bar(stat=\"identity\") + labs(x= \"Scores\", y=\"Analytical tools\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), \n            position = position_stack(vjust = 0.5), size = 4)  + theme_classic() + theme(legend.position=\"none\", axis.text.y = element_text(size = 14))\n\n\n\n\n\n\nNumber of used tools\n\ndata.frame(rowSums(software)) %>%  dplyr::rename(n_soft = rowSums.software.) %>% \n ggplot(data = ., aes(n_soft)) +\n  geom_histogram(bins = 45) +  scale_x_continuous(breaks=seq(0, 30, 1)) +\n  labs(x =\"Number of software used\", y=\"Count\") +\n  theme_classic() + theme(legend.position=\"none\", axis.text.x = element_text(size = 12)) \n\n\n\nns <- cbind(data.frame(rowSums(software), software)) %>% \n  filter(rowSums.software. == 1) %>% dplyr::select(-rowSums.software.)\n\ndata.frame(rowSums(t(ns))) %>%  \n  tibble::rownames_to_column(., \"soft\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\")) %>% \n  arrange(., desc(sum_scores)) %>% filter(sum_scores != 0)\n\n                   soft sum_scores\n1            MNE.Python         11\n2             FieldTrip          8\n3                EEGLAB          7\n4        Custom.scripts          2\n5 Brain.Vision.Analyser          1\n6                ERPLAB          1\n7                  SPM.          1\n\n\n\n\ncooccurrence\n\n# how to order by diagonal matrix \n# how to add others\nsoftware <- data[25:50]\nch <- colnames(software)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\? \\\\[\", 2) \nch1 <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd1 <- foreach(i = colnames(software)) %do% ifelse(software[i]==\"Yes\", 1, 0)\nc <- crossprod(matrix(unlist(d1), ncol = 26))\nrownames(c) <- ch1\ncolnames(c) <- rownames(c)\n\ndiag.order <- order(diag(c), decreasing = FALSE)\nmat_reordered <- c[diag.order, diag.order]\n\nmelt(mat_reordered) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) \n\n\n\n\n\nzero_rows <- rowSums(mat_reordered) == 0\nzero_cols <- colSums(mat_reordered) == 0\n\n# Create a new matrix array without the rows and columns consisting only of zeroes\nnew_matrix <- mat_reordered[!zero_rows, !zero_cols]\nmelt(new_matrix) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) \n\nWarning in melt(new_matrix): The melt generic in data.table has been passed a\nmatrix and will attempt to redirect to the relevant reshape2 method; please note\nthat reshape2 is deprecated, and this redirection is now deprecated as well.\nTo continue using melt methods from reshape2 while both libraries are attached,\ne.g. melt.list, you can prepend the namespace like reshape2::melt(new_matrix).\nIn the next version, this warning will become an error."
  },
  {
    "objectID": "exploration.html#important-features",
    "href": "exploration.html#important-features",
    "title": "exploration",
    "section": "Important features",
    "text": "Important features\n\ndata[52:60] %>% rename_with(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %>% \n                                        str_sub(., 1, -2) ) %>%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 ))) %>% \n  colSums(., na.rm =T) %>% data.frame(.) %>%  tibble::rownames_to_column(., \"Feature\") %>% \n  filter(!is.na(Feature)) %>% \n  arrange(desc(.)) %>% rename_at(vars(colnames(.)), ~ c(\"Feature\", \"sum_scores\")) %>% group_by(Feature) %>% \n  dplyr::mutate( mean = round(sum_scores / nrow(data), 2)) %>%   kbl(escape = F, booktabs = T) %>%\n  kable_styling(\"striped\", position = \"center\",) %>% kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    Feature \n    sum_scores \n    mean \n  \n \n\n  \n    Flexible tweaking of plot attributes (colors, linewidths, margins etc.) \n    292 \n    1.56 \n  \n  \n    Presentation/publication ready figures \n    226 \n    1.21 \n  \n  \n    Reproducibility of interactively generated or modified plots \n    223 \n    1.19 \n  \n  \n    Generating plots by coding \n    221 \n    1.18 \n  \n  \n    Combine with a custom plot created outside of the toolbox (as subplot or inset) \n    116 \n    0.62 \n  \n  \n    Zooming or panning within a plot \n    109 \n    0.58 \n  \n  \n    Speed of plotting \n    80 \n    0.43 \n  \n  \n    Interactive selection of time-ranges or electrodes e.g. via Sliders or Dropdown menus \n    72 \n    0.39 \n  \n  \n    Generating plots by clicking (GUI) \n    -68 \n    -0.36 \n  \n\n\n\n\n\n\nfeature <- data[52:60] %>% rename_all(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %>% \n                                        str_sub(., 1, -2) ) %>%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 ))) %>% \n  pivot_longer(cols = everything(), names_to = \"name\", values_to = \"value\") %>% \n  mutate(index = as.integer(factor(name)))\n\n#feature  %>% distinct(., index, name) %>% arrange(., index)\n\nfeature %>% #filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  geom_density(aes(x = value, fill = str_wrap(name)), bw = 0.5) + \n  labs(x = \"score\", fill=\"Features\")  + theme_classic()  +\n  theme(legend.position = \"none\", legend.key.height=unit(2, \"cm\")) + facet_wrap(~str_wrap(name, 20))\n\n\n\n\n\nfeature %>% filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  geom_density(aes(x = value, color = str_wrap(name, 20)), bw = 0.5) + \n  labs(x = \"score\", color = \"Features\")  + theme_classic() +\n  theme(legend.position = \"none\", \n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14)) + \n  facet_wrap(~str_wrap(name, 20)) + labs(x=\"Scores on Likert scale\", y=\"Density\") \n\nWarning: Removed 18 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\n\n#library(RColorBrewer) \nfeature %>% filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  stat_density(aes(x = value, color = str_wrap(name, 20)),\n                  geom=\"line\", position=\"identity\", bw = 0.5, size = 1) +\n  labs(x = \"score\", color = \"Features\")  + theme_classic() +\n  theme(\n        legend.key.height=unit(1, \"cm\"),\n        legend.text = element_text(color = \"black\"),\n        axis.text = element_text(size = 14),\n        strip.text = element_text(size = 14))  + \n  labs(x=\"Scores on Likert scale\", y=\"Density\") \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: Removed 18 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\n\nfeature %>% filter(index %in% c(8, 9)) %>% \n  ggplot() + \n   stat_density(aes(x = value, color = str_wrap(name, 20)),\n                  geom=\"line\", position=\"identity\", bw = 0.5, size = 1) +\n  labs(x = \"score\", color =\"Features\")  + theme_classic() +\n  theme(\n        legend.key.height=unit(1, \"cm\"),\n        legend.text = element_text(color = \"black\"),\n        axis.text = element_text(size = 14),\n        strip.text = element_text(size = 14))  + \n  labs(x=\"Scores on Likert scale\", y=\"Density\") \n\nWarning: Removed 7 rows containing non-finite values (`stat_density()`).\n\n\n\n\n\n\nfeature %>% filter(index %in% c(1, 3, 5)) %>% \n  ggplot() + \n   stat_density(aes(x = value, color = str_wrap(name, 20)),\n                  geom=\"line\", position=\"identity\", bw = 0.5, size = 1) +\n  labs(x = \"score\", color =\"Features\")  + theme_classic() +\n  theme(\n        legend.key.height=unit(1, \"cm\"),\n        legend.text = element_text(color = \"black\"),\n        axis.text = element_text(size = 14),\n        strip.text = element_text(size = 14))  + \n  labs(x=\"Scores on Likert scale\", y=\"Density\") \n\nWarning: Removed 13 rows containing non-finite values (`stat_density()`)."
  },
  {
    "objectID": "exploration.html#familiarity-with-plots",
    "href": "exploration.html#familiarity-with-plots",
    "title": "exploration",
    "section": "Familiarity with plots",
    "text": "Familiarity with plots\n\nRecognition\n\nvec <- c(\"line\", \"butterfly\", \"topo\",  \"topo_map\", \"topo_array\", \"erp_image\", \"parallel\", \"channel_image\")\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plot\", \"sum_scores\"))  %>% \n  arrange(., desc(sum_scores)) %>% \n  ggplot(data = ., aes(y = reorder(plot, sum_scores), x= sum_scores, fill=plot)) +\n  geom_bar(stat=\"identity\") + ylab(\"plot\") + theme_classic() + \n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Select ERP plot you are familiar with\") \n\n\n\n\n\n\nPlotting\n\nvec <- names(data[ , grepl( \"Have you ever plotted\" , names(data))])\n\n\ndo_vec <- function(vec, data){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., answer, score, `N.A`:`Yes`, factor_key=TRUE) %>% \n  mutate(answer = str_replace(answer, 'N.A', \"No\"))\n\ntab %>% \n  ggplot(., aes(x = plots, y = score, fill = answer)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic() +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Have you ever plotted this kind of figure?\")\n\n\n\n\n\n\nRecognition and plotting\n\nvec <- names(data[ , grepl( \"Have you ever plotted \" , names(data))]) #%>% str_split_i(., \"\\\\.....\", 2) \nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_map\", \"topo_array\",  \"erp_img\", \"parallel\", \"channel_img\")\n\ndo_vec <- function(vec, data, plot_names){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>% merge(., tab)  %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of familiarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2) +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Familiarity with plots\")"
  },
  {
    "objectID": "exploration.html#have-you-ever-plotted-this-king-of-figure",
    "href": "exploration.html#have-you-ever-plotted-this-king-of-figure",
    "title": "exploration",
    "section": "Have you ever plotted this king of figure",
    "text": "Have you ever plotted this king of figure\n\nvec <- names(data[ , grepl( \"Have you ever\" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nvec\n\n[1]  22  70  81  86  91  98 103 108 113\n\n\n\ndo_vec <- function(vec, data){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., answer, score, `N.A`:`Yes`, factor_key=TRUE) %>% \n  mutate(answer = str_replace(answer, 'N.A', \"No\"))\n\nWarning in rbind(t1, t): number of columns of result is not a multiple of vector\nlength (arg 1)\n\ntab %>% \n  ggplot(., aes(x = plots, y = score, fill = answer)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic()"
  },
  {
    "objectID": "exploration.html#familiar-and-plotted",
    "href": "exploration.html#familiar-and-plotted",
    "title": "exploration",
    "section": "Familiar and plotted",
    "text": "Familiar and plotted\n\nvec <- names(data[ , grepl( \"Have you ever\" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_img\", \"parallel\", \"channel_img\")\n\ndo_vec <- function(vec, data, plot_names){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec[2:length(vec)], data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(plot_names)\n\n  # Now:\n  data %>% select(all_of(plot_names))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>% merge(., tab)  %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of familiarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2)"
  },
  {
    "objectID": "exploration.html#up-or-down",
    "href": "exploration.html#up-or-down",
    "title": "exploration",
    "section": "Up or down",
    "text": "Up or down\n\nt <- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt <- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\narea1 <- data.frame(matrix(tt)) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), \"affective neuroscience\", words)) %>%  \n  mutate(words =ifelse(str_detect(.[[1]], 'memory'), \"memory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), \"auditory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|cognition|consciousness|meditation|cognitive control|self|executive functions'), \"cognitive control and attention\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), \"deep brain stimulation\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), \"decision making\", words)) %>%\n  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), \"ageing\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'social'), \"social cognition\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), \"olfaction\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), \"language and speech\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'bci'), \"bci\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), \"sleep\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), \"time\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'perception'), \"perception\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'vis'), \"vision\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development|ageing'), \"development\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), \"motor control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), \"mental disorders\", words)) %>%   \n  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), \"dsp\", words))\n\narea <- area1 %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'olfaction|vision|auditory|pain'), \"perception\", words))%>%\n  mutate(words = ifelse(str_detect(.[[1]], 'dsp|computational neuroscience'), \"methodology\", words)) %>% \n  mutate(words = ifelse(str_detect(.[[1]], 'mental disorders|deep brain stimulation'), \"clinical\", words))%>% \n  mutate(words = ifelse(str_detect(.[[1]], 'social cognition'), \"affective neuroscience\", words))\n\n\ntable(data[79]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>%\n  mutate(percent_score = round(scores / sum(scores) * 100)) %>% \n    ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + \n    theme_classic() +\n    theme(axis.title.x=element_blank(), \n          legend.position=\"none\", \n          axis.text = element_text(size = 12),\n          plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position), \n            position = position_stack(vjust = 0.5)) +\n  ggtitle(\"In ERP plot, should positive voltages be plotted upwards, or downwards?\")\n\n\n\n\n\n\n\n\ncbind(unlist(area$words), unlist(data[[79]])) %>% data.frame() %>% \nfilter(.[[2]] != \"NANA\") %>% dplyr::rename(area=X1, ud=X2) %>%\ngroup_by(area) %>%\nfilter(n() > 2) %>% group_by(area, ud) %>% dplyr::summarise(n = n()) %>% \n  group_by(area) %>% dplyr::mutate(nn = sum(n)) %>% \n  ggplot(., aes(x = n, y = reorder(area, nn), fill = ud)) +\n   geom_col(stat = \"identity\", width = 0.5) +\n  labs(x = \"Count\", y = \"area of study\", fill =\"Positive:\") +\n  geom_text(aes(label = n, #paste0(n, \"%\"), \n                group = ud), \n            position = position_stack(vjust = 0.5)) +\n   theme(plot.title = element_text(hjust = 0.5),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.title = element_blank(),\n        axis.title.y=element_blank()\n        ) +  \n  theme_classic()\n\n`summarise()` has grouped output by 'area'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "exploration.html#error-bars",
    "href": "exploration.html#error-bars",
    "title": "exploration",
    "section": "Error bars",
    "text": "Error bars\n\ntable(data[74]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"Scores\"))   %>%  mutate(percent_score = round(Scores / sum(Scores) * 100)) %>% \n\n    ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) +\n      \n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position),  position = position_stack(vjust = 0.5), size = 6) + \n  ggtitle(\"In your paper, did you published ERP plot with error bars?\")\n\n\n\n\n\ndata[75] %>%  filter(!is.na(.)) %>% table()  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% mutate(percent_score = round(scores / sum(scores) * 100)) %>% \n    ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n   theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) + ylab(\"Scores\") +\n     \n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position),  position = position_stack(vjust = 0.5), size = 6) + \n  ggtitle(\"In your figure, what did error bars depicted?\")\n\n\n\n\n\ndata[76] %>%  filter(!is.na(.)) %>% table()\n\nG03Q15[other]. What did the error bars depict in your figure? [Other]\n68% CI, which is close to SEM under normality \n                                            1 \n                    95% ci over channel means \n                                            1 \n          i'm not sure but i think it was sem \n                                            1 \n        median absolute deviaton or quantiles \n                                            1 \n                                           Sd \n                                            1 \n SEM, corrected for within-participant design \n                                            1"
  },
  {
    "objectID": "exploration.html#baseline",
    "href": "exploration.html#baseline",
    "title": "exploration",
    "section": "Baseline",
    "text": "Baseline\n\nperiods\n\ntable(abs(data[77])) %>% data.frame() %>%  dplyr::rename(baseline = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = baseline, y= Freq)) +\n    geom_bar(stat=\"identity\") + xlab(\"Recomended baseline in msec\") +  \n  scale_y_continuous(breaks=seq(0, 60, 5)) + theme_classic() +\n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = Freq, group = baseline), position = position_dodge(width = .9), vjust = -0.2)\n\n\n\n\n\n\njustification\n\n# If you don't want to provide a number on previous question, please, provide a justification\n# depends on what??\n# manual categorization of depending\nj <- data %>%    \n  dplyr::rename(q = !!names(.)[78]) %>% filter(!is.na(q)) %>% dplyr::select(q) %>% \n  mutate(q = tolower(q)) %>% mutate(q = gsub('depends in|depending on', 'depends on', q),\n         dependson = ifelse(grepl(\"depends|depend\", q), q, NA)) %>% \n  separate(dependson, into = c(\"a\",\"b\"), sep = \"depends on |depend on \") %>% \n  dplyr::select(-a) %>% \n  dplyr::rename(dependson = b) #%>% \n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [50].\n\nj %>% filter(is.na(dependson))  %>% select(-dependson)\n\n# A tibble: 18 × 1\n   q                                                                            \n   <chr>                                                                        \n 1 minimum 200ms for erps and theta or beta power                               \n 2 should match the duration of baseline-correction                             \n 3 as a rule of thumb, i would plot at least 1/3 of the duration (post-stimulus…\n 4 half of the illustrated task interval                                        \n 5 in general i would always try to plot the full baseline period used for base…\n 6 the same duration as the one used for baseline correction                    \n 7 at least 300, preferably more                                                \n 8 put down 100, but that's just what i typically use, might be diff for differ…\n 9 at least the baseline window used for the baseline correction?               \n10 in this case it has sense as the -100 : 0 ms is not flat                     \n11 1/3 to 1/2 of the post-stimulus time plotted                                 \n12 i would plot the same baseline period as the one used for baseline correction\n13 i would recommend to plot the baseline period corresponding to the baseline-…\n14 in general, i think it should be roughly the same length as the time window …\n15 assuming the baseline is -250 to 0 ms, i would like to see activity before t…\n16 the actual baseline length you have in the experiment                        \n17 ideally, the entire duration for the baseline correction should be depicted  \n18 it depends - at least as long as the period you use for correction (which ma…\n\nj %>% filter(!is.na(dependson)) %>% select(dependson)\n\n# A tibble: 33 × 1\n   dependson                                                                    \n   <chr>                                                                        \n 1 \"the design of course\"                                                       \n 2 \"the topic\"                                                                  \n 3 \"the study. if you have interstimulus interval of 1 second and you expect to…\n 4 \"the experiment and research question\"                                       \n 5 \"the rest period between the measured evoked responses. e.g. it can be very …\n 6 \"the analysis\"                                                               \n 7 \"paradigm, 100-300 ms range preferable\"                                      \n 8 \"the task design\"                                                            \n 9 \"the type of response (eg for mrcps response is seen before actual movement …\n10 \"the task design, paradigm and signal of interest.\"                          \n# … with 23 more rows\n\n  #View()"
  },
  {
    "objectID": "exploration.html#colorbars",
    "href": "exploration.html#colorbars",
    "title": "exploration",
    "section": "Colorbars",
    "text": "Colorbars\n\ntable(data[117]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Are you aware of perceptual controvericies of colorbars?\")\n\n\n\n\n\ntable(data[118]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Do you know about two-dimensional colorbars?\")\n\n\n\n\n\nrbind(table(data[117]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"answer\", \"scores\")) %>% \n  mutate(questions = \"Awareness about\\ncontrovercies of\\ncolorbars\")%>%\n  mutate(percent_score = round(scores / sum(scores) * 100)),\n\ntable(data[118]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"answer\", \"scores\")) %>% \n  mutate(questions = \"Awareness about\\n2d colorbars\") %>%\n  mutate(percent_score = round(scores / sum(scores) * 100))\n) %>% \n  \n  ggplot(., aes(x = percent_score, y = questions, fill = answer)) +\n  geom_col(stat = \"identity\", width = 0.5) +\n   geom_text(aes(label = paste0(percent_score, \"%\", \"\\n(\", answer, \")\")), \n            position = position_stack(vjust = 0.5), size = 4) + \n    theme_classic()+ \n  theme(plot.title = element_text(hjust = 0.5),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"none\",\n        legend.title = element_blank(),\n        axis.title.y=element_blank()\n        ) +\n  scale_color_manual(values = c(\"#FF6666\", \"#66CC66\")) +\n  scale_fill_manual(values = c(\"#FF6666\", \"#66CC66\"))  +\n  labs(x=\"Percent score\")\n\nWarning in geom_col(stat = \"identity\", width = 0.5): Ignoring unknown\nparameters: `stat`\n\n\n\n\n\n\ntable(data[119])  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>%\n  mutate(percent_score = round(scores / sum(scores) * 100)) %>% \n  ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(stat = \"identity\", width=0.5)  + theme_classic() +\n     theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) + ylab(\"Scores\") +\n  geom_text(aes(label = paste0(percent_score, \"%\") , \n                group = position), position = position_stack(vjust = 0.5), size = 8) + \n  ggtitle(\"Would you like to use a two-dimensional colorbar\\nin your publications, if it was easily available?\")"
  },
  {
    "objectID": "exploration.html#feedback",
    "href": "exploration.html#feedback",
    "title": "exploration",
    "section": "Feedback",
    "text": "Feedback\n\nfeed <- data[120] %>% dplyr::rename(feed = !!names(.)[1]) %>%  filter(!is.na(feed), feed != \"-\") #%>% View()\nfeed  %>%\n  filter(!row_number() %in% c(3, 14, 17, 32, 37, 41))# just appreciation\n\n# A tibble: 49 × 1\n   feed                                                                         \n   <chr>                                                                        \n 1 \"Not only 2-d, but also CIRCULAR colorbars please\\r\\nThey are essential to v…\n 2 \"I think a great feature to have would be a selection of colors for comparis…\n 3 \"stop pushing this jet bullshit on me so hard\"                               \n 4 \"Make it very modular. It will be useless to experts or people trying someth…\n 5 \"This is more of a tangential comment, but one issue for me is lack of aware…\n 6 \"Easy creation of different types of error bars on ERP plots (shading)\"      \n 7 \"I use R for most analyses and visualization but matlab/eeglab/Erplab (for n…\n 8 \"Dynamic head montage videos\"                                                \n 9 \"I feel like Matlab is not very easy to implement in public and interactive …\n10 \"I think everything that relates to plotting ERPs + results of statistical t…\n# … with 39 more rows"
  },
  {
    "objectID": "exploration.html#time-in-minutes",
    "href": "exploration.html#time-in-minutes",
    "title": "exploration",
    "section": "Time in minutes",
    "text": "Time in minutes\n\nmedian(as.numeric(data$`Total time`)) / 60\n\n[1] 14.0435"
  },
  {
    "objectID": "plot_breakdown.html",
    "href": "plot_breakdown.html",
    "title": "3.plot_breakdown",
    "section": "",
    "text": "# upload to the git\nlibrary(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\nlibrary(kableExtra)\nlibrary(stringi)\nlibrary(\"xlsx\")\nlibrary(padr)\n\n\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\nvec <- names(data[ , grepl( \"How would you \" , names(data))])"
  },
  {
    "objectID": "plot_breakdown.html#plot-naming",
    "href": "plot_breakdown.html#plot-naming",
    "title": "3.plot_breakdown",
    "section": "Plot naming",
    "text": "Plot naming\nThose who named a plot somehow and those who failed to do that\n\nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_map\", \"topo_array\", \"erp_img\", \"parallel\", \"channel_img\")\n\nna_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|why'), \"NA\", as.character(words))) %>%\n      mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n      table(.) %>% \n      data.frame(.) %>% filter(words != \"NA\") %>% \n      summarise(n = sum(Freq))  \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- plot_names\n    return(temp)\n}\n\nnum_named <- na_table(data, vec)\nslice(num_named, 1)  %>% \n  gather(., plots, succeeded, `line`:`channel_img`, factor_key=TRUE) %>% \n  mutate(failed = nrow(data) - succeeded) %>% \n  gather(., res, score, succeeded:failed, factor_key=TRUE) %>% \n\n  ggplot(., aes(x = plots, y = score, fill = res)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic() + theme(axis.title.x=element_blank(), plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = score, group = res), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Plot naming\")\n\n\n\n\n\nvec <- names(data[ , grepl( \"Have you ever plotted \" , names(data))]) \n\n\ndo_vec <- function(vec, data, plot_names){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\n\ntab <- do_vec(vec, data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nnamed <- slice(num_named, 1)  %>% \n  gather(., plots, succeeded, `line`:`channel_img`, factor_key=TRUE)%>% \n  mutate(failed = nrow(data) - succeeded) %>% \n  dplyr::rename(named = succeeded) %>% \n  dplyr::select(-failed)\n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\nmem_tab <- data.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>%\n  merge(., named)  %>% left_join(., tab)  \n\nJoining, by = \"plots\"\n\nmem_tab %>% #filter(plots != \"parallel\") %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of\\nfamiliarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2) +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Familiarity with plots\")"
  },
  {
    "objectID": "plot_breakdown.html#top-10-plot-names",
    "href": "plot_breakdown.html#top-10-plot-names",
    "title": "3.plot_breakdown",
    "section": "Top 10 plot names",
    "text": "Top 10 plot names\n\n# does it work?????\nfreq_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n     # i = 112\n      \n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|know|why|remember'), \"NA\", as.character(words)),\n      words = ifelse(nchar(words)==0, NA, words),\n      words = ifelse(str_detect(words, 'erps|ep|erp plot|event related potential'), \"erp_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words)),\n      words = str_replace(words, 'responses', \"response\"),  \n      words =  gsub('channels|chanel', 'channel', words) ,\n      \n      words = ifelse(str_detect(words, '.*grand average.*'), \"grand_average_erp_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'classic'), \"classic_erp_plot\", as.character(words)),\n      words =  gsub('mean|averaged', 'average', words),\n      words =  gsub('course time', 'timecourse', words),\n      words =  gsub('.*timecourse.*', 'time_course_plot', words),\n      words =  gsub('.*erp waveform.*', 'erp_waveform', words),\n      words =  gsub('average condition.*', 'average_condition_erp', words),\n      words =  gsub('electrode', 'channel', words),\n      words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'spaghetti'), \"spaghetti_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'all channels'), \"all_channels_erp\", as.character(words)),\n      words = ifelse(str_detect(words, 'single channel erp|single erp|erp of single channels'), \"single_channel_erp\", as.character(words)),\n      words = ifelse(str_detect(words, '.*channel erp.*'), \"channel_erp\", as.character(words)),\n      words = ifelse(str_detect(words, 'amplitude'), \"amplitude\", as.character(words)),\n      words =  gsub('x |multi |muti |multeple ', 'multiple ', words),\n      words =  gsub('several|each|multeple', 'multiple', words),\n              words =  gsub('erpimage', 'erp image', words),\n      words =  gsub('heat map', 'heatmap', words),\n      words =  gsub('topomaps', 'topomap', words),\n      words =  gsub('topoplots', 'topoplot', words),\n      words =  gsub('epochs', 'epoch', words),\n      words =  gsub('trials', 'trial', words),\n      words =  gsub('topographical', 'topographic', words)\n      ) %>% \n      table(.) %>% \n      data.frame(.) %>%  mutate(n = lengths(gregexpr(\"\\\\W+\", words)) + 1) %>% \n        filter(n < 10) %>% dplyr::select(-n) %>% filter(words != \"\") %>% \n      arrange(desc(Freq))  %>%  head(10) %>% \n      unite(word_freq, c(\"words\", \"Freq\")) %>%  filter(!grepl(\"NA\", word_freq))\n      if (length(temp1) < 10){\n        na_frame <- as.data.frame(matrix(NA, nrow = 10, ncol = 1))\n        names(na_frame) <- names(temp1)\n        temp1 <- rbind(temp1, na_frame)  %>%  head(10)\n      }\n      \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- c(\"line plot\",\"butterfly plot\",\"topoplot\",\"topoplot array\",\"topographic map\",\"ERP image\",\"parallel plot\",\"channel image\")\n    return(temp)\n}\n\ntop10 <- freq_table(data, vec)\ntop10 %>% \n  kbl() \n\n\n\n \n  \n    line plot \n    butterfly plot \n    topoplot \n    topoplot array \n    topographic map \n    ERP image \n    parallel plot \n    channel image \n  \n \n\n  \n    erp_19 \n    butterfly plot_45 \n    topoplot_38 \n    topoplot_6 \n    multiplot_10 \n    erp image_13 \n    amplitude channel peak_1 \n    erp image_3 \n  \n  \n    erp plot_18 \n    butterfly_9 \n    topography_14 \n    series topoplot_4 \n    distribution erp scalp_3 \n    erpimage_7 \n    amplitude electrode erp selective_1 \n    hemap_2 \n  \n  \n    average erp grand_4 \n    all channels erp_2 \n    scalp topography_10 \n    time topoplot_4 \n    erp topo_3 \n    erp single sorted trial_2 \n    amplitude electrode plot_1 \n    2d channel image plot time_1 \n  \n  \n    average erp plot_3 \n    butterfly erp plot_2 \n    topomap_8 \n    time topo_3 \n    channel multi plot_2 \n    frequency plot time_2 \n    amplitudes and channels conditions eeg for selected single trial_1 \n    all averages channels in plot same_1 \n  \n  \n    erp waveform_3 \n    channel erp multi plot_2 \n    plot topographic_7 \n    time topography_3 \n    channel plot_2 \n    plot raster_2 \n    NA \n    all channel channels or plot time_1 \n  \n  \n    average grand_2 \n    mess_2 \n    map scalp_5 \n    time topoplots_3 \n    erp_2 \n    plot werfall_2 \n    NA \n    all channel erp plot_1 \n  \n  \n    erp series time_2 \n    all amplitude for in post pre stimulus time voltage_1 \n    map topographic_5 \n    course time topography_2 \n    erp map scalp_2 \n    across erp plot trials_1 \n    NA \n    all channels response_1 \n  \n  \n    erp wave_2 \n    all average electrodes erps grand_1 \n    topo_4 \n    dynamic topographies_2 \n    erp multiplot_2 \n    activity change trials_1 \n    NA \n    amplitude as average channel eeg function single time_1 \n  \n  \n    erps_2 \n    all change channels dynamics on recoded time_1 \n    map topographical_3 \n    erp topoplot_2 \n    erp topography_2 \n    aligned response trials_1 \n    NA \n    amplitude channel erp spectral_1 \n  \n  \n    NA \n    NA \n    plot topo_3 \n    map scalp_2 \n    NA \n    NA \n    NA \n    NA \n  \n\n\n\n\n# cut after prepositions\n# remove those with 1 voice\n#is sorting is really needed? \n\n\n\nFor each case separately\n\n\n1\n\n# or - slipt and take first one\nword_preproc(data, 69)  %>%\n  mutate(words = ifelse(str_detect(words, 'sure|confus|aware|do not'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, '.*grand average.*'), \"grand_average_erp_plot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'average erp|averaged erp'), \"average_erp_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'erps|ep|erp plot|event related potential'), \"erp_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'classic'), \"classic_erp_plot\", as.character(words))) %>%\n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('mean|averaged', 'average', words)) %>% \n  mutate(words =  gsub('.*time course.*', 'time_course_plot', words)) %>% \n  mutate(words =  gsub('.*erp waveform.*', 'erp_waveform', words)) %>%\n  mutate(words =  gsub('average condition.*', 'average_condition_erp', words)) %>%\n   \n  table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) #%>%   View()\n\n                                                                                            words\n1                                                                                        erp_plot\n2                                                                                             erp\n3                                                                                average_erp_plot\n4                                                                           average_condition_erp\n5                                                                                    erp_waveform\n6                                                                                   average grand\n7                                                                                 erp series time\n8                                                                                        erp wave\n9                                                                                       line plot\n10                                                                                           p300\n11                                                                                    plot single\n12                                                                                   2 conditions\n13                                                                2 conditions course erp in time\n14                                                           2 conditions electrode erp for for x\n15                                                                               2 conditions erp\n16                                                  activity bars error evoked plot shaded single\n17                                                                            amplitude erp graph\n18                                                                    amplitude plot plot voltage\n19                                                                               amplitude signal\n20                                                              analysis erp locked time waveform\n21                                                                           analysis series time\n22                                                                and average b conditions da erp\n23                                                              and cars faces neural response to\n24                and compared conditioned erp in in post potential pre stimulus time two voltage\n25 anything but called don't erp ever have i i i in it know particular plot shows think this type\n26                                                                                  area errorbar\n27                                                                                        average\n28                                                                    average channel erp for one\n29                                                                  average da sensor series time\n30                                                average different grand series time trial types\n31                                                                                average erf erp\n32                                                                     average errors median plot\n33                                                            average event grand potential reled\n34                                                     average evoked grand one response specific\n35                                                                        average grand waveforms\n36                                                                                  average group\n37                                                                        average line plot trial\n38                                                                               average waveform\n39                                                                           averages event reled\n40                                                                              bar erroro shaded\n41                                                                bars conditional erp error plot\n42                                                                     bars error plot timeseries\n43                                                                               boundedline plot\n44                                                                         by erp point point sem\n45                                                                         channel contrast singe\n46                                                                 channel domain erp single time\n47                                                                       channel erp single trace\n48                                                                            channel plot single\n49                                                                                         ci erp\n50                                                           comparing conditions evoked plot two\n51                                                                                  comparing erp\n52                                                         comparison condition erp error shading\n53                                                                                 comparison erp\n54                                                                        condition graph voltage\n55                                                              conditions erp for timecourse two\n56                                                                    conditions evoked potential\n57                                                                   confidence erp intervalslaid\n58                                                                                course erp time\n59                                                                    course evoked response time\n60                                                                      dynamics electrode time x\n61                                                                         electrode erp interest\n62                                                                   elicited erp faces houses vs\n63                                                                          erp error lines trace\n64                                                                         erp error plot sd type\n65                                                                            erp error plots sme\n66                                                                              erp grand average\n67                                                                     erp graph or plot waveform\n68                                                                        erp individual variance\n69                                                                     erp intervals sem waveform\n70                                                                    erp locked or response stim\n71                                                                                 erp peaks wave\n72                                                                               erp time voltage\n73                                                                                 erp timeseries\n74                                                                                erp visualizion\n75                                                                                  error average\n76                                                                          event potential reled\n77                                                                         event potentials reled\n78                                                                               evoked potential\n79                                                                   evoked potential series time\n80                                                                                evoked response\n81                                                                    evoked response series time\n82                                                                              response temporal\n83                                                                                    series time\n84                                                                                         single\n   Freq\n1    38\n2    19\n3    17\n4     4\n5     4\n6     2\n7     2\n8     2\n9     2\n10    2\n11    2\n12    1\n13    1\n14    1\n15    1\n16    1\n17    1\n18    1\n19    1\n20    1\n21    1\n22    1\n23    1\n24    1\n25    1\n26    1\n27    1\n28    1\n29    1\n30    1\n31    1\n32    1\n33    1\n34    1\n35    1\n36    1\n37    1\n38    1\n39    1\n40    1\n41    1\n42    1\n43    1\n44    1\n45    1\n46    1\n47    1\n48    1\n49    1\n50    1\n51    1\n52    1\n53    1\n54    1\n55    1\n56    1\n57    1\n58    1\n59    1\n60    1\n61    1\n62    1\n63    1\n64    1\n65    1\n66    1\n67    1\n68    1\n69    1\n70    1\n71    1\n72    1\n73    1\n74    1\n75    1\n76    1\n77    1\n78    1\n79    1\n80    1\n81    1\n82    1\n83    1\n84    1\n\n\n\n\n2\n\nword_preproc(data, 80)  %>% \n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'spaghetti'), \"spaghetti_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'sure|confus|aware|do not'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'all channels'), \"all_channels_erp\", as.character(words))) %>%\n   mutate(words = ifelse(str_detect(words, 'multiple channel erp|multi channel erp'), \"multiple_channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'single channel erp|single erp|erp of single channels'), \"single_channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, '.*channel erp.*'), \"channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'amplitude'), \"amplitude\", as.character(words))) %>%\n  mutate(words =  gsub('several|each|x |multi |muti |multeple ', 'multiple', words)) %>% \n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('.*time course.*', 'time_course_plot', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                                                                               words\n1                                                                     butterfly_plot\n2                                                                        channel_erp\n3                                                                    all_channel_erp\n4                                                                          amplitude\n5                                                               channel erp multiple\n6                                                                               mess\n7                                                                     spaghetti_plot\n8                                                                   time_course_plot\n9  again but channel do erp for have i i it it multiple name not shows th understand\n10                                                     all average channel erp grand\n   Freq\n1    66\n2    13\n3     5\n4     3\n5     3\n6     2\n7     2\n8     2\n9     1\n10    1\n\n\n\n\n3\n\nword_preproc(data, 85) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|unclear'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n               words Freq\n1           topoplot   39\n2         topography   14\n3   scalp topography   10\n4            topomap    8\n5   plot topographic    7\n6          map scalp    5\n7    map topographic    5\n8               topo    4\n9  map topographical    3\n10         plot topo    3\n\n\n\n\n4\n\nword_preproc(data, 90) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|unclear'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                    words Freq\n1           time topoplot    7\n2                topoplot    7\n3         series topoplot    5\n4    series time topoplot    4\n5               time topo    3\n6         time topography    3\n7                 topomap    3\n8  course time topography    2\n9    dynamic topographies    2\n10           erp topoplot    2\n\n\n\n\n5\n\nword_preproc(data, 97)  %>% \n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly'), \"NA\", as.character(words))) %>%\n  \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                    words Freq\n1               multiplot   10\n2            channel plot    4\n3                erp topo    4\n4             channel erp    3\n5  distribution erp scalp    3\n6          erp topography    3\n7      channel erp layout    2\n8    channel multiple erp    2\n9   channel multiple plot    2\n10                    erp    2\n\n\n\n\n6\n\nword_preproc(data, 102)  %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ersp', 'erp', words)) %>% \n  mutate(words =  gsub('erpimage', 'erp image', words)) %>% \n  mutate(words =  gsub('heat map', 'heatmap', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words =  gsub('epochs', 'epoch', words)) %>% \n  mutate(words =  gsub('trials', 'trial', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good'), \"NA\", as.character(words))) %>%\n  \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                     words Freq\n1                erp image   20\n2  erp single sorted trial    3\n3              epoch image    2\n4          erp hemap trial    2\n5                erp trial    2\n6      frequency plot time    2\n7              plot raster    2\n8             plot werfall    2\n9    across erp plot trial    1\n10   activity change trial    1\n\n\n\n\n7\n\nword_preproc(data, 105)  %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ersp', 'erp', words)) %>% \n  mutate(words =  gsub('erpimage', 'erp image', words)) %>% \n  mutate(words =  gsub('heat map', 'heatmap', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words =  gsub('epochs', 'epoch', words)) %>% \n  mutate(words =  gsub('trials', 'trial', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good'), \"NA\", as.character(words))) %>%\n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n                                                           words Freq\n1                                                           none   10\n2                                                              n    2\n3                                                        sorting    2\n4                  according arbitrary criteria sorting to trial    1\n5                       adding additional sorting time variables    1\n6                                                   all easy was    1\n7                and between correspondance reaction times trial    1\n8  any but chance different epoch have have i lenght to to would    1\n9                                        between smoothing trial    1\n10                                             color map setting    1\n\n\n\n\n8\n\nword_preproc(data, 112)  %>%\n\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good|remember|idea|nan'), \"NA\", as.character(words))) %>%\n  \n # filter(words != \"NA\") %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq)) #%>% View()\n\n                                                                          words\n1                                                                            NA\n2                                                                     erp image\n3                                                                         hemap\n4                                                    2d channel image plot time\n5                                            all averages channels in plot same\n6                                             all channel channels or plot time\n7                                                          all channel erp plot\n8  all channels coded color for in post pre stimulus time value voltage voltage\n9                                                         all channels response\n10                        amplitude as average channel eeg function single time\n11                                               amplitude channel erp spectral\n12                                                amplitude channels color plot\n13                                                     amplitude electrode plot\n14                                               amplitude electrodes erp hemap\n15                                       as eeg electrode function plot voltage\n16                                             average carpet channels erp plot\n17                                            average channel channel erp grand\n18                                                  average channel hemap multi\n19                                               by chanel channel time voltage\n20                                      changes each electrode for site voltage\n21                                                                    chanimage\n22                                                           channel cross plot\n23                                         channel each erp for in time voltage\n24                                                            channel erp hemap\n25                                                            channel erp image\n26                                                                 channel erps\n27                                              channel evoked responses sorted\n28                                                           channel hemap time\n29                                                                channel image\n30                                                         channel plot stacked\n31                                                               channel raster\n32                                            channel represention time voltage\n33                                                                 channel time\n34                                                        channels colormap erp\n35                                                    channels courses erp time\n36                                                         channels eeg voltage\n37                         channels electrodes ersp individual multiple plotted\n38                                                            channels erpimage\n39                                                                channels erps\n40                                                     channels he plot voltage\n41                                                  channels image time voltage\n42                                                 channels variability voltage\n43                                                    channels variions voltage\n44                                                             channelwise plot\n45                                                                        clear\n46                                                              coded color erp\n47                                                                  custer plot\n48                                                  density plot power spectral\n49                                                         electrode image time\n50                                                electrode plot single stacked\n51                                                 electrodes erp hemap lencies\n52                                                                   erp he map\n53                                                                    erp hemap\n54                                                              erp plot raster\n55                                                               erp scalp wide\n56                                                                     erpimage\n57                                                                 evoked image\n58                                                           field global power\n59                                                    for hemap sensors voltage\n60                                            frequency looks plot plot th time\n61                                                       frequency plot voltage\n62                                                                 hemap sensor\n63                                                                   image plot\n64                                                            image plot trials\n65                                                                image voltage\n66                                         imagesc multichannel plot timeseries\n67                                                                       normal\n68                                                                  plot raster\n69                                                         plot topographicview\n70                                                                   rasterplot\n71                                                                         sort\n72                                                                     wehermap\n   Freq\n1    30\n2     3\n3     2\n4     1\n5     1\n6     1\n7     1\n8     1\n9     1\n10    1\n11    1\n12    1\n13    1\n14    1\n15    1\n16    1\n17    1\n18    1\n19    1\n20    1\n21    1\n22    1\n23    1\n24    1\n25    1\n26    1\n27    1\n28    1\n29    1\n30    1\n31    1\n32    1\n33    1\n34    1\n35    1\n36    1\n37    1\n38    1\n39    1\n40    1\n41    1\n42    1\n43    1\n44    1\n45    1\n46    1\n47    1\n48    1\n49    1\n50    1\n51    1\n52    1\n53    1\n54    1\n55    1\n56    1\n57    1\n58    1\n59    1\n60    1\n61    1\n62    1\n63    1\n64    1\n65    1\n66    1\n67    1\n68    1\n69    1\n70    1\n71    1\n72    1"
  },
  {
    "objectID": "plot_breakdown.html#frequency-of-tool-usage",
    "href": "plot_breakdown.html#frequency-of-tool-usage",
    "title": "3.plot_breakdown",
    "section": "Frequency of tool usage",
    "text": "Frequency of tool usage\n\nvec <- names(data[ , grepl( \".*Which plotting\" , names(data))]) %>% str_split_i(., \"\\\\? \\\\]\", 2) %>% \n  str_split_i(., \"\\\\...\", 2) %>% as.numeric()\n\n\nword_preproc_tool <- function(data, N, lim){\n  N = 71\n  #lim = 10\n  tmp <- data %>% dplyr::select(N) %>% filter(!is.na(.)) %>% dplyr::rename(words = !!names(.)[1]) %>% \n    mutate(words = ifelse(str_detect(words, 'own|costum'), \"custom\", as.character(words))) %>% \n  mutate(n = lengths(gregexpr(\"\\\\W+\", words)) + 1) %>% arrange(desc(n))\n  rest <- tmp %>% filter(n >= lim) %>% dplyr::select(words)\n  tmp <- tmp %>% filter(n < lim) %>% dplyr::select(words)\n  \n  t <- foreach(i = 1:nrow(tmp)) %do% strsplit(tmp[[1]][i], \",|/|\\\\|+| and |&| or |\\\\n|\\\\r|;\")\n  tul <- foreach(i = 1:nrow(tmp)) %do% unlist(t[[i]])\n  tul1 <- unlist(tul)\n  tul2 <- tul1[tul1!=\"\"]\n  tul2[tul2==\"-\"] <- NA\n  tul2 <- na.omit(tul2)\n  \n  #t <- foreach(i = 1:nrow(tmp)) %do% tokenize_words(as.character(tmp[i, N]), strip_punct = FALSE)\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"by\", \"over\", \"of\", \"per\", \"for\", \"like\", \"s\", \"at\", \"code\", \"script\", \"recently\", \"my\", \"in\", \"written\", \"using\", \"built\", \"function\", \"plot\", \"with\",  \"itself\", \"scripting\", \"scrip\", \"scripts\", \"basic\")#, \"custom\")\n  t1 <- foreach(i = 1:length(tul2)) %do% tokenize_words(as.character(tul2[i]))\n  \n  \n  t2 <- foreach(i = 1:length(t1)) %do% map(t1[i][[1]], singularize)\n  t21 <- foreach(i = 1:length(t2)) %do% tokenize_words(as.character(t2[i][[1]]))\n  t22 <- foreach(i = 1:length(t21)) %do% t21[i][[1]][[1]][!(t21[i][[1]][[1]] %in% stop_list)]\n  t3 <- foreach(i = 1:length(t22)) %do% paste((unlist(t22[i])), collapse = ' ') \n  t4 <- data.frame(matrix(t3)) #%>% dplyr::rename(words = !!names(.)[1])\n  return(c(t4, rest))\n}\n\n\n1\n\ntest <- word_preproc_tool(data, 71, 10) \nrest <- test[[2]]\nfromrest <- data.frame(words = c(\"fieldtrip\",\"r\", \"matlab\", \"fieldtrip\", \"adobe illustrator\", \"custom matlab\", \"custom matlab\", \"mne\" ))\n\nbase <- data.frame(matrix(test[[1]]))%>% dplyr::rename(words = !!names(.)[1])%>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'brain vision'), \"brain vision analyser\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'mne'), \"mne\", as.character(words))) %>%  rbind(., fromrest) %>% \n  mutate(words = ifelse(str_detect(words, 'ggplot'), \"ggplot\", as.character(words))) \n\nwords <- base %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq)) \n\nnarrow1 <- base %>% \n  mutate(words = ifelse(str_detect(words, 'matlab|bar.m|boundedline'), \"custom matlab\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'fieldtrip'), \"fieldtrip\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'eeglab'), \"EEGLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'erplab'), \"ERPLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'python|seaborn|matplotlib|plotly'), \"custom python\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'mne'), \"MNE\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'ggplot|\\\\br\\\\b'), \"custom r\", as.character(words))) %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq))\nnarrow1 %>% head()\n\n          words Freq\n1 custom matlab   45\n2           MNE   36\n3     fieldtrip   31\n4 custom python   27\n5        EEGLAB   26\n6        custom   16\n\n\n\n\n2\n\ntest <- word_preproc_tool(data, 82, 10) \nrest <- test[[2]]\nfromrest <- data.frame(words = c(\"fieldtrip\",\"r\", \"matlab\", \"fieldtrip\", \"adobe illustrator\", \"custom matlab\", \"custom matlab\", \"mne\" ))\n\nbase <- data.frame(matrix(test[[1]]))%>% dplyr::rename(words = !!names(.)[1])%>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'brain vision'), \"brain vision analyser\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'mne'), \"MNE\", as.character(words))) %>%  rbind(., fromrest) %>% \n  mutate(words = ifelse(str_detect(words, 'ggplot'), \"ggplot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'own|cusom'), \"custom\", as.character(words))) \n\nwords <- base %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq)) \n\nnarrow2 <- base %>% \n  mutate(words = ifelse(str_detect(words, 'matlab|bar.m|boundedline'), \"custom matlab\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'fieldtrip|fieldteip|field trip'), \"fieldtrip\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'eeglab'), \"EEGLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'erplab'), \"ERPLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'python|seaborn|matplotlib|plotly'), \"custom python\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'ggplot|\\\\br\\\\b'), \"custom r\", as.character(words))) %>% \n   mutate(words = ifelse(str_detect(words, 'cartool'), \"cartool\", as.character(words))) %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq))\nnarrow2 %>% head()\n\n          words Freq\n1 custom matlab   45\n2           MNE   35\n3     fieldtrip   31\n4 custom python   27\n5        EEGLAB   26\n6        custom   16"
  },
  {
    "objectID": "plot_breakdown.html#general-struggles-with-plots",
    "href": "plot_breakdown.html#general-struggles-with-plots",
    "title": "3.plot_breakdown",
    "section": "General struggles with plots",
    "text": "General struggles with plots\n\nword_preproc_tool_2 <- function(data, N, lim){\n  #lim = 10\n  tmp <- data %>% dplyr::select(N, N+1, N+2) %>% dplyr::rename(soft = !!names(.)[1], parts = !!names(.)[2], new_feature = !!names(.)[3]) %>% \n    filter(!is.na(soft)) %>% \n    mutate_at(vars(colnames(.)), funs(tolower(.))) %>% \n    mutate(soft = str_replace(soft, 'own', \"custom\"), \n           soft = str_replace(soft, '(matlab)', \"matlab\"), \n           soft = case_when(\n      str_detect(soft, 'brain vision') ~ \"brain vision analyser\",\n      #str_detect(soft, 'matlab|bar.m|boundedline') ~ \"custom matlab\",\n      str_detect(soft, 'mne') ~ \"mne\",\n      TRUE ~ as.character(soft)\n    ), \n    parts = case_when(\n      str_detect(parts, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(parts)\n    ),\n    new_feature = case_when(\n      str_detect(new_feature, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(new_feature)\n    )) %>% \n  \n    filter_at(vars(parts, new_feature), all_vars(!is.na(.))) %>% mutate(n = lengths(gregexpr(\"\\\\W+\", soft)) + 1) %>% \n    filter(parts != \"-\" | new_feature != \"-\", n < lim) %>%  dplyr::select(-4) %>% arrange(soft)\n  return(tmp)\n}\n\n\nstruggle1 <- word_preproc_tool_2(data, 71, 10) \n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\nstruggle1 %>% filter( parts != \"-\") %>% dplyr::select(parts) \n\n# A tibble: 91 × 1\n   parts                                                                        \n   <chr>                                                                        \n 1 \"plotting is easy. getting the relevant data to plot (conditions, channels, …\n 2 \"plot the intersecting axes at 0,0\"                                          \n 3 \"scaling\"                                                                    \n 4 \"compute the se interval requires having the sd stored or calling all partic…\n 5 \"shading for error\"                                                          \n 6 \"indicating significant differences (hotly debated esthetic issue)\\r\\nshadin…\n 7 \"sme\"                                                                        \n 8 \"error and baseline correction\"                                              \n 9 \"it was initially annoying to figure out how to get the legend only for the …\n10 \"first time understanding the code\"                                          \n# … with 81 more rows"
  },
  {
    "objectID": "exploration.html#time-of-finishing-survey-in-minutes",
    "href": "exploration.html#time-of-finishing-survey-in-minutes",
    "title": "exploration",
    "section": "Time of finishing survey in minutes",
    "text": "Time of finishing survey in minutes\n\nmedian(as.numeric(as.matrix(data[121]))) / 60\n\n[1] 14.3445"
  },
  {
    "objectID": "plot_breakdown.html#struggles-with-plots",
    "href": "plot_breakdown.html#struggles-with-plots",
    "title": "3.plot_breakdown",
    "section": "Struggles with plots",
    "text": "Struggles with plots\n\nvec <- names(data[ , grepl( \".*Which parts of*.\" , names(data))])\nwhich(names(data) %in% vec)\n\n[1]  72  83  88  93 100 105 110 115\n\n\n\nword_preproc_tool_2 <- function(data, N, lim){\n  #lim = 10\n  tmp <- data %>% dplyr::select(N, N+1, N+2) %>% dplyr::rename(soft = !!names(.)[1], parts = !!names(.)[2], new_feature = !!names(.)[3]) %>% \n    filter(!is.na(soft)) %>% \n    mutate_at(vars(colnames(.)), funs(tolower(.))) %>% \n    mutate(soft = str_replace(soft, 'own', \"custom\"), \n           soft = str_replace(soft, '(matlab)', \"matlab\"), \n           soft = case_when(\n      str_detect(soft, 'brain vision') ~ \"brain vision analyser\",\n      #str_detect(soft, 'matlab|bar.m|boundedline') ~ \"custom matlab\",\n      str_detect(soft, 'mne') ~ \"mne\",\n      TRUE ~ as.character(soft)\n    ), \n    parts = case_when(\n      str_detect(parts, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t|easy') ~ \"-\",\n      TRUE ~ as.character(parts)\n    ),\n    new_feature = case_when(\n      str_detect(new_feature, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(new_feature)\n    )) %>% \n  \n    filter_at(vars(parts, new_feature), all_vars(!is.na(.))) %>% mutate(n = lengths(gregexpr(\"\\\\W+\", soft)) + 1) %>% \n    filter(parts != \"-\" | new_feature != \"-\", n < lim) %>%  dplyr::select(-4) %>% arrange(soft)\n  return(tmp)\n}\n\n\n1\n\nstruggle1 <- word_preproc_tool_2(data, 71, 10) \nseparated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(soft, parts)\n\ntmp <- struggle1 %>% filter( parts != \"-\") %>% dplyr::select(soft, parts) %>% \n  filter(!row_number() %in% c(2, 11, 40, 41, 69, 78, 83, 87, 89, 91))  %>% \n  separate_rows(parts, sep = \"2\\\\)\", convert = FALSE) %>% \n  separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\", \n      grepl(\"\\\\b(axes|lable(s)?|label(s)?|legend|ticks)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(color(s)?|colour(s)?|proportion(s)?|publication|scal(e|ing))\\\\b\", parts) == TRUE ~ \"styling and color\", \n      grepl(\"\\\\b(preprocessing|extracting|datatype)\\\\b\", parts) == TRUE ~ \"preprocessing\", \n      grepl(\"\\\\b(syncronisation|organizing|groups)\\\\b\", parts) == TRUE ~ \"subplotting\", \n      grepl(\"\\\\b(mean|significan(t|ce)|permutations|combine)\\\\b\", parts) == TRUE ~ \"statistics\", \n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) #%>% View()\n\nn_rest <- mem_tab[4, 3] - nrow(tmp)\n\ntmp1 <- tmp  %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    91 \n    53.2 \n    53 \n  \n  \n    uncertainty \n    51 \n    29.8 \n    30 \n  \n  \n    plot components\n(axes, lables, legend) \n    12 \n    7.0 \n    7 \n  \n  \n    styling and color \n    7 \n    4.1 \n    4 \n  \n  \n    statistics \n    4 \n    2.3 \n    2 \n  \n  \n    preprocessing \n    3 \n    1.8 \n    2 \n  \n  \n    subplotting \n    3 \n    1.8 \n    2 \n  \n\n\n\n\n # words = ifelse(nchar(words)==0, NA, words),\n #  write.xlsx(., \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() +\n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\ntmp %>%  mutate(soft1 = case_when(\n      grepl(\"\\\\bmne\\\\w*\", soft) == TRUE ~ \"mne\", \n      grepl(\"\\\\bcustom\\\\b.*\\\\bmatlab\\\\b|\\\\bmatlab\\\\b.*\\\\bcustom\\\\b\", soft) == TRUE ~ \"custom matlab\",\n\n      TRUE ~ as.character(soft)\n      )) %>% dplyr::rename(initial = parts) %>% View()\n\n\n\n2\n\nstruggle2 <- word_preproc_tool_2(data, 82, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle2 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>%\n  filter(!row_number() %in% c(18, 31))  %>% \n  #separate_rows(parts, sep = \"2\\\\)\", convert = FALSE) %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\", \n      grepl(\"\\\\b(ax(is|es)?|lable(s)?|label(s)?|legend|ticks)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(color(s|ing)?|colour(s)?|proportion(s)?|publication|neg|scal(e|ing))\\\\b\", parts) == TRUE ~ \"styling and color\", \n      grepl(\"\\\\btopo\\\\w*\", parts) == TRUE ~ \"adding topography\", \n      grepl(\"\\\\b(channel(s)?|electrodes(s)?|interpretable|read|remembering)\\\\b\", parts) == TRUE ~ \"channel selection\\n(differentiation, identification)\"\n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) \n\nn_rest <- mem_tab[1, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    107 \n    76.4 \n    76 \n  \n  \n    styling and color \n    14 \n    10.0 \n    10 \n  \n  \n    channel selection\n(differentiation, identification) \n    11 \n    7.9 \n    8 \n  \n  \n    adding topography \n    5 \n    3.6 \n    4 \n  \n  \n    plot components\n(axes, lables, legend) \n    2 \n    1.4 \n    1 \n  \n  \n    uncertainty \n    1 \n    0.7 \n    1 \n  \n\n\n\n\n # words = ifelse(nchar(words)==0, NA, words),\n#write.xlsx(tmp, \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() +\n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n3\n\nstruggle3 <- word_preproc_tool_2(data, 87, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle3 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  filter(!row_number() %in% c(5, 7, 16, 18, 43, 50))  %>% \n  separate_rows(parts, sep = \";\", convert = FALSE) %>% filter(nchar(parts) != 0) %>%  \n  filter(!row_number() %in% c(59))  %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(head|headshape|montage|topographies)\\\\b\", parts) == TRUE ~ \"head shape and montage\",\n    grepl(\"\\\\b(time|threshold)\\\\b\", parts) == TRUE ~ \"time selection\",\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\",\n      grepl(\"\\\\b(channel(s)?|electrode(s)?|sensors|elec)\\\\b\", parts) == TRUE ~ \"channel selection\\n(differentiation, identification)\",\n      grepl(\"\\\\b(color(s|ing|bar|map)?|colour(s)?|proportion(s)?|publication|limits|neg|scal(e|ing|es))\\\\b\", parts) == TRUE ~ \"styling and color\", \n      grepl(\"\\\\b(ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|features|layout)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(mean|significan(t|ce)|permutations|p-value(s)?|smoothing|statistical|stats)\\\\b\", parts) == TRUE ~ \"statistics\",\n      grepl(\"\\\\b(interpolat(e|ion)?|edges)\\\\b\", parts) == TRUE ~ \"interpolation\",\n      \n     # grepl(\"\\\\btopo\\\\w*\", parts) == TRUE ~ \"adding topography\", \n     \n      )) %>% #filter(is.na(problems))  %>% View() \n\nfilter(nchar(parts) != 0) %>% filter(!is.na(problems)) \n\nn_rest <- mem_tab[6, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    106 \n    63.9 \n    64 \n  \n  \n    channel selection\n(differentiation, identification) \n    19 \n    11.4 \n    11 \n  \n  \n    styling and color \n    14 \n    8.4 \n    8 \n  \n  \n    head shape and montage \n    11 \n    6.6 \n    7 \n  \n  \n    time selection \n    6 \n    3.6 \n    4 \n  \n  \n    plot components\n(axes, lables, legend) \n    4 \n    2.4 \n    2 \n  \n  \n    interpolation \n    3 \n    1.8 \n    2 \n  \n  \n    statistics \n    3 \n    1.8 \n    2 \n  \n\n\n\n\n # words = ifelse(nchar(words)==0, NA, words),\n#write.xlsx(tmp, \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n4\n\nstruggle4 <- word_preproc_tool_2(data, 92, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle4 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  filter(!grepl(\"\\\\b(no|okay)\\\\b\", parts)) %>%\n  filter(!row_number() %in% c(17, 51, 12 ))  %>% \n  separate_rows(parts, sep = \";\", convert = FALSE) %>% \n#filter(!row_number() %in% c(59))  %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(head|headshape|montage|topographies|topoplots|shape)\\\\b\", parts) == TRUE ~ \"head shape and montage\",\n    grepl(\"\\\\b(time(s|course)?|threshold)\\\\b\", parts) == TRUE ~ \"time selection\",\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\",\n      grepl(\"\\\\b(channel(s)?|electrode(s)?|sensors|elec)\\\\b\", parts) == TRUE ~ \"channel selection\\n(differentiation, identification)\",\n      grepl(\"\\\\b(color(s|ing|bar|map)?|colour(s)?|proportion(s)?|publication|limits|neg|scal(e|ing|es))\\\\b\", parts) == TRUE ~ \"styling and color\", \n      grepl(\"\\\\b(ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|features|markers|layout|specifications)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(mean|significan(t|ce)|permutations|p-value(s)?|smoothing|statistical|stats|t-stat)\\\\b\", parts) == TRUE ~ \"statistics\",\n      grepl(\"\\\\b(interpolat(e|ion)?|edges)\\\\b\", parts) == TRUE ~ \"interpolation\",\n      TRUE ~ '_other'\n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) \n\nn_rest <- mem_tab[8, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    119 \n    70.4 \n    70 \n  \n  \n    time selection \n    23 \n    13.6 \n    14 \n  \n  \n    styling and color \n    11 \n    6.5 \n    7 \n  \n  \n    _other \n    5 \n    3.0 \n    3 \n  \n  \n    channel selection\n(differentiation, identification) \n    3 \n    1.8 \n    2 \n  \n  \n    head shape and montage \n    3 \n    1.8 \n    2 \n  \n  \n    plot components\n(axes, lables, legend) \n    3 \n    1.8 \n    2 \n  \n  \n    statistics \n    2 \n    1.2 \n    1 \n  \n\n\n\n\n # words = ifelse(nchar(words)==0, NA, words),\n#write.xlsx(tmp, \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n5\n\nstruggle5 <- word_preproc_tool_2(data, 99, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle5 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  #filter(!grepl(\"\\\\b(no|okay)\\\\b\", parts)) %>%\n  filter(!row_number() %in% c(33 ))  %>% \n  separate_rows(parts, sep = \";\", convert = FALSE) %>% #View()\n#filter(!row_number() %in% c(59))  %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(selecting|marking|spotting)\\\\b\", parts) == TRUE ~ \"channel selection\\n(differentiation, identification)\",\n    grepl(\"\\\\b(legible|readable|visible|small|datatype|shape|montage|subplots|size(s)?|channel(s)?|electrode(s)?|sensors)|scal(e|ing|es)|references\\\\b\", parts) == TRUE ~ \"legibility and scaling\",\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\",\n      grepl(\"\\\\b(color(s|ing|bar|map)?|colour(s)?|proportion(s)?|publication|limits|quality|scal(e|ing|es))\\\\b\", parts) == TRUE ~ \"publication quality and color\", \n      grepl(\"\\\\b(ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|edit|features|markers|layout|specifications)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(preprocessing|extracting|masks)\\\\b\", parts) == TRUE ~ \"preprocessing\", \n    \n      TRUE ~ '_other'\n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) #%>% View()\n\nn_rest <- mem_tab[7, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    101 \n    68.2 \n    68 \n  \n  \n    legibility and scaling \n    31 \n    20.9 \n    21 \n  \n  \n    publication quality and color \n    5 \n    3.4 \n    3 \n  \n  \n    plot components\n(axes, lables, legend) \n    4 \n    2.7 \n    3 \n  \n  \n    channel selection\n(differentiation, identification) \n    3 \n    2.0 \n    2 \n  \n  \n    preprocessing \n    2 \n    1.4 \n    1 \n  \n  \n    uncertainty \n    2 \n    1.4 \n    1 \n  \n\n\n\n\n # words = ifelse(nchar(words)==0, NA, words),\n#write.xlsx(tmp, \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n6\n\nstruggle6 <- word_preproc_tool_2(data, 104, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle6 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  filter(!grepl(\"\\\\b(x|ok)\\\\b\", parts)) %>% \n # filter(!row_number() %in% c(33 ))  %>% \n  separate_rows(parts, sep = \";\", convert = FALSE) %>% #View()\n#filter(!row_number() %in% c(59))  %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(sort(ing)?|max|correspondance)\\\\b\", parts) == TRUE ~ \"sorting\", \n    grepl(\"\\\\b(smoothing)\\\\b\", parts) == TRUE ~ \"smoothing\", \n    grepl(\"\\\\b(epochs|time)\\\\b\", parts) == TRUE ~ \"defining epochs\", \n    grepl(\"\\\\b(color|paper)\\\\b\", parts) == TRUE ~ \"style\", \n    \n      TRUE ~ '_other'\n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) #%>% View()\n\nn_rest <- mem_tab[7, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    133 \n    89.9 \n    90 \n  \n  \n    sorting \n    6 \n    4.1 \n    4 \n  \n  \n    smoothing \n    3 \n    2.0 \n    2 \n  \n  \n    _other \n    2 \n    1.4 \n    1 \n  \n  \n    defining epochs \n    2 \n    1.4 \n    1 \n  \n  \n    style \n    2 \n    1.4 \n    1 \n  \n\n\n\n\n # words = ifelse(nchar(words)==0, NA, words),\n#write.xlsx(tmp, \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n8\n\nstruggle8 <- word_preproc_tool_2(data, 114, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle8 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  filter(!grepl(\"\\\\b(n|x|ok|dont)\\\\b\", parts)) %>% \n # filter(!row_number() %in% c(33 ))  %>% \n  #separate_rows(parts, sep = \";\", convert = FALSE) %>% #View()\n#filter(!row_number() %in% c(59))  %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(sort(ing)?|order(ing)?|organisation)\\\\b\", parts) == TRUE ~ \"order and sorting\", \n   # grepl(\"\\\\b(smoothing)\\\\b\", parts) == TRUE ~ \"smoothing\", \n    #grepl(\"\\\\b(epochs|time)\\\\b\", parts) == TRUE ~ \"defining epochs\", \n    grepl(\"\\\\b(color(bar)?|paper)\\\\b\", parts) == TRUE ~ \"style\", \n    \n      TRUE ~ '_other'\n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) \n\nn_rest <- mem_tab[2, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    87 \n    88.8 \n    89 \n  \n  \n    order and sorting \n    5 \n    5.1 \n    5 \n  \n  \n    _other \n    3 \n    3.1 \n    3 \n  \n  \n    style \n    3 \n    3.1 \n    3 \n  \n\n\n\n\n # words = ifelse(nchar(words)==0, NA, words),\n#write.xlsx(tmp, \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")"
  },
  {
    "objectID": "plot_breakdown.html#new-features",
    "href": "plot_breakdown.html#new-features",
    "title": "3.plot_breakdown",
    "section": "New features",
    "text": "New features"
  },
  {
    "objectID": "plot_breakdown.html#word_preproc",
    "href": "plot_breakdown.html#word_preproc",
    "title": "3.plot_breakdown",
    "section": "word_preproc",
    "text": "word_preproc\n\nword_preproc <- function(data, N){\n # N = 69\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"like\", \"s\", \"plot\", \"plots\")\n  tmp <- data %>% filter(!is.na(.[[N]])) %>% select(., N) %>% \n    dplyr::rename(words = !!names(.)[1]) %>% mutate(words = tolower(words)) %>% \n    mutate(words_prep = str_split(words, \"\\\\s+\")) %>%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \"))) %>% \n    mutate(words_prep = stri_replace_all_regex(words_prep,\n                                  pattern=c(\" \\\\(.*\", \", or.*\", \" across.*\", \" with.*\", \" at.*\", \" by.*\", \" over.*\", #\" of.*\", \n                                            \" for.*\", \" per.*\", \" across.*\", \" accross.*\", \" between.*\"),\n                                  replacement=c(''),\n                                  vectorize=FALSE)) %>% \n    mutate(words_prep = str_split(words_prep, \"\\\\s+\")) %>%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \")))\n     \n  return(tmp)\n}"
  },
  {
    "objectID": "connections.html#number-of-used-software",
    "href": "connections.html#number-of-used-software",
    "title": "Linear models",
    "section": "Number of used software",
    "text": "Number of used software\n\nand years of experience\n\n\nShow the code\nvec <- names(data[25:50]) %>% str_split_i(., \"\\\\? \\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:50] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) \n\n\n  \nny <- cbind(data.frame(rowSums(software)), data[20]) %>% \n   rename_at(vars(colnames(.)), ~ c(\"n_soft\", \"years\")) %>% filter(years < 50, n_soft != 0)  %>% data.frame()\n\nny %>% \n  lm(data=., n_soft ~ years) %>% summary(.)\n\n\n\nCall:\nlm(formula = n_soft ~ years, data = .)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.0538 -1.2453 -0.2453  0.8452  7.3026 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  2.34098    0.21896   10.69  < 2e-16 ***\nyears        0.09043    0.02307    3.92 0.000125 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.754 on 181 degrees of freedom\nMultiple R-squared:  0.07827,   Adjusted R-squared:  0.07317 \nF-statistic: 15.37 on 1 and 181 DF,  p-value: 0.0001253\n\n\nShow the code\nny %>% ggplot(., aes(x=n_soft, y=years)) + geom_jitter() + geom_smooth()\n\n\n\n\n\n\n\nand self assessment\n\n\nShow the code\nmerge(data.frame(rowSums(software)), data[21]) %>% \n   rename_at(vars(colnames(.)), ~ c(\"n_soft\", \"selfass\")) %>% \n  #lm(data=., n_soft ~ selfass) %>% summary(.)\n  ggplot(., aes(y=n_soft, x=selfass)) + geom_violin()"
  },
  {
    "objectID": "plot_breakdown.html#the-most-common-names-for-each-plot",
    "href": "plot_breakdown.html#the-most-common-names-for-each-plot",
    "title": "3.plot_breakdown",
    "section": "The most common names for each plot",
    "text": "The most common names for each plot\n\n1\n\nn1 <- word_preproc(data, 69)  %>%\n   mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\baverage(d)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\baverage(d)?\\\\b\", words_prep) == TRUE ~ \"averaged erp\",\n      grepl(\"\\\\bwave(form|forms)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\bwave(form|forms)?\\\\b\", words_prep) == TRUE ~ \"erp wave(form)s\",\n      grepl(\"\\\\btime(course|series|domain)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\btime(course|series|domain)?\\\\b\", words_prep) == TRUE ~ \"erp timecourse (timeseries)\",\n      grepl(\"\\\\b(erp(s)?|ep|related)\\\\b\", words) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(time|timeseries)\\\\b\", words) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(response(s)?)\\\\b\", words) == TRUE ~ \"response\",\n      grepl(\"\\\\b(line|boundedline)\\\\b\", words) == TRUE ~ \"line\",\n      grepl(\"\\\\b(single|singleplot)\\\\b\", words) == TRUE ~ \"single\",\n      grepl(\"\\\\b(waveform(s)?)\\\\b\", words) == TRUE ~ \"waveform\",\n       grepl(\"\\\\b(p300)\\\\b\", words) == TRUE ~ \"p300\",\n      grepl(\"\\\\b(average)\\\\b\", words) == TRUE ~ \"average\",\n      TRUE ~ '_other'\n      ))  %>%# filter(type == \"erp\") %>%  #View()\n   filter(!is.na(type), type != \"bad\") %>% dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq))  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Line plot\", \"n\")) \nn1 \n\n                     Line plot  n\n1                          erp 74\n2                 averaged erp 30\n3                       _other 13\n4  erp timecourse (timeseries) 12\n5              erp wave(form)s 12\n6                  time series  9\n7                      average  5\n8                       single  5\n9                         line  4\n10                    response  4\n11                        p300  2\n12                    waveform  2\n\n\n\n\n2\n\nn2 <- word_preproc(data, 80)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(butterfly|bitterfly|buterfly|buttefly)\\\\b\", words_prep) == TRUE ~ \"butterfly\",\n      grepl(\"\\\\b(spaghetti)\\\\b\", words_prep) == TRUE ~ \"spaghetti\",\n      grepl(\"\\\\b(time|timeseries|timecourse)\\\\b\", words_prep) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(channel|single|singleplot|individual)\\\\b\", words_prep)  == TRUE ~ \"single or individual channel erp\",\n      grepl(\"\\\\b(channels|multichannel|multeple|multiple|multi|all|muti|electrodes)\\\\b\", words_prep)  == TRUE ~ \"multichannel/electrode erp\",\n      grepl(\"\\\\b(evoked)\\\\b\", words_prep)  == TRUE ~ \"evoked responces\",\n      grepl(\"\\\\b(erp(s)?|eprs|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      TRUE ~ '_other'\n      )) %>% #filter(type == \"single or individual channel erp\") %>%  #View()\n  filter(!is.na(type), type != \"bad\") %>%\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq))  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Butterfly_plot\", \"n\")) \nn2\n\n                    Butterfly_plot  n\n1                        butterfly 69\n2 single or individual channel erp 19\n3                              erp 15\n4       multichannel/electrode erp 15\n5                      time series 10\n6                           _other  7\n7                 evoked responces  3\n8                        spaghetti  2\n\n\n\n\n3\n\nn3 <- word_preproc(data, 85)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(topo|topoplot(s)?)\\\\b\", words_prep) == TRUE ~ \"topo(plot)\", \n      grepl(\"\\\\b(topomap|topomape)\\\\b\", words_prep) == TRUE ~ \"topomap\",\n      grepl(\"\\\\b(topograph(y|ic|ical|ies)|topgraphy|topograbphy)\\\\b\", words_prep) == TRUE ~ \"topography\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(map)\\\\b\", words_prep) == TRUE ~ \"scalp map\",\n      grepl(\"\\\\b(distribution)\\\\b\", words_prep) == TRUE ~ \"scalp distribution\",\n      TRUE ~ '_other'\n      )) %>% \n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq))  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Topoplot\", \"n\")) \nn3\n\n            Topoplot  n\n1         topography 68\n2         topo(plot) 63\n3            topomap 13\n4             _other  8\n5          scalp map  7\n6 scalp distribution  5\n7            heatmap  3\n\n\n\n\n4\n\nn4 <- word_preproc(data, 90)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|\\\\?|unclear)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\btime(course)?\\\\b|\\\\btime(course)?\\\\b.*\\\\btopo(plot|plots)?|timetopoplot\\\\b\", words_prep) == TRUE ~ \"time topo\",\n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\bseries\\\\b|\\\\bseries\\\\b.*\\\\btopo(plot|plots)?\\\\b\", words_prep) == TRUE ~ \"topo series\",\n      grepl(\"\\\\b(topo(s)?|topoplot(s)?)\\\\b\", words_prep) == TRUE ~ \"topo\", \n      grepl(\"\\\\b(topomap(s|e)|topomap)\\\\b\", words_prep) == TRUE ~ \"topomap\",\n      grepl(\"\\\\btopograph(y|ic|ical|ies)\\\\b.*\\\\bmap(s)?\\\\b|\\\\bmap(s)?\\\\b.*\\\\btopograph(y|ic|ical|ies)\\\\b\", words_prep) == TRUE ~ \"topographical map\",\n      grepl(\"\\\\btopograph(y|ic|ical|ies)\\\\b.*\\\\btime\\\\b|\\\\btime\\\\b.*\\\\btopograph(y|ic|ical|ies)\\\\b\", words_prep) == TRUE ~ \"time topography\",\n      grepl(\"\\\\b(topograph(y|ic|ical|ies)|topgraphy|topograhy|topograbphy|topgraphies)\\\\b\", words_prep) == TRUE ~ \"topography\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(map(s)?)\\\\b\", words_prep) == TRUE ~ \"scalp map\",\n      grepl(\"\\\\b(time(series)?|serie(s)?)\\\\b\", words_prep) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(distribution)\\\\b\", words_prep) == TRUE ~ \"scalp distribution\",\n      TRUE ~ '_other'\n      )) %>%  #View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Topo map\", \"n\")) \nn4\n\n             Topo map  n\n1                topo 39\n2          topography 36\n3           time topo 24\n4             topomap 13\n5     time topography 12\n6   topographical map  9\n7           scalp map  8\n8              _other  6\n9         topo series  6\n10        time series  5\n11            heatmap  3\n12 scalp distribution  3\n\n\n\n\n5\n\nn5 <- word_preproc(data, 97)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|\\\\?|unclear|-|ugly|don't|useless)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\btopograph(y|ic|ical|ies)?|toprgraphic\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\btopograph(y|ic|ical|ies)?|toprgraphic\\\\b\", words_prep) == TRUE ~ \"topographic erp\",\n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\btopo(plot|plots)?\\\\b\", words_prep) == TRUE ~ \"topo erp\",\n      grepl(\"\\\\b(erp(s)?|eprs|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(multi(plot|channel|ploter|ploterp)|multi)\\\\b\", words_prep) == TRUE ~ \"multi or multichannel plot\",\n      grepl(\"\\\\b(topo(s)?|topoplot(s)?)\\\\b\", words_prep) == TRUE ~ \"topo\", \n      grepl(\"\\\\b(topograph(y|ic|ical|ies)?|topgraphy|topograhy|topograbphy|topgraphies)\\\\b\", words_prep) == TRUE ~ \"topography\",\n      grepl(\"\\\\b(channel(s|plot)?)\\\\b\", words_prep) == TRUE ~ \"channel\",\n      grepl(\"\\\\b(time(series)?|serie(s)?)\\\\b\", words_prep) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(scalp)\\\\b\", words_prep) == TRUE ~ \"scalp\",\n      TRUE ~ '_other'\n      )) %>% #filter(type==\"erp\") %>% View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Topo array\", \"n\")) \nn5\n\n                  Topo array  n\n1                        erp 54\n2            topographic erp 29\n3 multi or multichannel plot 17\n4                     _other  9\n5                    channel  6\n6                   topo erp  5\n7                      scalp  4\n8                       topo  4\n9                time series  2\n\n\n\n\n6\n\nn6 <- word_preproc(data, 102)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\\\?|\\\\?\\\\?|unclear|-|ugly|don't|x|useless)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\bimage\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\bimage|erpimage|image\\\\b\", words_prep) == TRUE ~ \"erp image\",\n      grepl(\"\\\\bimage\\\\b.*\\\\bepoch(s)?\\\\b|\\\\bepoch(s)?\\\\b.*\\\\bimage\\\\b\", words_prep) == TRUE ~ \"epoch image\",\n      grepl(\"\\\\b(raster(plot)?)\\\\b\", words_prep) == TRUE ~ \"raster\",\n      grepl(\"\\\\b(waterfall)\\\\b\", words_prep) == TRUE ~ \"waterfall\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(sort(ed)?)\\\\b\", words_prep) == TRUE ~ \"sorted trials\",\n      grepl(\"\\\\b(erp(s)?|eprs|ersp|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(voltage)\\\\b\", words_prep) == TRUE ~ \"voltage\",\n      grepl(\"\\\\b(time(series)?|serie(s)?)\\\\b\", words_prep) == TRUE ~ \"time series or frequencies\",\n      grepl(\"\\\\b(trial(s|wise)?|trialplot)\\\\b\", words_prep) == TRUE ~ \"trial or trial variations\",\n      TRUE ~ '_other'\n      )) %>% #View()\n  dplyr::select(type) %>%  table(.) %>%  \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"ERP image\", \"n\")) \nn6\n\n                    ERP image  n\n1                   erp image 30\n2                         erp 12\n3                      _other  9\n4               sorted trials  9\n5   trial or trial variations  7\n6                     heatmap  6\n7                      raster  5\n8  time series or frequencies  4\n9                     voltage  3\n10                  waterfall  2\n\n\n\n\n7\n\nn7 <- word_preproc(data, 107)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\\\?|\\\\?\\\\?|unclear|-|ugly|don't|x|useless)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(amplitude(s)?)\\\\b\", words_prep) == TRUE ~ \"amplitudes\",\n      TRUE ~ '_other'\n      )) %>% #View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Parallel plot\", \"n\")) \nn7\n\n  Parallel plot n\n1    amplitudes 4\n\n\n\n\n8\n\nn8 <- word_preproc(data, 112)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|normal|\\\\?|\\\\?\\\\?|unclear|recall|-|ugly|don't|x|useless|nan|clear)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\bimage\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\bimage|erpimage\\\\b\", words_prep) == TRUE ~ \"erp image\",\n      grepl(\"\\\\bimage\\\\b.*\\\\bchannel\\\\b|\\\\bchannel\\\\b.*\\\\bimage|chanimage|imagesc\\\\b\", words_prep) == TRUE ~ \"channel image\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(image)\\\\b\", words_prep) == TRUE ~ \"image\",\n      grepl(\"\\\\b(raster(plot)?|custer)\\\\b\", words_prep) == TRUE ~ \"raster\",\n      grepl(\"\\\\b(matrix)\\\\b\", words_prep) == TRUE ~ \"matrix\",\n      grepl(\"\\\\b(channel(s|wise)?)\\\\b\", words_prep) == TRUE ~ \"channels\",\n      grepl(\"\\\\b(erp(s)?|eprs|ersp|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(voltage)\\\\b\", words_prep) == TRUE ~ \"voltage\",\n     # TRUE ~ '_other'\n      )) %>% #View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"Channel_image\", \"n\")) \n\nn8\n\n  Channel_image  n\n1      channels 10\n2           erp  9\n3       heatmap  8\n4     erp image  7\n5       voltage  6\n6         image  5\n7        raster  5\n8        matrix  4\n9 channel image  3\n\nn8 %>% ggplot(data = ., aes(y = reorder(Channel_image, n),  x= n, fill = Channel_image)) +\n    geom_bar(stat=\"identity\") + ylab(\"Channel plot\") +\n    geom_text(aes(label = n), \n    hjust = -0.2) + theme_classic() + theme(legend.position=\"none\")\n\n\n\n\n\n\nCombined\n\nlist(n1, n2, n3, n4, n5, n6, n8) %>% kable(.) %>% kable_styling(\"striped\", position = \"center\",) \n\n\n\n\n  \n    \n\n\n \n  \n    Line plot \n    n \n  \n \n\n  \n    erp \n    74 \n  \n  \n    averaged erp \n    30 \n  \n  \n    _other \n    13 \n  \n  \n    erp timecourse (timeseries) \n    12 \n  \n  \n    erp wave(form)s \n    12 \n  \n  \n    time series \n    9 \n  \n  \n    average \n    5 \n  \n  \n    single \n    5 \n  \n  \n    line \n    4 \n  \n  \n    response \n    4 \n  \n  \n    p300 \n    2 \n  \n  \n    waveform \n    2 \n  \n\n\n\n \n    \n\n\n \n  \n    Butterfly_plot \n    n \n  \n \n\n  \n    butterfly \n    69 \n  \n  \n    single or individual channel erp \n    19 \n  \n  \n    erp \n    15 \n  \n  \n    multichannel/electrode erp \n    15 \n  \n  \n    time series \n    10 \n  \n  \n    _other \n    7 \n  \n  \n    evoked responces \n    3 \n  \n  \n    spaghetti \n    2 \n  \n\n\n\n \n    \n\n\n \n  \n    Topoplot \n    n \n  \n \n\n  \n    topography \n    68 \n  \n  \n    topo(plot) \n    63 \n  \n  \n    topomap \n    13 \n  \n  \n    _other \n    8 \n  \n  \n    scalp map \n    7 \n  \n  \n    scalp distribution \n    5 \n  \n  \n    heatmap \n    3 \n  \n\n\n\n \n    \n\n\n \n  \n    Topo map \n    n \n  \n \n\n  \n    topo \n    39 \n  \n  \n    topography \n    36 \n  \n  \n    time topo \n    24 \n  \n  \n    topomap \n    13 \n  \n  \n    time topography \n    12 \n  \n  \n    topographical map \n    9 \n  \n  \n    scalp map \n    8 \n  \n  \n    _other \n    6 \n  \n  \n    topo series \n    6 \n  \n  \n    time series \n    5 \n  \n  \n    heatmap \n    3 \n  \n  \n    scalp distribution \n    3 \n  \n\n\n\n \n    \n\n\n \n  \n    Topo array \n    n \n  \n \n\n  \n    erp \n    54 \n  \n  \n    topographic erp \n    29 \n  \n  \n    multi or multichannel plot \n    17 \n  \n  \n    _other \n    9 \n  \n  \n    channel \n    6 \n  \n  \n    topo erp \n    5 \n  \n  \n    scalp \n    4 \n  \n  \n    topo \n    4 \n  \n  \n    time series \n    2 \n  \n\n\n\n \n    \n\n\n \n  \n    ERP image \n    n \n  \n \n\n  \n    erp image \n    30 \n  \n  \n    erp \n    12 \n  \n  \n    _other \n    9 \n  \n  \n    sorted trials \n    9 \n  \n  \n    trial or trial variations \n    7 \n  \n  \n    heatmap \n    6 \n  \n  \n    raster \n    5 \n  \n  \n    time series or frequencies \n    4 \n  \n  \n    voltage \n    3 \n  \n  \n    waterfall \n    2 \n  \n\n\n\n \n    \n\n\n \n  \n    Channel_image \n    n \n  \n \n\n  \n    channels \n    10 \n  \n  \n    erp \n    9 \n  \n  \n    heatmap \n    8 \n  \n  \n    erp image \n    7 \n  \n  \n    voltage \n    6 \n  \n  \n    image \n    5 \n  \n  \n    raster \n    5 \n  \n  \n    matrix \n    4 \n  \n  \n    channel image \n    3"
  },
  {
    "objectID": "exploration.html#channels",
    "href": "exploration.html#channels",
    "title": "exploration",
    "section": "Channels",
    "text": "Channels\nHow many channels do you typically measure?\n\ndata %>% ggplot(data = ., aes_(as.name(names(data)[23]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30)) +\n    labs(x =\"How many channels do you typically measure?\") + theme_classic()\n\n\n\n\nHow many channels do you typically measure?\n\ndata %>% filter(.[[24]] < 500) %>% ggplot(data = ., aes_(as.name(names(data)[24]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30))+\n    labs(x =\"How many channels of those you measured do you typically analyse?\") + theme_classic()\n\n\n\n# plots should be combined"
  },
  {
    "objectID": "sample_bio.html",
    "href": "sample_bio.html",
    "title": "Sample bio",
    "section": "",
    "text": "Show the code\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method"
  },
  {
    "objectID": "sample_bio.html#bio-stats",
    "href": "sample_bio.html#bio-stats",
    "title": "Sample bio",
    "section": "Bio stats",
    "text": "Bio stats\n\nCountry\n\ndata.frame(table(data[8]))  %>% dplyr::rename(country_work = !!names(.)[1]) %>%\n  mutate(country_work = ifelse(Freq >= 3, as.character(country_work), \"_Others\")) %>% group_by(country_work) %>% \n  dplyr::summarise(Freq = sum(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(country_work, Freq),  x= Freq, fill = country_work)) +\n    geom_bar(stat=\"identity\") + labs(x=\"Count\", y=\"Country of work of survey participant\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2) + theme_classic() + \n  theme(legend.position=\"none\", axis.text.y = element_text(size = 14))\n\n\n\n\n\n\nField\n\nfield <- as.data.frame(table(data[9])) %>% arrange(desc(Freq)) %>% head(3)\nfield$Freq[1] <- field$Freq[1] + 1 # from Others\nfield$Freq[2] <- field$Freq[2] + 1\nfield$Freq[3] <- field$Freq[3] + 1\nfield %>% dplyr::rename(area = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = reorder(area, Freq),  y= Freq, fill = area)) +\n    geom_bar(stat=\"identity\") + labs(x=\"Field of research\", y=\"Count\") +\n    geom_text(aes(label = Freq), \n    vjust = -0.2) + theme_classic() + \n  theme(legend.position=\"none\", axis.text.x = element_text(size = 12))\n\n\n\n\n\n\nTopic\n\nt <- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt <- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\n\narea <- data.frame(matrix(tt)) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), \"affective neuroscience\", words)) %>%  \n  #mutate(words =ifelse(str_detect(.[[1]], 'spatial'), \"spatial\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'memory'), \"memory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), \"auditory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognition|consciousness|meditation|cognitive control|self|executive functions'), \"cognitive control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), \"deep brain stimulation\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), \"decision making\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), \"ageing\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'social'), \"social cognition\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), \"olfaction\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), \"language and speech\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'bci'), \"bci\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), \"sleep\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), \"time\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|perception'), \"attention and perception\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'vis'), \"vision\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development'), \"development\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), \"motor control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), \"mental disorders\", words)) %>%   \n  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), \"dsp\", words))\n\n   \narea %>% group_by(words) %>% dplyr::summarise(Freq = n()) %>% \n  data.frame(.)  %>% mutate(words = as.character(words)) %>%  #arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(words, Freq),  x= Freq, fill = words)) +\n    geom_bar(stat=\"identity\") + labs(x=\"Topic of research\", y=\"Frequency\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2) + theme_classic() + theme(legend.position=\"none\")\n\n\n\n\n\n\nMethod\n\nmethod <- data[14:17]\nch <- colnames(method)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\? \\\\[\", 2) \ncolnames(method) <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd <- data.frame(rowSums(t(data.frame(foreach(i = colnames(method)) %do% ifelse(method[i]==\"Yes\", 1, 0))))) \nd <- tibble::rownames_to_column(d, \"plots\") \ncolnames(d) <- c(\"method\", \"sum_scores\")\nd %>% arrange(desc(sum_scores)) %>% \n    ggplot(., aes(x = reorder(method, sum_scores), y = sum_scores, fill = method)) +\n    geom_col(stat = \"identity\") + labs(x = \"Method\", y = \"Value\", fill = \"Method\") +\n    theme_classic() + theme(legend.position=\"none\")\n\nWarning in geom_col(stat = \"identity\"): Ignoring unknown parameters: `stat`\n\n\n\n\n\n\n\nExperience\nPapers\n\ndata[19] %>% dplyr::rename(papers = !!names(.)[1]) %>% filter(papers < 100) %>%  ggplot(data = ., aes(papers)) +\n  geom_histogram() +\n  labs(x =\"How many published papers/preprints do you have, where you used EEG, MEG or iEEG analysis?\") + theme_classic()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n# PCA for clustering it \n\nPosition\n\n#na.omit(data[13]) # recode Others\nas.data.frame(table(na.omit(data[12]))) %>% dplyr::rename(position = !!names(.)[1]) %>%\n  arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(position, Freq),  x= Freq, fill = position)) +\n    geom_bar(stat=\"identity\") + ylab(\"Position\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2) + theme_classic() + theme(legend.position=\"none\")\n\n\n\n\nYears\n\ndata %>% filter(.[[20]] < 50) %>% ggplot(data = ., aes_(as.name(names(data)[20]))) +\n  geom_histogram(bins = 45) +  scale_x_continuous(breaks=seq(0, 30, 5)) +\n  labs(x =\"Years of experience with EEG, MEG, or iEEG analysis\", y=\"Count\") +\n  theme_classic() + theme(legend.position=\"none\", axis.text.x = element_text(size = 12)) \n\nWarning: `aes_()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`\n\n\n\n\n\nSelf-assessed level\n\ntable(data[21]) %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = level, y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Self-assessed level\") +\n    geom_text(aes(label = Freq), vjust = -0.2) + theme_classic() +\n  theme(legend.position=\"none\", axis.text.x = element_text(size = 12)) +\n    scale_x_discrete(limits = c(\"Beginner\", \"Intermediate\", \"Expert\")) +\n  labs(y=\"Count\") \n\n\n\n\nCode contribution\n\ntable(data[22])  %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = reorder(level, Freq),  y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Code contribution\") +\n    geom_text(aes(label = Freq), vjust = -0.2)  + theme_classic() + theme(legend.position=\"none\")"
  },
  {
    "objectID": "sample_bio.html#country",
    "href": "sample_bio.html#country",
    "title": "Sample bio",
    "section": "Country",
    "text": "Country\n\n\nShow the code\ndata.frame(table(data[8]))  %>% dplyr::rename(country_work = !!names(.)[1]) %>%\n  mutate(country_work = ifelse(Freq >= 3, as.character(country_work), \"_Others\")) %>% group_by(country_work) %>% \n  dplyr::summarise(Freq = sum(Freq)) %>% \n  mutate(percent_score = round(Freq / sum(Freq) * 100)) %>% \n    ggplot(data = ., aes(y = reorder(country_work, percent_score),  x= percent_score, fill = country_work)) +\n    geom_bar(stat=\"identity\") + labs(x=\"Count\", y=\"Country of work of survey participant\") +\n         geom_text(aes(label = paste0(percent_score, \"%\")), \n            position = position_stack(vjust = 0.5), size = 5)  + theme_classic()  + theme_classic() + \n  theme(legend.position=\"none\", axis.text.y = element_text(size = 14))"
  },
  {
    "objectID": "sample_bio.html#field",
    "href": "sample_bio.html#field",
    "title": "Sample bio",
    "section": "Field",
    "text": "Field\n\n\nShow the code\nfield <- as.data.frame(table(data[9])) %>% arrange(desc(Freq)) %>% head(3)\nfield$Freq[1] <- field$Freq[1] + 1 # from Others\nfield$Freq[2] <- field$Freq[2] + 1\nfield$Freq[3] <- field$Freq[3] + 1\nfield %>% dplyr::rename(area = !!names(.)[1]) %>%\n  mutate(percent_score = round(Freq / sum(Freq) * 100)) %>% \n    ggplot(data = ., aes(x = reorder(area, percent_score),  y= percent_score, fill = area)) +\n    geom_bar(stat=\"identity\") + labs(x=\"Field of research\", y=\"Count\") +\n     geom_text(aes(label = paste0(percent_score, \"%\")), \n            position = position_stack(vjust = 0.5), size = 6)  + theme_classic() + \n  theme(legend.position=\"none\", axis.text.x = element_text(size = 12))"
  },
  {
    "objectID": "sample_bio.html#topic",
    "href": "sample_bio.html#topic",
    "title": "Sample bio",
    "section": "Topic",
    "text": "Topic\n\n\nShow the code\nt <- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt <- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\n\narea <- data.frame(matrix(tt)) %>% dplyr::rename(words = !!names(.)[1]) %>%\n   mutate(words2 = case_when(\n    grepl(\"\\\\bmemory\\\\b\", words) == TRUE ~ \"memory\", \n    grepl(\"\\\\b(empathy|emot\\\\w*|affective|social)\\\\b\", words) == TRUE ~ \"affective neuroscience\", \n    grepl(\"\\\\b(cognitive load|selective attention|attention|cognition|consciousness|meditation|cognitive control|self|executive functions)\\\\b\", words) == TRUE ~ \"cognitive control and attention\", \n    grepl(\"\\\\b(hearing|audi\\\\w*)\\\\b\", words) == TRUE ~ \"auditory\",\n    grepl(\"\\\\b(decision|reward)\\\\b\", words) == TRUE ~ \"decision making\",\n    grepl(\"\\\\b(ageing|aging)\\\\b\", words) == TRUE ~ \"ageing\",\n    grepl('\\\\bolfac\\\\w*', words) ~ 'olfaction',\n    grepl('\\\\b(communication|language|speech|biling\\\\w*|english)\\\\b', words) ~ 'language and speech',\n    grepl('\\\\bbci\\\\b', words) ~ 'bci',\n    grepl('\\\\bsleep\\\\b', words) ~ 'sleep',\n    grepl('\\\\b(timing|time|temporal)\\\\b', words) ~ 'time',\n    grepl('\\\\bperception\\\\b', words) ~ 'perception',\n    grepl('\\\\bvis\\\\w*', words) ~ 'vision',\n    grepl('\\\\b(development\\\\w*|ageing)\\\\b', words) ~ 'development',\n    grepl('\\\\b(spatial|brain body|motor|motion)\\\\b', words) ~ 'motor control',\n    grepl('\\\\b(diagnostics|disorder(s)?|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology|pain|dbs|stimulation)\\\\b', words) ~ 'mental disorders',\n    grepl('\\\\b(signal|potentials|method\\\\w*|sdf|ieeg|computational)\\\\b', words) ~ 'methodology',\n    grepl('\\\\b(olfaction|vision|auditory)\\\\b', words) ~ 'development',\n    ))\n   \narea %>% group_by(words2) %>% dplyr::summarise(Freq = n()) %>% \n  data.frame(.)  %>% mutate(words2 = as.character(words2)) %>%  #arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(words2, Freq),  x= Freq, fill = words2)) +\n    geom_bar(stat=\"identity\") + labs(x=\"Topic of research\", y=\"Frequency\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2) + theme_classic() + theme(legend.position=\"none\")"
  },
  {
    "objectID": "sample_bio.html#method",
    "href": "sample_bio.html#method",
    "title": "Sample bio",
    "section": "Method",
    "text": "Method\n\n\nShow the code\nmethod <- data[14:17]\nch <- colnames(method)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\? \\\\[\", 2) \ncolnames(method) <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd <- data.frame(rowSums(t(data.frame(foreach(i = colnames(method)) %do% ifelse(method[i]==\"Yes\", 1, 0))))) \nd <- tibble::rownames_to_column(d, \"plots\") \ncolnames(d) <- c(\"method\", \"sum_scores\")\nd %>% arrange(desc(sum_scores)) %>% \n    ggplot(., aes(x = reorder(method, sum_scores), y = sum_scores, fill = method)) +\n    geom_col(stat = \"identity\") + labs(x = \"Method\", y = \"Value\", fill = \"Method\") +\n    theme_classic() + theme(legend.position=\"none\") + \n  geom_text(aes(label = sum_scores), vjust = -0.2)"
  },
  {
    "objectID": "sample_bio.html#experience",
    "href": "sample_bio.html#experience",
    "title": "Sample bio",
    "section": "Experience",
    "text": "Experience\n\nPapers\n\n\nShow the code\ndata[19] %>% dplyr::rename(papers = !!names(.)[1]) %>% filter(papers < 100) %>%  ggplot(data = ., aes(papers)) +\n  geom_histogram() +\n  labs(x =\"How many published papers/preprints do you have, where you used EEG, MEG or iEEG analysis?\") + theme_classic()\n\n\n\n\n\nShow the code\n# PCA for clustering it \n\n\n\n\nShow the code\ndata[19] %>% dplyr::rename(papers = !!names(.)[1]) %>% filter(papers < 100) %>% summarise(median_paper = median(papers))\n\n\n  median_paper\n1            3\n\n\n\n\nPosition\n\n\nShow the code\n#na.omit(data[13]) # recode Others\nas.data.frame(table(na.omit(data[12]))) %>% dplyr::rename(position = !!names(.)[1]) %>%\n  arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(position, Freq),  x= Freq, fill = position)) +\n    geom_bar(stat=\"identity\") + ylab(\"Position\") +\n    geom_text(aes(label = Freq), hjust = -0.2) + \n  theme_classic() + theme(legend.position=\"none\")\n\n\n\n\n\n\n\nYears\n\n\nShow the code\ndata %>% filter(.[[20]] < 50) %>% ggplot(data = ., aes_(as.name(names(data)[20]))) +\n  geom_histogram(bins = 45) +  scale_x_continuous(breaks=seq(0, 30, 5)) +\n  labs(x =\"Years of experience with EEG, MEG, or iEEG analysis\", y=\"Count\") +\n  theme_classic() + theme(legend.position=\"none\", axis.text.x = element_text(size = 12)) \n\n\n\n\n\n\n\nShow the code\ndata %>% filter(.[[20]] < 50) %>% summarise(median_year = median(.[[20]]))\n\n\n  median_year\n1           6\n\n\n\n\nSelf-assessed level\n\n\nShow the code\ntable(data[21]) %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    mutate(percent_score = round(Freq / sum(Freq) * 100)) %>% \n    ggplot(data = ., aes(x = level, y= percent_score, fill = level)) +\n  \n    geom_bar(stat=\"identity\") + xlab(\"Self-assessed level\") +\n   geom_text(aes(label = paste0(percent_score, \"%\")), \n            position = position_stack(vjust = 0.5), size = 6)  + theme_classic() +\n  theme(legend.position=\"none\", axis.text.x = element_text(size = 12)) +\n    scale_x_discrete(limits = c(\"Beginner\", \"Intermediate\", \"Expert\")) +\n  labs(y=\"Count\") \n\n\n\n\n\n\n\nCode contribution\n\n\nShow the code\ntable(data[22])  %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    mutate(percent_score = round(Freq / sum(Freq) * 100)) %>% \n    ggplot(data = ., aes(x = reorder(level, Freq),  y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Code contribution\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), position = position_stack(vjust = 0.5), size = 6)  +\n  theme_classic() +\n  theme(legend.position=\"none\", axis.text.x = element_text(size = 12)) +\n  labs(y=\"Count\")"
  },
  {
    "objectID": "sample_bio.html#time-of-finishing-survey-in-minutes",
    "href": "sample_bio.html#time-of-finishing-survey-in-minutes",
    "title": "Sample bio",
    "section": "Time of finishing survey in minutes",
    "text": "Time of finishing survey in minutes\n\n\nShow the code\nmedian(as.numeric(as.matrix(data[121]))) / 60\n\n\n[1] 14.3445"
  },
  {
    "objectID": "customs.html",
    "href": "customs.html",
    "title": "Visualisation customs",
    "section": "",
    "text": "Show the code\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method"
  },
  {
    "objectID": "customs.html#channels",
    "href": "customs.html#channels",
    "title": "Visualisation customs",
    "section": "Channels",
    "text": "Channels\nHow many channels do you typically measure?\n\n\nShow the code\ndata %>% ggplot(data = ., aes_(as.name(names(data)[23]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30)) +\n    labs(x =\"How many channels do you typically measure?\") + theme_classic()\n\n\n\n\n\nHow many channels do you typically analyse?\n\n\nShow the code\ndata %>% filter(.[[24]] < 500) %>% ggplot(data = ., aes_(as.name(names(data)[24]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30))+\n    labs(x =\"How many channels of those you measured do you typically analyse?\") + theme_classic()\n\n\n\n\n\nCombined version\n\n\nShow the code\ndata %>% select(23, 24) %>% \n  rename_at(vars(colnames(.)), ~ c(\"measure\", \"analyse\")) %>% \n  filter(analyse < 500) %>% \n  gather(key=Type, value=Value) %>% \n  ggplot(aes(x=Value, fill=Type)) + \n  geom_histogram(position=\"stack\") + labs(x =\"Number of channels\") +\n  theme_classic()\n\n\n\n\n\n\n\nShow the code\ndata %>% select(23, 24) %>% \n  rename_at(vars(colnames(.)), ~ c(\"measure\", \"analyse\")) %>% \n  filter(analyse < 500) %>% \n  mutate(rate = analyse / measure) %>% \n  ggplot(aes(x=rate)) + \n  geom_histogram() + labs(x =\"analyse / measure\") +\n  theme_classic()\n\n\n\n\n\n\n\nShow the code\ndata %>% select(23, 24) %>% \n  rename_at(vars(colnames(.)), ~ c(\"measure\", \"analyse\")) %>% \n  filter(analyse < 500) %>% \n  mutate(rate = analyse / measure) %>% \n  mutate(rate_ms = factor(ifelse(rate < 0.5, \"lower median\", \"higher median\")), quartile = cut(rate, 4)) %>%\n  group_by(quartile) %>% \n  dplyr::summarise(n = n()) %>% ungroup() %>%  mutate(perc = round(n / sum(n), 2) * 100) %>% \n  ggplot(aes(x=quartile, y = perc, fill = quartile)) + geom_bar(stat = \"identity\", width=0.5) +\n theme_classic() +  labs(x =\"analyse / measure\")+ \n  theme(legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = paste0(perc, \"%\")),  position = position_stack(vjust = 0.5), size = 6)"
  },
  {
    "objectID": "customs.html#software-usage",
    "href": "customs.html#software-usage",
    "title": "Visualisation customs",
    "section": "Software usage",
    "text": "Software usage\n\nFrequency\n\n\nShow the code\nna.omit(data[51]) %>% nrow()\n\n\n[1] 21\n\n\nShow the code\nother <- c(rep(\"Custom scripts\",each=9), \"4DBTi\", rep(\"letswave\", 3), \"mTRF\", \"RAGU\", \"IGOR Pro\", \"EEGProcessor\", \"ELAN\", \"WinEEG\") %>% table(.) %>% data.frame(.) %>% rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))\n\n\n\n\nShow the code\nvec <- names(data[25:50]) %>% str_split_i(., \"\\\\? \\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:50] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %>% \n  cbind(., data[51] %>% rename_at(vars(colnames(.)), ~ c(\"other\"))) %>% mutate(other = case_when(\n      grepl(\"\\\\b(letswave)\\\\b\", other, ignore.case = TRUE) == TRUE ~ \"Letswave\",\n      grepl(\"\\\\b(r|matlab|python|ggplot(2)?|own)\\\\b\", other, ignore.case = TRUE) == TRUE ~ \"Custom scripts\",\n      grepl(\"\\\\bnever\\\\b\", other, ignore.case = TRUE) == TRUE ~ NA_character_,\n      TRUE ~ as.character(other)\n      ))  %>%\n  mutate(cs = ifelse(other == \"Custom scripts\", other, NA_character_),\n         other2 = ifelse(other != \"Custom scripts\", other, NA_character_)) %>% \n  mutate(`Custom scripts` = case_when(\n    cs == \"Custom scripts\" ~ as.numeric(1),\n    TRUE ~ as.numeric(`Custom scripts`)\n  )) %>% \n  mutate(Letswave = case_when( #gross\n    other2 == \"Letswave\" ~ as.numeric(1),\n    TRUE ~ as.numeric(0)\n  )) %>% dplyr::select(-cs, -other, -other2) # next time I also will extend other 2 too\n\n\nd <- data.frame(rowSums(t(software))) %>%  tibble::rownames_to_column(., \"soft\") %>% \n    rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))   #%>% \n  # rbind(., other) %>% # not sure is it correct\n  # dplyr::group_by(soft) %>% dplyr::summarise(sum_scores = sum(sum_scores)) %>% \n  # arrange(., desc(sum_scores))\n\n\n\n\nShow the code\nd  %>% filter(sum_scores != 0) %>% \n  mutate(soft = ifelse(sum_scores >= 3, as.character(soft), \"_Others\")) %>% group_by(soft) %>% \n  dplyr::summarise(sum_scores = sum(sum_scores)) %>% ungroup() %>% \n  mutate(percent_score = round(sum_scores / sum(sum_scores) * 100)) %>% \n    ggplot(data = ., aes(y = reorder(soft, percent_score),  x= percent_score, fill = soft)) +\n    geom_bar(stat=\"identity\") + labs(x= \"Scores\", y=\"Analytical tools\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), \n            position = position_stack(vjust = 0.5), size = 4)  + theme_classic() + theme(legend.position=\"none\", axis.text.y = element_text(size = 14))\n\n\n\n\n\n\n\nMonousers\n\n\nShow the code\nns <- cbind(data.frame(rowSums(software), software)) %>% \n  filter(rowSums.software. == 1) %>% dplyr::select(-rowSums.software.)\n\ndata.frame(rowSums(t(ns))) %>%  \n  tibble::rownames_to_column(., \"soft\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\")) %>% \n  arrange(., desc(sum_scores)) %>% filter(sum_scores != 0)\n\n\n                   soft sum_scores\n1            MNE.Python         11\n2             FieldTrip          8\n3                EEGLAB          7\n4        Custom.scripts          2\n5 Brain.Vision.Analyser          1\n6                ERPLAB          1\n7                  SPM.          1\n\n\n\n\nNumber of used tools\n\n\nShow the code\ndata.frame(rowSums(software)) %>%  dplyr::rename(n_soft = rowSums.software.) %>% \n ggplot(data = ., aes(n_soft)) +\n  geom_histogram(bins = 45) +  scale_x_continuous(breaks=seq(0, 30, 1)) +\n  labs(x =\"Number of software used\", y=\"Count\") +\n  theme_classic() + theme(legend.position=\"none\", axis.text.x = element_text(size = 12)) \n\n\n\n\n\nShow the code\ndata.frame(rowSums(software)) %>%  dplyr::rename(n_soft = rowSums.software.) %>% summarise(median_n_soft = median(n_soft))\n\n\n  median_n_soft\n1             3\n\n\n\n\nCooccurrence\n\n\nShow the code\n# how to order by diagonal matrix \n# how to add others\nsoftware <- data[25:50]\nch <- colnames(software)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\? \\\\[\", 2) \nch1 <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd1 <- foreach(i = colnames(software)) %do% ifelse(software[i]==\"Yes\", 1, 0)\nc <- crossprod(matrix(unlist(d1), ncol = 26))\nrownames(c) <- ch1\ncolnames(c) <- rownames(c)\n\ndiag.order <- order(diag(c), decreasing = FALSE)\nmat_reordered <- c[diag.order, diag.order]\n\nmelt(mat_reordered) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) \n\n\n\n\n\n\n\nShow the code\nzero_rows <- rowSums(mat_reordered) == 0\nzero_cols <- colSums(mat_reordered) == 0\n\n# Create a new matrix array without the rows and columns consisting only of zeroes\nnew_matrix <- mat_reordered[!zero_rows, !zero_cols]\nmelt(new_matrix) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))"
  },
  {
    "objectID": "customs.html#important-features",
    "href": "customs.html#important-features",
    "title": "Visualisation customs",
    "section": "Important features",
    "text": "Important features\n\n\nShow the code\nfeature <- data[52:60] %>% rename_all(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %>% \n                                        str_sub(., 1, -2) ) %>%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 )))\n\nfeature %>% \n  colSums(., na.rm =T) %>% data.frame(.) %>%  tibble::rownames_to_column(., \"Feature\") %>% \n  filter(!is.na(Feature)) %>% \n  arrange(desc(.)) %>% rename_at(vars(colnames(.)), ~ c(\"Feature\", \"sum_scores\")) %>% group_by(Feature) %>% \n  dplyr::mutate( mean = round(sum_scores / nrow(data), 2)) %>%   kbl(escape = F, booktabs = T) %>%\n  kable_styling(\"striped\", position = \"center\",) %>% kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    Feature \n    sum_scores \n    mean \n  \n \n\n  \n    Flexible tweaking of plot attributes (colors, linewidths, margins etc.) \n    292 \n    1.56 \n  \n  \n    Presentation/publication ready figures \n    226 \n    1.21 \n  \n  \n    Reproducibility of interactively generated or modified plots \n    223 \n    1.19 \n  \n  \n    Generating plots by coding \n    221 \n    1.18 \n  \n  \n    Combine with a custom plot created outside of the toolbox (as subplot or inset) \n    116 \n    0.62 \n  \n  \n    Zooming or panning within a plot \n    109 \n    0.58 \n  \n  \n    Speed of plotting \n    80 \n    0.43 \n  \n  \n    Interactive selection of time-ranges or electrodes e.g. via Sliders or Dropdown menus \n    72 \n    0.39 \n  \n  \n    Generating plots by clicking (GUI) \n    -68 \n    -0.36 \n  \n\n\n\n\n\n\n\nShow the code\nfeature1 <- feature %>% \n  pivot_longer(cols = everything(), names_to = \"name\", values_to = \"value\") %>% \n  mutate(index = as.integer(factor(name))) %>% \n  filter(!is.na(value))\n\n#feature  %>% distinct(., index, name) %>% arrange(., index)\n\nfeature1 %>% #filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  geom_density(aes(x = value, fill = str_wrap(name)), bw = 0.5) + \n  labs(x = \"score\", fill=\"Features\")  + theme_classic()  +\n  theme(legend.position = \"none\", legend.key.height=unit(2, \"cm\")) + facet_wrap(~str_wrap(name, 20))\n\n\n\n\n\n\n\nShow the code\nfeature1 %>% filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  geom_density(aes(x = value, color = str_wrap(name, 20)), bw = 0.5) + \n  labs(x = \"score\", color = \"Features\")  + theme_classic() +\n  theme(legend.position = \"none\", \n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14)) + \n  facet_wrap(~str_wrap(name, 20)) + labs(x=\"Scores on Likert scale\", y=\"Density\") \n\n\n\n\n\n\n\nShow the code\nfeature1 %>% filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  stat_density(aes(x = value, color = str_wrap(name, 20)),\n                  geom=\"line\", position=\"identity\", bw = 0.5, size = 1) +\n  labs(x = \"score\", color = \"Features\")  + theme_classic() +\n  theme(\n        legend.key.height=unit(1, \"cm\"),\n        legend.text = element_text(color = \"black\"),\n        axis.text = element_text(size = 14),\n        strip.text = element_text(size = 14))  + \n  labs(x=\"Scores on Likert scale\", y=\"Density\") \n\n\n\n\n\n\n\nShow the code\nfeature1 %>% filter(index %in% c(8, 9)) %>% \n  ggplot() + \n   stat_density(aes(x = value, color = str_wrap(name, 20)),\n                  geom=\"line\", position=\"identity\", bw = 0.5, size = 1) +\n  labs(x = \"score\", color =\"Features\")  + theme_classic() +\n  theme(\n        legend.key.height=unit(1, \"cm\"),\n        legend.text = element_text(color = \"black\"),\n        axis.text = element_text(size = 14),\n        strip.text = element_text(size = 14))  + \n  labs(x=\"Scores on Likert scale\", y=\"Density\") \n\n\n\n\n\n\n\nShow the code\nfeature1 %>% filter(index %in% c(1, 3, 5)) %>% \n  ggplot() + \n   stat_density(aes(x = value, color = str_wrap(name, 20)),\n                  geom=\"line\", position=\"identity\", bw = 0.5, size = 1) +\n  labs(x = \"score\", color =\"Features\")  + theme_classic() +\n  theme(\n        legend.key.height=unit(1, \"cm\"),\n        legend.text = element_text(color = \"black\"),\n        axis.text = element_text(size = 14),\n        strip.text = element_text(size = 14))  + \n  labs(x=\"Scores on Likert scale\", y=\"Density\")"
  },
  {
    "objectID": "customs.html#familiarity-with-plots",
    "href": "customs.html#familiarity-with-plots",
    "title": "Visualisation customs",
    "section": "Familiarity with plots",
    "text": "Familiarity with plots\n\nRecognition\n\n\nShow the code\nvec <- c(\"line\", \"butterfly\", \"topo\",  \"topo_map\", \"topo_array\", \"erp_image\", \"parallel\", \"channel_image\")\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plot\", \"sum_scores\"))  %>% \n  arrange(., desc(sum_scores)) %>% \n  ggplot(data = ., aes(y = reorder(plot, sum_scores), x= sum_scores, fill=plot)) +\n  geom_bar(stat=\"identity\") + ylab(\"plot\") + theme_classic() + \n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Select ERP plot you are familiar with\") \n\n\n\n\n\nThose who named a plot somehow and those who failed to do that\n\n\nShow the code\nword_preproc <- function(data, N){\n # N = 69\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"like\", \"s\", \"plot\", \"plots\")\n  tmp <- data %>% filter(!is.na(.[[N]])) %>% select(., N) %>% \n    dplyr::rename(words = !!names(.)[1]) %>% mutate(words = tolower(words)) %>% \n    mutate(words_prep = str_split(words, \"\\\\s+\")) %>%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \"))) %>% \n    mutate(words_prep = stri_replace_all_regex(words_prep,\n                                  pattern=c(\" \\\\(.*\", \", or.*\", \" across.*\", \" with.*\", \" at.*\", \" by.*\", \" over.*\", #\" of.*\", \n                                            \" for.*\", \" per.*\", \" across.*\", \" accross.*\", \" between.*\"),\n                                  replacement=c(''),\n                                  vectorize=FALSE)) %>% \n    mutate(words_prep = str_split(words_prep, \"\\\\s+\")) %>%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \")))\n     \n  return(tmp)\n}\n\n\n\n\nNaming\n\n\nShow the code\nvec_named <- names(data[ , grepl( \"How would you \" , names(data))])\nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_map\", \"topo_array\", \"erp_img\", \"parallel\", \"channel_img\")\n\nna_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|why'), \"NA\", as.character(words))) %>%\n      mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n      table(.) %>% \n      data.frame(.) %>% filter(words != \"NA\") %>% \n      summarise(n = sum(Freq))  \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- plot_names\n    return(temp)\n}\n\nnum_named <- na_table(data, vec_named)\n\nslice(num_named, 1)  %>% \n  gather(., plots, succeeded, `line`:`channel_img`, factor_key=TRUE) %>% \n  mutate(failed = nrow(data) - succeeded) %>% \n  gather(., res, score, succeeded:failed, factor_key=TRUE) %>% \n\n  ggplot(., aes(x = plots, y = score, fill = res)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic() + theme(axis.title.x=element_blank(), plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = score, group = res), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Plot naming\")\n\n\n\n\n\n\n\nPlotting\n\n\nShow the code\nvec_plotted <- names(data[ , grepl( \"Have you ever plotted \" , names(data))]) \n\n\ndo_vec <- function(vec_plotted, data, plot_names){\n  t1 <- table(data[vec_plotted[1]])\n  for (i in 2:length(vec_plotted)) {\n    t <- table(data[vec_plotted[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec_plotted)))\n  return(t1)\n}\n\ntab <- do_vec(vec_plotted, data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nnamed <- slice(num_named, 1)  %>% \n  gather(., plots, succeeded, `line`:`channel_img`, factor_key=TRUE)%>% \n  mutate(failed = nrow(data) - succeeded) %>% \n  dplyr::rename(named = succeeded) %>% \n  dplyr::select(-failed)\n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\nmem_tab <- data.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>%\n  merge(., named)  %>% left_join(., tab)  \n\nmem_tab %>% #filter(plots != \"parallel\") %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of\\nfamiliarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2) +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Familiarity with plots\")\n\n\n\n\n\n\nnamed correctly"
  },
  {
    "objectID": "customs.html#up-or-down",
    "href": "customs.html#up-or-down",
    "title": "Visualisation customs",
    "section": "Up or down",
    "text": "Up or down\n\n\nShow the code\nt <- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt <- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\narea1 <- data.frame(matrix(tt)) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), \"affective neuroscience\", words)) %>%  \n  mutate(words =ifelse(str_detect(.[[1]], 'memory'), \"memory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), \"auditory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|cognition|consciousness|meditation|cognitive control|self|executive functions'), \"cognitive control and attention\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), \"deep brain stimulation\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), \"decision making\", words)) %>%\n  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), \"ageing\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'social'), \"social cognition\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), \"olfaction\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), \"language and speech\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'bci'), \"bci\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), \"sleep\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), \"time\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'perception'), \"perception\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'vis'), \"vision\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development|ageing'), \"development\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), \"motor control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), \"mental disorders\", words)) %>%   \n  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), \"dsp\", words))\n\narea <- area1 %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'olfaction|vision|auditory|pain'), \"perception\", words))%>%\n  mutate(words = ifelse(str_detect(.[[1]], 'dsp|computational neuroscience'), \"methodology\", words)) %>% \n  mutate(words = ifelse(str_detect(.[[1]], 'mental disorders|deep brain stimulation'), \"clinical\", words))%>% \n  mutate(words = ifelse(str_detect(.[[1]], 'social cognition'), \"affective neuroscience\", words))\n\n\n\n\nShow the code\ntable(data[79]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>%\n  mutate(percent_score = round(scores / sum(scores) * 100)) %>% \n    ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + \n    theme_classic() +\n    theme(axis.title.x=element_blank(), \n          legend.position=\"none\", \n          axis.text = element_text(size = 12),\n          plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position), \n            position = position_stack(vjust = 0.5)) +\n  ggtitle(\"In ERP plot, should positive voltages be plotted upwards, or downwards?\")\n\n\n\n\n\n\n\n\n\n\nShow the code\ncbind(unlist(area$words), unlist(data[[79]])) %>% data.frame() %>% \nfilter(.[[2]] != \"NANA\") %>% dplyr::rename(area=X1, ud=X2) %>%\ngroup_by(area) %>%\nfilter(n() > 2) %>% group_by(area, ud) %>% dplyr::summarise(n = n()) %>% \n  group_by(area) %>% dplyr::mutate(nn = sum(n)) %>% \n  ggplot(., aes(x = n, y = reorder(area, nn), fill = ud)) +\n   geom_col(stat = \"identity\", width = 0.5) +\n  labs(x = \"Count\", y = \"area of study\", fill =\"Positive:\") +\n  geom_text(aes(label = n, #paste0(n, \"%\"), \n                group = ud), \n            position = position_stack(vjust = 0.5)) +\n   theme(plot.title = element_text(hjust = 0.5),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.title = element_blank(),\n        axis.title.y=element_blank()\n        ) +  \n  theme_classic()"
  },
  {
    "objectID": "customs.html#error-bars",
    "href": "customs.html#error-bars",
    "title": "Visualisation customs",
    "section": "Error bars",
    "text": "Error bars\n\n\nShow the code\ntable(data[74]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"Scores\"))   %>%  mutate(percent_score = round(Scores / sum(Scores) * 100)) %>% \n\n    ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) +\n      \n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position),  position = position_stack(vjust = 0.5), size = 6) + \n  ggtitle(\"In your paper, did you published ERP plot with error bars?\")\n\n\n\n\n\n\n\nShow the code\ntable(data[74]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"Scores\"))   %>%  \n  mutate(percent_score = round(Scores / sum(Scores) * 100)) %>% \n  filter(position != \"Never published this plot\") %>% \n    ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) +\n      \n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position),  position = position_stack(vjust = 0.5), size = 6) + \n  ggtitle(\"In your paper, did you published ERP plot with error bars?\")\n\n\n\n\n\n\n\nShow the code\ndata[75] %>%  filter(!is.na(.)) %>% table()  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% mutate(percent_score = round(scores / sum(scores) * 100)) %>% filter(position != \"Other\") %>% \n    ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n   theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) + ylab(\"Scores\") +\n     \n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position),  position = position_stack(vjust = 0.5), size = 6) + \n  ggtitle(\"In your figure, what did error bars depicted?\")\n\n\n\n\n\n\n\nShow the code\ndata[76] %>%  filter(!is.na(.)) %>% table()\n\n\nG03Q15[other]. What did the error bars depict in your figure? [Other]\n68% CI, which is close to SEM under normality \n                                            1 \n                    95% ci over channel means \n                                            1 \n          i'm not sure but i think it was sem \n                                            1 \n        median absolute deviaton or quantiles \n                                            1 \n                                           Sd \n                                            1 \n SEM, corrected for within-participant design \n                                            1"
  },
  {
    "objectID": "customs.html#baseline",
    "href": "customs.html#baseline",
    "title": "Visualisation customs",
    "section": "Baseline",
    "text": "Baseline\n\nperiods\n\n\nShow the code\ntable(abs(data[77])) %>% data.frame() %>%  dplyr::rename(baseline = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = baseline, y= Freq)) +\n    geom_bar(stat=\"identity\") + xlab(\"Recomended baseline in msec\") +  \n  scale_y_continuous(breaks=seq(0, 60, 5)) + theme_classic() +\n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = Freq, group = baseline), position = position_dodge(width = .9), vjust = -0.2)\n\n\n\n\n\n\n\njustification\n\n\nShow the code\n# If you don't want to provide a number on previous question, please, provide a justification\n# depends on what??\n# manual categorization of depending\nj <- data %>%    \n  dplyr::rename(q = !!names(.)[78]) %>% filter(!is.na(q)) %>% dplyr::select(q) %>% \n  mutate(q = tolower(q)) %>% mutate(q = gsub('depends in|depending on', 'depends on', q),\n         dependson = ifelse(grepl(\"depends|depend\", q), q, NA)) %>% \n  separate(dependson, into = c(\"a\",\"b\"), sep = \"depends on |depend on \") %>% \n  dplyr::select(-a) %>% \n  dplyr::rename(dependson = b) #%>% \nj %>% filter(is.na(dependson))  %>% select(-dependson)\n\n\n# A tibble: 18 × 1\n   q                                                                            \n   <chr>                                                                        \n 1 minimum 200ms for erps and theta or beta power                               \n 2 should match the duration of baseline-correction                             \n 3 as a rule of thumb, i would plot at least 1/3 of the duration (post-stimulus…\n 4 half of the illustrated task interval                                        \n 5 in general i would always try to plot the full baseline period used for base…\n 6 the same duration as the one used for baseline correction                    \n 7 at least 300, preferably more                                                \n 8 put down 100, but that's just what i typically use, might be diff for differ…\n 9 at least the baseline window used for the baseline correction?               \n10 in this case it has sense as the -100 : 0 ms is not flat                     \n11 1/3 to 1/2 of the post-stimulus time plotted                                 \n12 i would plot the same baseline period as the one used for baseline correction\n13 i would recommend to plot the baseline period corresponding to the baseline-…\n14 in general, i think it should be roughly the same length as the time window …\n15 assuming the baseline is -250 to 0 ms, i would like to see activity before t…\n16 the actual baseline length you have in the experiment                        \n17 ideally, the entire duration for the baseline correction should be depicted  \n18 it depends - at least as long as the period you use for correction (which ma…\n\n\nShow the code\nj %>% filter(!is.na(dependson)) %>% select(dependson)\n\n\n# A tibble: 33 × 1\n   dependson                                                                    \n   <chr>                                                                        \n 1 \"the design of course\"                                                       \n 2 \"the topic\"                                                                  \n 3 \"the study. if you have interstimulus interval of 1 second and you expect to…\n 4 \"the experiment and research question\"                                       \n 5 \"the rest period between the measured evoked responses. e.g. it can be very …\n 6 \"the analysis\"                                                               \n 7 \"paradigm, 100-300 ms range preferable\"                                      \n 8 \"the task design\"                                                            \n 9 \"the type of response (eg for mrcps response is seen before actual movement …\n10 \"the task design, paradigm and signal of interest.\"                          \n# … with 23 more rows\n\n\nShow the code\n  #View()"
  },
  {
    "objectID": "customs.html#colorbars",
    "href": "customs.html#colorbars",
    "title": "Visualisation customs",
    "section": "Colorbars",
    "text": "Colorbars\n\n\nShow the code\ntable(data[117]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Are you aware of perceptual controvericies of colorbars?\")\n\n\n\n\n\n\n\nShow the code\ntable(data[118]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Do you know about two-dimensional colorbars?\")\n\n\n\n\n\n\n\nShow the code\nrbind(table(data[117]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"answer\", \"scores\")) %>% \n  mutate(questions = \"Awareness about\\ncontrovercies of\\ncolorbars\")%>%\n  mutate(percent_score = round(scores / sum(scores) * 100)),\n\ntable(data[118]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"answer\", \"scores\")) %>% \n  mutate(questions = \"Awareness about\\n2d colorbars\") %>%\n  mutate(percent_score = round(scores / sum(scores) * 100))\n) %>% \n  \n  ggplot(., aes(x = percent_score, y = questions, fill = answer)) +\n  geom_col(stat = \"identity\", width = 0.5) +\n   geom_text(aes(label = paste0(percent_score, \"%\", \"\\n(\", answer, \")\")), \n            position = position_stack(vjust = 0.5), size = 4) + \n    theme_classic()+ \n  theme(plot.title = element_text(hjust = 0.5),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"none\",\n        legend.title = element_blank(),\n        axis.title.y=element_blank()\n        ) +\n  scale_color_manual(values = c(\"#FF6666\", \"#66CC66\")) +\n  scale_fill_manual(values = c(\"#FF6666\", \"#66CC66\"))  +\n  labs(x=\"Percent score\")\n\n\n\n\n\n\n\nShow the code\ntable(data[119])  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>%\n  mutate(percent_score = round(scores / sum(scores) * 100)) %>% \n  ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(stat = \"identity\", width=0.5)  + theme_classic() +\n     theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) + ylab(\"Scores\") +\n  geom_text(aes(label = paste0(percent_score, \"%\") , \n                group = position), position = position_stack(vjust = 0.5), size = 8) + \n  ggtitle(\"Would you like to use a two-dimensional colorbar\\nin your publications, if it was easily available?\")"
  },
  {
    "objectID": "customs.html#feedback",
    "href": "customs.html#feedback",
    "title": "Visualisation customs",
    "section": "Feedback",
    "text": "Feedback\n\n\nShow the code\nfeed <- data[120] %>% dplyr::rename(feed = !!names(.)[1]) %>%  filter(!is.na(feed), feed != \"-\") #%>% View()\nfeed  %>%\n  filter(!row_number() %in% c(3, 14, 17, 32, 37, 41))# just appreciation\n\n\n# A tibble: 49 × 1\n   feed                                                                         \n   <chr>                                                                        \n 1 \"Not only 2-d, but also CIRCULAR colorbars please\\r\\nThey are essential to v…\n 2 \"I think a great feature to have would be a selection of colors for comparis…\n 3 \"stop pushing this jet bullshit on me so hard\"                               \n 4 \"Make it very modular. It will be useless to experts or people trying someth…\n 5 \"This is more of a tangential comment, but one issue for me is lack of aware…\n 6 \"Easy creation of different types of error bars on ERP plots (shading)\"      \n 7 \"I use R for most analyses and visualization but matlab/eeglab/Erplab (for n…\n 8 \"Dynamic head montage videos\"                                                \n 9 \"I feel like Matlab is not very easy to implement in public and interactive …\n10 \"I think everything that relates to plotting ERPs + results of statistical t…\n# … with 39 more rows"
  },
  {
    "objectID": "connections.html#colorbars",
    "href": "connections.html#colorbars",
    "title": "Linear models",
    "section": "colorbars",
    "text": "colorbars"
  },
  {
    "objectID": "plot_breakdown.html#new-feature",
    "href": "plot_breakdown.html#new-feature",
    "title": "3.plot_breakdown",
    "section": "New feature",
    "text": "New feature\n\n1\n\ntmp <- struggle1 %>% filter( new_feature != \"-\") %>% dplyr::select(new_feature) %>%\n  filter(!grepl(\"\\\\b(\\\\.|\\\\/|see)\\\\b\", new_feature)) %>%  \n  filter(!row_number() %in% c(13, 18, 20  ))  %>% \n  separate_rows(new_feature, sep = \";\", convert = FALSE) %>% \n#filter(!row_number() %in% c(59))  %>% \n  separate_rows(new_feature, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>% \n  mutate(group = case_when(\n    grepl(\"\\\\bsignif\\\\w*\", new_feature) == TRUE ~ \"adding significance\", \n    grepl(\"\\\\bstat\\\\w*\", new_feature) == TRUE ~ \"adding statistics\", \n    grepl(\"\\\\btopo\\\\w*\", new_feature) == TRUE ~ \"adding topoplot\", \n    grepl(\"\\\\b(custom\\\\w*|details|annotations|font|labels|color|colours|thicker)\", new_feature) == TRUE ~ \"customization (color, labels)\", \n    grepl(\"\\\\b(electrode|click|control|interact\\\\w*|gui|select\\\\w*)\", new_feature) == TRUE ~ \"interactivity and channel selection\", \n    grepl(\"\\\\b(highlight|shadow|window)\", new_feature) == TRUE ~ \"area highlighting\", \n    grepl(\"\\\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", new_feature) == TRUE ~ \"uncertainty\", \n    \n      TRUE ~ '_other'\n      )) %>% filter(nchar(new_feature) != 0) #%>% View()\n\n#n_rest <- mem_tab[2, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(group) %>%\n      dplyr::summarise(n = n()) %>% \n     # rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    group \n    n \n    percent \n    percent1 \n  \n \n\n  \n    uncertainty \n    15 \n    24.2 \n    24 \n  \n  \n    _other \n    10 \n    16.1 \n    16 \n  \n  \n    customization (color, labels) \n    10 \n    16.1 \n    16 \n  \n  \n    interactivity and channel selection \n    9 \n    14.5 \n    15 \n  \n  \n    adding significance \n    6 \n    9.7 \n    10 \n  \n  \n    adding statistics \n    6 \n    9.7 \n    10 \n  \n  \n    area highlighting \n    4 \n    6.5 \n    6 \n  \n  \n    adding topoplot \n    2 \n    3.2 \n    3 \n  \n\n\n\n\n # words = ifelse(nchar(words)==0, NA, words),\n#write.xlsx(tmp, \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\n\n2\n\ntmp <- struggle2 %>% filter( new_feature != \"-\") %>% dplyr::select(new_feature) %>% #View()\n  filter(!grepl(\"\\\\b(see|not|useful)\\\\b\", new_feature)) %>%  \n  #filter(!row_number() %in% c(13, 18, 20  ))  %>% \n  #separate_rows(new_feature, sep = \";\", convert = FALSE) %>% \n#filter(!row_number() %in% c(59))  %>% \n  separate_rows(new_feature, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>% \n  mutate(group = case_when(\n    grepl(\"\\\\bsignif\\\\w*\", new_feature) == TRUE ~ \"adding significance\", \n    grepl(\"\\\\b(stat\\\\w*|average|mean)\", new_feature) == TRUE ~ \"adding statistics\", \n    grepl(\"\\\\btopo\\\\w*\", new_feature) == TRUE ~ \"adding topoplot\", \n    grepl(\"\\\\b(custom\\\\w*|details|annotations|opacity|font|labels|color|colour(s)?|thicker)\", new_feature) == TRUE ~ \"customization (color, labels)\", \n    grepl(\"\\\\b(manipulating|highlight|graying|click|control|interact\\\\w*|gui|select\\\\w*)\", new_feature) == TRUE ~ \"interactivity and channel selection\", \n    grepl(\"\\\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", new_feature) == TRUE ~ \"uncertainty\", \n    \n      TRUE ~ '_other'\n      )) %>% filter(nchar(new_feature) != 0) #%>% View()\n\n#n_rest <- mem_tab[2, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(group) %>%\n      dplyr::summarise(n = n()) %>% \n     # rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    group \n    n \n    percent \n    percent1 \n  \n \n\n  \n    interactivity and channel selection \n    15 \n    36.6 \n    37 \n  \n  \n    customization (color, labels) \n    10 \n    24.4 \n    24 \n  \n  \n    adding topoplot \n    7 \n    17.1 \n    17 \n  \n  \n    _other \n    4 \n    9.8 \n    10 \n  \n  \n    adding statistics \n    4 \n    9.8 \n    10 \n  \n  \n    uncertainty \n    1 \n    2.4 \n    2 \n  \n\n\n\n\n\n\n\n3\n\ntmp <- struggle3 %>% filter( new_feature != \"-\") %>% dplyr::select(new_feature) %>% \n  filter(!grepl(\"\\\\b(no|\\\\/|above|good|balanced)\\\\b\", new_feature)) %>%  #View()\n  #filter(!row_number() %in% c(13, 18, 20  ))  %>% \n  #separate_rows(new_feature, sep = \";\", convert = FALSE) %>% \n#filter(!row_number() %in% c(59))  %>% \n  separate_rows(new_feature, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>% \n  mutate(group = case_when(\n    grepl(\"\\\\bsignif\\\\w*\", new_feature) == TRUE ~ \"adding significance\",\n    grepl(\"\\\\b(3d)\\\\b\", new_feature) == TRUE ~ \"3d\", \n    grepl(\"\\\\b(stat\\\\w*|average|mean)\\\\b\", new_feature) == TRUE ~ \"adding statistics\", \n    grepl(\"\\\\b(interpolat\\\\w*|extrapolat\\\\w*)\\\\b\", new_feature) == TRUE ~ \"interpolation and extrapolation\", \n    grepl(\"\\\\btopo\\\\w*\", new_feature) == TRUE ~ \"adding topoplot\", \n    grepl(\"\\\\b(custom\\\\w*|details|annotations|opacity|font|labels|color(s|map|maps|bar)?|colour(s)?|thicker)\\\\b\", new_feature) == TRUE ~ \"customization (color, labels)\", \n    grepl(\"\\\\b(anomatiom|slider|scrolling|gif|manipulating|hightlight|highlight|graying|click|control|interact\\\\w*|gui|select\\\\w*)\", new_feature) == TRUE ~ \"interactivity and channel selection\", \n    grepl(\"\\\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", new_feature) == TRUE ~ \"uncertainty\", \n     grepl(\"\\\\b(shape(s)?|circle|head)\\\\b\", new_feature) == TRUE ~ \"head shape\", \n      TRUE ~ '_other'\n      )) %>% filter(nchar(new_feature) != 0)# %>% View()\n\n#n_rest <- mem_tab[2, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(group) %>%\n      dplyr::summarise(n = n()) %>% \n     # rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n \n  \n    group \n    n \n    percent \n    percent1 \n  \n \n\n  \n    customization (color, labels) \n    17 \n    27.4 \n    27 \n  \n  \n    interactivity and channel selection \n    12 \n    19.4 \n    19 \n  \n  \n    _other \n    10 \n    16.1 \n    16 \n  \n  \n    3d \n    5 \n    8.1 \n    8 \n  \n  \n    head shape \n    5 \n    8.1 \n    8 \n  \n  \n    interpolation and extrapolation \n    5 \n    8.1 \n    8 \n  \n  \n    adding significance \n    3 \n    4.8 \n    5 \n  \n  \n    adding topoplot \n    3 \n    4.8 \n    5 \n  \n  \n    adding statistics \n    2 \n    3.2 \n    3"
  },
  {
    "objectID": "feedbacks.html",
    "href": "feedbacks.html",
    "title": "Feedbacks",
    "section": "",
    "text": "Show the code\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method"
  },
  {
    "objectID": "feedbacks.html#word_preproc",
    "href": "feedbacks.html#word_preproc",
    "title": "Feedbacks",
    "section": "word_preproc",
    "text": "word_preproc\n\n\nShow the code\nword_preproc <- function(data, N){\n # N = 69\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"like\", \"s\", \"plot\", \"plots\")\n  tmp <- data %>% filter(!is.na(.[[N]])) %>% select(., N) %>% \n    dplyr::rename(words = !!names(.)[1]) %>% mutate(words = tolower(words)) %>% \n    mutate(words_prep = str_split(words, \"\\\\s+\")) %>%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \"))) %>% \n    mutate(words_prep = stri_replace_all_regex(words_prep,\n                                  pattern=c(\" \\\\(.*\", \", or.*\", \" across.*\", \" with.*\", \" at.*\", \" by.*\", \" over.*\", #\" of.*\", \n                                            \" for.*\", \" per.*\", \" across.*\", \" accross.*\", \" between.*\"),\n                                  replacement=c(''),\n                                  vectorize=FALSE)) %>% \n    mutate(words_prep = str_split(words_prep, \"\\\\s+\")) %>%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \")))\n     \n  return(tmp)\n}\n\n\n\n\nShow the code\nvec_plotted <- names(data[ , grepl( \"Have you ever plotted \" , names(data))]) \nvec_named <- names(data[ , grepl( \"How would you \" , names(data))])\n\ndo_vec <- function(vec_plotted, data, plot_names){\n  t1 <- table(data[vec_plotted[1]])\n  for (i in 2:length(vec_plotted)) {\n    t <- table(data[vec_plotted[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names \n  return(t1)\n}\nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_map\", \"topo_array\", \"erp_img\", \"parallel\", \"channel_img\")\n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\ntab <- do_vec(vec_plotted, data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nna_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|why'), \"NA\", as.character(words))) %>%\n      mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n      table(.) %>% \n      data.frame(.) %>% filter(words != \"NA\") %>% \n      summarise(n = sum(Freq))  \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- plot_names\n    return(temp)\n}\nnum_named <- na_table(data, vec_named)\nnamed <- slice(num_named, 1)  %>% \n  gather(., plots, succeeded, `line`:`channel_img`, factor_key=TRUE)%>% \n  mutate(failed = nrow(data) - succeeded) %>% \n  dplyr::rename(named = succeeded) %>% \n  dplyr::select(-failed)\n\nmem_tab <- data.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>%\n  merge(., named)  %>% left_join(., tab)  \nmem_tab\n\n\n        plots recognized named plotted\n1   butterfly        147   140     110\n2 channel_img        109    98      44\n3     erp_img        117   109      62\n4        line        174   171     163\n5    parallel          7     5       2\n6        topo        167   166     153\n7  topo_array        165   148     121\n8    topo_map        170   169     137"
  },
  {
    "objectID": "feedbacks.html#the-most-common-names-for-each-plot",
    "href": "feedbacks.html#the-most-common-names-for-each-plot",
    "title": "Feedbacks",
    "section": "The most common names for each plot",
    "text": "The most common names for each plot\n\n1\n\n\nShow the code\nn1 <- word_preproc(data, 69)  %>%\n   mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\baverage(d)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\baverage(d)?\\\\b\", words_prep) == TRUE ~ \"averaged erp\",\n      grepl(\"\\\\bwave(form|forms)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\bwave(form|forms)?\\\\b\", words_prep) == TRUE ~ \"erp wave(form)s\",\n      grepl(\"\\\\btime(course|series|domain)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\btime(course|series|domain)?\\\\b\", words_prep) == TRUE ~ \"erp timecourse (timeseries)\",\n      grepl(\"\\\\b(erp(s)?|ep|related)\\\\b\", words) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(time|timeseries)\\\\b\", words) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(response(s)?)\\\\b\", words) == TRUE ~ \"response\",\n      grepl(\"\\\\b(line|boundedline)\\\\b\", words) == TRUE ~ \"line\",\n      grepl(\"\\\\b(single|singleplot)\\\\b\", words) == TRUE ~ \"single\",\n      grepl(\"\\\\b(waveform(s)?)\\\\b\", words) == TRUE ~ \"waveform\",\n       grepl(\"\\\\b(p300)\\\\b\", words) == TRUE ~ \"p300\",\n      grepl(\"\\\\b(average)\\\\b\", words) == TRUE ~ \"average\",\n      TRUE ~ '_other'\n      ))  %>%# filter(type == \"erp\") %>%  #View()\n   filter(!is.na(type), type != \"bad\") %>% dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq))  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Line plot\", \"n\")) \nn1 \n\n\n                     Line plot  n\n1                          erp 74\n2                 averaged erp 30\n3                       _other 13\n4  erp timecourse (timeseries) 12\n5              erp wave(form)s 12\n6                  time series  9\n7                      average  5\n8                       single  5\n9                         line  4\n10                    response  4\n11                        p300  2\n12                    waveform  2\n\n\n\n\n2\n\n\nShow the code\nn2 <- word_preproc(data, 80)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(butterfly|bitterfly|buterfly|buttefly)\\\\b\", words_prep) == TRUE ~ \"butterfly\",\n      grepl(\"\\\\b(spaghetti)\\\\b\", words_prep) == TRUE ~ \"spaghetti\",\n      grepl(\"\\\\b(time|timeseries|timecourse)\\\\b\", words_prep) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(channel|single|singleplot|individual)\\\\b\", words_prep)  == TRUE ~ \"single or individual channel erp\",\n      grepl(\"\\\\b(channels|multichannel|multeple|multiple|multi|all|muti|electrodes)\\\\b\", words_prep)  == TRUE ~ \"multichannel/electrode erp\",\n      grepl(\"\\\\b(evoked)\\\\b\", words_prep)  == TRUE ~ \"evoked responces\",\n      grepl(\"\\\\b(erp(s)?|eprs|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      TRUE ~ '_other'\n      )) %>% #filter(type == \"single or individual channel erp\") %>%  #View()\n  filter(!is.na(type), type != \"bad\") %>%\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq))  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Butterfly_plot\", \"n\")) \nn2\n\n\n                    Butterfly_plot  n\n1                        butterfly 69\n2 single or individual channel erp 19\n3                              erp 15\n4       multichannel/electrode erp 15\n5                      time series 10\n6                           _other  7\n7                 evoked responces  3\n8                        spaghetti  2\n\n\n\n\n3\n\n\nShow the code\nn3 <- word_preproc(data, 85)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(topo|topoplot(s)?)\\\\b\", words_prep) == TRUE ~ \"topo(plot)\", \n      grepl(\"\\\\b(topomap|topomape)\\\\b\", words_prep) == TRUE ~ \"topomap\",\n      grepl(\"\\\\b(topograph(y|ic|ical|ies)|topgraphy|topograbphy)\\\\b\", words_prep) == TRUE ~ \"topography\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(map)\\\\b\", words_prep) == TRUE ~ \"scalp map\",\n      grepl(\"\\\\b(distribution)\\\\b\", words_prep) == TRUE ~ \"scalp distribution\",\n      TRUE ~ '_other'\n      )) %>% \n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq))  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Topoplot\", \"n\")) \nn3\n\n\n            Topoplot  n\n1         topography 68\n2         topo(plot) 63\n3            topomap 13\n4             _other  8\n5          scalp map  7\n6 scalp distribution  5\n7            heatmap  3\n\n\n\n\n4\n\n\nShow the code\nn4 <- word_preproc(data, 90)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|\\\\?|unclear)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\btime(course)?\\\\b|\\\\btime(course)?\\\\b.*\\\\btopo(plot|plots)?|timetopoplot\\\\b\", words_prep) == TRUE ~ \"time topo\",\n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\bseries\\\\b|\\\\bseries\\\\b.*\\\\btopo(plot|plots)?\\\\b\", words_prep) == TRUE ~ \"topo series\",\n      grepl(\"\\\\b(topo(s)?|topoplot(s)?)\\\\b\", words_prep) == TRUE ~ \"topo\", \n      grepl(\"\\\\b(topomap(s|e)|topomap)\\\\b\", words_prep) == TRUE ~ \"topomap\",\n      grepl(\"\\\\btopograph(y|ic|ical|ies)\\\\b.*\\\\bmap(s)?\\\\b|\\\\bmap(s)?\\\\b.*\\\\btopograph(y|ic|ical|ies)\\\\b\", words_prep) == TRUE ~ \"topographical map\",\n      grepl(\"\\\\btopograph(y|ic|ical|ies)\\\\b.*\\\\btime\\\\b|\\\\btime\\\\b.*\\\\btopograph(y|ic|ical|ies)\\\\b\", words_prep) == TRUE ~ \"time topography\",\n      grepl(\"\\\\b(topograph(y|ic|ical|ies)|topgraphy|topograhy|topograbphy|topgraphies)\\\\b\", words_prep) == TRUE ~ \"topography\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(map(s)?)\\\\b\", words_prep) == TRUE ~ \"scalp map\",\n      grepl(\"\\\\b(time(series)?|serie(s)?)\\\\b\", words_prep) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(distribution)\\\\b\", words_prep) == TRUE ~ \"scalp distribution\",\n      TRUE ~ '_other'\n      )) %>%  #View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Topo map\", \"n\")) \nn4\n\n\n             Topo map  n\n1                topo 39\n2          topography 36\n3           time topo 24\n4             topomap 13\n5     time topography 12\n6   topographical map  9\n7           scalp map  8\n8              _other  6\n9         topo series  6\n10        time series  5\n11            heatmap  3\n12 scalp distribution  3\n\n\n\n\n5\n\n\nShow the code\nn5 <- word_preproc(data, 97)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|\\\\?|unclear|-|ugly|don't|useless)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\btopograph(y|ic|ical|ies)?|toprgraphic\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\btopograph(y|ic|ical|ies)?|toprgraphic\\\\b\", words_prep) == TRUE ~ \"topographic erp\",\n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\btopo(plot|plots)?\\\\b\", words_prep) == TRUE ~ \"topo erp\",\n      grepl(\"\\\\b(erp(s)?|eprs|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(multi(plot|channel|ploter|ploterp)|multi)\\\\b\", words_prep) == TRUE ~ \"multi or multichannel plot\",\n      grepl(\"\\\\b(topo(s)?|topoplot(s)?)\\\\b\", words_prep) == TRUE ~ \"topo\", \n      grepl(\"\\\\b(topograph(y|ic|ical|ies)?|topgraphy|topograhy|topograbphy|topgraphies)\\\\b\", words_prep) == TRUE ~ \"topography\",\n      grepl(\"\\\\b(channel(s|plot)?)\\\\b\", words_prep) == TRUE ~ \"channel\",\n      grepl(\"\\\\b(time(series)?|serie(s)?)\\\\b\", words_prep) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(scalp)\\\\b\", words_prep) == TRUE ~ \"scalp\",\n      TRUE ~ '_other'\n      )) %>% #filter(type==\"erp\") %>% View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Topo array\", \"n\")) \nn5\n\n\n                  Topo array  n\n1                        erp 54\n2            topographic erp 29\n3 multi or multichannel plot 17\n4                     _other  9\n5                    channel  6\n6                   topo erp  5\n7                      scalp  4\n8                       topo  4\n9                time series  2\n\n\n\n\n6\n\n\nShow the code\nn6 <- word_preproc(data, 102)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\\\?|\\\\?\\\\?|unclear|-|ugly|don't|x|useless)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\bimage\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\bimage|erpimage|image\\\\b\", words_prep) == TRUE ~ \"erp image\",\n      grepl(\"\\\\bimage\\\\b.*\\\\bepoch(s)?\\\\b|\\\\bepoch(s)?\\\\b.*\\\\bimage\\\\b\", words_prep) == TRUE ~ \"epoch image\",\n      grepl(\"\\\\b(raster(plot)?)\\\\b\", words_prep) == TRUE ~ \"raster\",\n      grepl(\"\\\\b(waterfall)\\\\b\", words_prep) == TRUE ~ \"waterfall\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(sort(ed)?)\\\\b\", words_prep) == TRUE ~ \"sorted trials\",\n      grepl(\"\\\\b(erp(s)?|eprs|ersp|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(voltage)\\\\b\", words_prep) == TRUE ~ \"voltage\",\n      grepl(\"\\\\b(time(series)?|serie(s)?)\\\\b\", words_prep) == TRUE ~ \"time series or frequencies\",\n      grepl(\"\\\\b(trial(s|wise)?|trialplot)\\\\b\", words_prep) == TRUE ~ \"trial or trial variations\",\n      TRUE ~ '_other'\n      )) %>% #View()\n  dplyr::select(type) %>%  table(.) %>%  \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"ERP image\", \"n\")) \nn6\n\n\n                    ERP image  n\n1                   erp image 30\n2                         erp 12\n3                      _other  9\n4               sorted trials  9\n5   trial or trial variations  7\n6                     heatmap  6\n7                      raster  5\n8  time series or frequencies  4\n9                     voltage  3\n10                  waterfall  2\n\n\n\n\n7\n\n\nShow the code\nn7 <- word_preproc(data, 107)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\\\?|\\\\?\\\\?|unclear|-|ugly|don't|x|useless)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(amplitude(s)?)\\\\b\", words_prep) == TRUE ~ \"amplitudes\",\n      TRUE ~ '_other'\n      )) %>% #View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Parallel plot\", \"n\")) \nn7\n\n\n  Parallel plot n\n1    amplitudes 4\n\n\n\n\n8\n\n\nShow the code\nn8 <- word_preproc(data, 112)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|normal|\\\\?|\\\\?\\\\?|unclear|recall|-|ugly|don't|x|useless|nan|clear)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\bimage\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\bimage|erpimage\\\\b\", words_prep) == TRUE ~ \"erp image\",\n      grepl(\"\\\\bimage\\\\b.*\\\\bchannel\\\\b|\\\\bchannel\\\\b.*\\\\bimage|chanimage|imagesc\\\\b\", words_prep) == TRUE ~ \"channel image\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(image)\\\\b\", words_prep) == TRUE ~ \"image\",\n      grepl(\"\\\\b(raster(plot)?|custer)\\\\b\", words_prep) == TRUE ~ \"raster\",\n      grepl(\"\\\\b(matrix)\\\\b\", words_prep) == TRUE ~ \"matrix\",\n      grepl(\"\\\\b(channel(s|wise)?)\\\\b\", words_prep) == TRUE ~ \"channels\",\n      grepl(\"\\\\b(erp(s)?|eprs|ersp|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(voltage)\\\\b\", words_prep) == TRUE ~ \"voltage\",\n     # TRUE ~ '_other'\n      )) %>% #View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"Channel_image\", \"n\")) \n\nn8\n\n\n  Channel_image  n\n1      channels 10\n2           erp  9\n3       heatmap  8\n4     erp image  7\n5       voltage  6\n6         image  5\n7        raster  5\n8        matrix  4\n9 channel image  3\n\n\nShow the code\nn8 %>% ggplot(data = ., aes(y = reorder(Channel_image, n),  x= n, fill = Channel_image)) +\n    geom_bar(stat=\"identity\") + ylab(\"Channel plot\") +\n    geom_text(aes(label = n), \n    hjust = -0.2) + theme_classic() + theme(legend.position=\"none\")\n\n\n\n\n\n\n\nCombined\n\n\nShow the code\nlist(n1, n2, n3, n4, n5, n6, n8) %>% kable(.) %>% kable_styling(\"striped\", position = \"center\",) \n\n\n\n\n\n  \n    \n\n\n \n  \n    Line plot \n    n \n  \n \n\n  \n    erp \n    74 \n  \n  \n    averaged erp \n    30 \n  \n  \n    _other \n    13 \n  \n  \n    erp timecourse (timeseries) \n    12 \n  \n  \n    erp wave(form)s \n    12 \n  \n  \n    time series \n    9 \n  \n  \n    average \n    5 \n  \n  \n    single \n    5 \n  \n  \n    line \n    4 \n  \n  \n    response \n    4 \n  \n  \n    p300 \n    2 \n  \n  \n    waveform \n    2 \n  \n\n\n\n \n    \n\n\n \n  \n    Butterfly_plot \n    n \n  \n \n\n  \n    butterfly \n    69 \n  \n  \n    single or individual channel erp \n    19 \n  \n  \n    erp \n    15 \n  \n  \n    multichannel/electrode erp \n    15 \n  \n  \n    time series \n    10 \n  \n  \n    _other \n    7 \n  \n  \n    evoked responces \n    3 \n  \n  \n    spaghetti \n    2 \n  \n\n\n\n \n    \n\n\n \n  \n    Topoplot \n    n \n  \n \n\n  \n    topography \n    68 \n  \n  \n    topo(plot) \n    63 \n  \n  \n    topomap \n    13 \n  \n  \n    _other \n    8 \n  \n  \n    scalp map \n    7 \n  \n  \n    scalp distribution \n    5 \n  \n  \n    heatmap \n    3 \n  \n\n\n\n \n    \n\n\n \n  \n    Topo map \n    n \n  \n \n\n  \n    topo \n    39 \n  \n  \n    topography \n    36 \n  \n  \n    time topo \n    24 \n  \n  \n    topomap \n    13 \n  \n  \n    time topography \n    12 \n  \n  \n    topographical map \n    9 \n  \n  \n    scalp map \n    8 \n  \n  \n    _other \n    6 \n  \n  \n    topo series \n    6 \n  \n  \n    time series \n    5 \n  \n  \n    heatmap \n    3 \n  \n  \n    scalp distribution \n    3 \n  \n\n\n\n \n    \n\n\n \n  \n    Topo array \n    n \n  \n \n\n  \n    erp \n    54 \n  \n  \n    topographic erp \n    29 \n  \n  \n    multi or multichannel plot \n    17 \n  \n  \n    _other \n    9 \n  \n  \n    channel \n    6 \n  \n  \n    topo erp \n    5 \n  \n  \n    scalp \n    4 \n  \n  \n    topo \n    4 \n  \n  \n    time series \n    2 \n  \n\n\n\n \n    \n\n\n \n  \n    ERP image \n    n \n  \n \n\n  \n    erp image \n    30 \n  \n  \n    erp \n    12 \n  \n  \n    _other \n    9 \n  \n  \n    sorted trials \n    9 \n  \n  \n    trial or trial variations \n    7 \n  \n  \n    heatmap \n    6 \n  \n  \n    raster \n    5 \n  \n  \n    time series or frequencies \n    4 \n  \n  \n    voltage \n    3 \n  \n  \n    waterfall \n    2 \n  \n\n\n\n \n    \n\n\n \n  \n    Channel_image \n    n \n  \n \n\n  \n    channels \n    10 \n  \n  \n    erp \n    9 \n  \n  \n    heatmap \n    8 \n  \n  \n    erp image \n    7 \n  \n  \n    voltage \n    6 \n  \n  \n    image \n    5 \n  \n  \n    raster \n    5 \n  \n  \n    matrix \n    4 \n  \n  \n    channel image \n    3"
  },
  {
    "objectID": "feedbacks.html#struggles-with-plots",
    "href": "feedbacks.html#struggles-with-plots",
    "title": "Feedbacks",
    "section": "Struggles with plots",
    "text": "Struggles with plots\n\n\nShow the code\nvec <- names(data[ , grepl( \".*Which parts of*.\" , names(data))])\nwhich(names(data) %in% vec)\n\n\n[1]  72  83  88  93 100 105 110 115\n\n\n\n\nShow the code\nword_preproc_tool_2 <- function(data, N, lim){\n  #lim = 10\n  tmp <- data %>% dplyr::select(N, N+1, N+2) %>% dplyr::rename(soft = !!names(.)[1], parts = !!names(.)[2], new_feature = !!names(.)[3]) %>% \n    filter(!is.na(soft)) %>% \n    mutate_at(vars(colnames(.)), funs(tolower(.))) %>% \n    mutate(soft = str_replace(soft, 'own', \"custom\"), \n           soft = str_replace(soft, '(matlab)', \"matlab\"), \n           soft = case_when(\n      str_detect(soft, 'brain vision') ~ \"brain vision analyser\",\n      #str_detect(soft, 'matlab|bar.m|boundedline') ~ \"custom matlab\",\n      str_detect(soft, 'mne') ~ \"mne\",\n      TRUE ~ as.character(soft)\n    ), \n    parts = case_when(\n      str_detect(parts, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t|easy') ~ \"-\",\n      TRUE ~ as.character(parts)\n    ),\n    new_feature = case_when(\n      str_detect(new_feature, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(new_feature)\n    )) %>% \n  \n    filter_at(vars(parts, new_feature), all_vars(!is.na(.))) %>% mutate(n = lengths(gregexpr(\"\\\\W+\", soft)) + 1) %>% \n    filter(parts != \"-\" | new_feature != \"-\", n < lim) %>%  dplyr::select(-4) %>% arrange(soft)\n  return(tmp)\n}\n\n\n\n1\n\n\nShow the code\nstruggle1 <- word_preproc_tool_2(data, 71, 10) \nseparated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(soft, parts)\n\ntmp <- struggle1 %>% filter( parts != \"-\") %>% dplyr::select(soft, parts) %>% \n  filter(!row_number() %in% c(2, 11, 40, 41, 69, 78, 83, 87, 89, 91))  %>% \n  separate_rows(parts, sep = \"2\\\\)\", convert = FALSE) %>% \n  separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\", \n      grepl(\"\\\\b(axes|lable(s)?|label(s)?|legend|ticks)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(color(s)?|colour(s)?|proportion(s)?|publication|scal(e|ing))\\\\b\", parts) == TRUE ~ \"styling and color\", \n      grepl(\"\\\\b(preprocessing|extracting|datatype)\\\\b\", parts) == TRUE ~ \"preprocessing\", \n      grepl(\"\\\\b(syncronisation|organizing|groups)\\\\b\", parts) == TRUE ~ \"subplotting\", \n      grepl(\"\\\\b(mean|significan(t|ce)|permutations|combine)\\\\b\", parts) == TRUE ~ \"statistics\", \n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) #%>% View()\n\nn_rest <- mem_tab[4, 3] - nrow(tmp)\n\ntmp1 <- tmp  %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\nproblem1 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = \"line plot\")\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    91 \n    53.2 \n    53 \n  \n  \n    uncertainty \n    51 \n    29.8 \n    30 \n  \n  \n    plot components\n(axes, lables, legend) \n    12 \n    7.0 \n    7 \n  \n  \n    styling and color \n    7 \n    4.1 \n    4 \n  \n  \n    statistics \n    4 \n    2.3 \n    2 \n  \n  \n    preprocessing \n    3 \n    1.8 \n    2 \n  \n  \n    subplotting \n    3 \n    1.8 \n    2 \n  \n\n\n\n\n\nShow the code\n# problems: n of problems is higher than number of rows \n\n\n\n\nShow the code\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() +\n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n\nShow the code\ntmp %>%  mutate(soft1 = case_when(\n      grepl(\"\\\\bmne\\\\w*\", soft) == TRUE ~ \"mne\", \n      grepl(\"\\\\bcustom\\\\b.*\\\\bmatlab\\\\b|\\\\bmatlab\\\\b.*\\\\bcustom\\\\b\", soft) == TRUE ~ \"custom matlab\",\n\n      TRUE ~ as.character(soft)\n      )) %>% dplyr::rename(initial = parts) %>% View()\n\n\n\n\n2\n\n\nShow the code\nstruggle2 <- word_preproc_tool_2(data, 82, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle2 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>%\n  filter(!row_number() %in% c(18, 31))  %>% \n  #separate_rows(parts, sep = \"2\\\\)\", convert = FALSE) %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\", \n      grepl(\"\\\\b(ax(is|es)?|lable(s)?|label(s)?|legend|ticks)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(color(s|ing)?|colour(s)?|proportion(s)?|publication|neg|scal(e|ing))\\\\b\", parts) == TRUE ~ \"styling and color\", \n      grepl(\"\\\\btopo\\\\w*\", parts) == TRUE ~ \"adding topography\", \n      grepl(\"\\\\b(channel(s)?|electrodes(s)?|interpretable|read|remembering)\\\\b\", parts) == TRUE ~ \"channel selection\\n(differentiation, identification)\"\n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) \n\nn_rest <- mem_tab[1, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\nproblem2 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = \"butterfly plot\")\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    107 \n    76.4 \n    76 \n  \n  \n    styling and color \n    14 \n    10.0 \n    10 \n  \n  \n    channel selection\n(differentiation, identification) \n    11 \n    7.9 \n    8 \n  \n  \n    adding topography \n    5 \n    3.6 \n    4 \n  \n  \n    plot components\n(axes, lables, legend) \n    2 \n    1.4 \n    1 \n  \n  \n    uncertainty \n    1 \n    0.7 \n    1 \n  \n\n\n\n\n\n\n\nShow the code\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() +\n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n\n3\n\n\nShow the code\nstruggle3 <- word_preproc_tool_2(data, 87, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle3 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  filter(!row_number() %in% c(5, 7, 16, 18, 43, 50))  %>% \n  separate_rows(parts, sep = \";\", convert = FALSE) %>% filter(nchar(parts) != 0) %>%  \n  filter(!row_number() %in% c(59))  %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(head|headshape|montage|topographies)\\\\b\", parts) == TRUE ~ \"head shape and montage\",\n    grepl(\"\\\\b(time|threshold)\\\\b\", parts) == TRUE ~ \"time selection\",\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\",\n      grepl(\"\\\\b(channel(s)?|electrode(s)?|sensors|elec)\\\\b\", parts) == TRUE ~ \"channel selection\\n(differentiation, identification)\",\n      grepl(\"\\\\b(color(s|ing|bar|map)?|colour(s)?|proportion(s)?|publication|limits|neg|scal(e|ing|es))\\\\b\", parts) == TRUE ~ \"styling and color\", \n      grepl(\"\\\\b(ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|features|layout)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(mean|significan(t|ce)|permutations|p-value(s)?|smoothing|statistical|stats)\\\\b\", parts) == TRUE ~ \"statistics\",\n      grepl(\"\\\\b(interpolat(e|ion)?|edges)\\\\b\", parts) == TRUE ~ \"interpolation\",\n      \n     # grepl(\"\\\\btopo\\\\w*\", parts) == TRUE ~ \"adding topography\", \n     \n      )) %>% #filter(is.na(problems))  %>% View() \n\nfilter(nchar(parts) != 0) %>% filter(!is.na(problems)) \n\nn_rest <- mem_tab[6, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\nproblem3 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = \"topoplot\")\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    106 \n    63.9 \n    64 \n  \n  \n    channel selection\n(differentiation, identification) \n    19 \n    11.4 \n    11 \n  \n  \n    styling and color \n    14 \n    8.4 \n    8 \n  \n  \n    head shape and montage \n    11 \n    6.6 \n    7 \n  \n  \n    time selection \n    6 \n    3.6 \n    4 \n  \n  \n    plot components\n(axes, lables, legend) \n    4 \n    2.4 \n    2 \n  \n  \n    interpolation \n    3 \n    1.8 \n    2 \n  \n  \n    statistics \n    3 \n    1.8 \n    2 \n  \n\n\n\n\n\n\n\nShow the code\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n\n4\n\n\nShow the code\nstruggle4 <- word_preproc_tool_2(data, 92, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle4 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  filter(!grepl(\"\\\\b(no|okay)\\\\b\", parts)) %>%\n  filter(!row_number() %in% c(17, 51, 12 ))  %>% \n  separate_rows(parts, sep = \";\", convert = FALSE) %>% \n#filter(!row_number() %in% c(59))  %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(head|headshape|montage|topographies|topoplots|shape)\\\\b\", parts) == TRUE ~ \"head shape and montage\",\n    grepl(\"\\\\b(time(s|course)?|threshold)\\\\b\", parts) == TRUE ~ \"time selection\",\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\",\n      grepl(\"\\\\b(channel(s)?|electrode(s)?|sensors|elec)\\\\b\", parts) == TRUE ~ \"channel selection\\n(differentiation, identification)\",\n      grepl(\"\\\\b(color(s|ing|bar|map)?|colour(s)?|proportion(s)?|publication|limits|neg|scal(e|ing|es))\\\\b\", parts) == TRUE ~ \"styling and color\", \n      grepl(\"\\\\b(ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|features|markers|layout|specifications)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(mean|significan(t|ce)|permutations|p-value(s)?|smoothing|statistical|stats|t-stat)\\\\b\", parts) == TRUE ~ \"statistics\",\n      grepl(\"\\\\b(interpolat(e|ion)?|edges)\\\\b\", parts) == TRUE ~ \"interpolation\",\n      TRUE ~ '_other'\n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) \n\nn_rest <- mem_tab[8, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \nproblem4 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = \"topomap\")\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    119 \n    70.4 \n    70 \n  \n  \n    time selection \n    23 \n    13.6 \n    14 \n  \n  \n    styling and color \n    11 \n    6.5 \n    7 \n  \n  \n    _other \n    5 \n    3.0 \n    3 \n  \n  \n    channel selection\n(differentiation, identification) \n    3 \n    1.8 \n    2 \n  \n  \n    head shape and montage \n    3 \n    1.8 \n    2 \n  \n  \n    plot components\n(axes, lables, legend) \n    3 \n    1.8 \n    2 \n  \n  \n    statistics \n    2 \n    1.2 \n    1 \n  \n\n\n\n\n\nShow the code\n # words = ifelse(nchar(words)==0, NA, words),\n#write.xlsx(tmp, \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\n\n\nShow the code\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n\n5\n\n\nShow the code\nstruggle5 <- word_preproc_tool_2(data, 99, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle5 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  #filter(!grepl(\"\\\\b(no|okay)\\\\b\", parts)) %>%\n  filter(!row_number() %in% c(33 ))  %>% \n  separate_rows(parts, sep = \";\", convert = FALSE) %>% #View()\n#filter(!row_number() %in% c(59))  %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(selecting|marking|spotting)\\\\b\", parts) == TRUE ~ \"channel selection\\n(differentiation, identification)\",\n    grepl(\"\\\\b(legible|readable|visible|small|datatype|shape|montage|subplots|size(s)?|channel(s)?|electrode(s)?|sensors)|scal(e|ing|es)|references\\\\b\", parts) == TRUE ~ \"legibility and scaling\",\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\",\n      grepl(\"\\\\b(color(s|ing|bar|map)?|colour(s)?|proportion(s)?|publication|limits|quality|scal(e|ing|es))\\\\b\", parts) == TRUE ~ \"publication quality and color\", \n      grepl(\"\\\\b(ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|edit|features|markers|layout|specifications)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(preprocessing|extracting|masks)\\\\b\", parts) == TRUE ~ \"preprocessing\", \n    \n      TRUE ~ '_other'\n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) #%>% View()\n\nn_rest <- mem_tab[7, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\nproblem5 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = \"topo array\")\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    101 \n    68.2 \n    68 \n  \n  \n    legibility and scaling \n    31 \n    20.9 \n    21 \n  \n  \n    publication quality and color \n    5 \n    3.4 \n    3 \n  \n  \n    plot components\n(axes, lables, legend) \n    4 \n    2.7 \n    3 \n  \n  \n    channel selection\n(differentiation, identification) \n    3 \n    2.0 \n    2 \n  \n  \n    preprocessing \n    2 \n    1.4 \n    1 \n  \n  \n    uncertainty \n    2 \n    1.4 \n    1 \n  \n\n\n\n\n\n\n\nShow the code\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n\n6\n\n\nShow the code\nstruggle6 <- word_preproc_tool_2(data, 104, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle6 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  filter(!grepl(\"\\\\b(x|ok)\\\\b\", parts)) %>% \n # filter(!row_number() %in% c(33 ))  %>% \n  separate_rows(parts, sep = \";\", convert = FALSE) %>% #View()\n#filter(!row_number() %in% c(59))  %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(sort(ing)?|max|correspondance)\\\\b\", parts) == TRUE ~ \"sorting\", \n    grepl(\"\\\\b(smoothing)\\\\b\", parts) == TRUE ~ \"smoothing\", \n    grepl(\"\\\\b(epochs|time)\\\\b\", parts) == TRUE ~ \"defining epochs\", \n    grepl(\"\\\\b(color|paper)\\\\b\", parts) == TRUE ~ \"style\", \n    \n      TRUE ~ '_other'\n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) #%>% View()\n\nn_rest <- mem_tab[7, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \n\n\nproblem6 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = \"erp image\")\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    133 \n    89.9 \n    90 \n  \n  \n    sorting \n    6 \n    4.1 \n    4 \n  \n  \n    smoothing \n    3 \n    2.0 \n    2 \n  \n  \n    _other \n    2 \n    1.4 \n    1 \n  \n  \n    defining epochs \n    2 \n    1.4 \n    1 \n  \n  \n    style \n    2 \n    1.4 \n    1 \n  \n\n\n\n\n\n\n\nShow the code\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n\n8\n\n\nShow the code\nstruggle8 <- word_preproc_tool_2(data, 114, 10) \n#separated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\ntmp <- struggle8 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  filter(!grepl(\"\\\\b(n|x|ok|dont)\\\\b\", parts)) %>% \n # filter(!row_number() %in% c(33 ))  %>% \n  #separate_rows(parts, sep = \";\", convert = FALSE) %>% #View()\n#filter(!row_number() %in% c(59))  %>% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(sort(ing)?|order(ing)?|organisation)\\\\b\", parts) == TRUE ~ \"order and sorting\", \n   # grepl(\"\\\\b(smoothing)\\\\b\", parts) == TRUE ~ \"smoothing\", \n    #grepl(\"\\\\b(epochs|time)\\\\b\", parts) == TRUE ~ \"defining epochs\", \n    grepl(\"\\\\b(color(bar)?|paper)\\\\b\", parts) == TRUE ~ \"style\", \n    \n      TRUE ~ '_other'\n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems)) \n\nn_rest <- mem_tab[2, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(problems) %>%\n      dplyr::summarise(n = n()) %>% \n      rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100 ,percent1 = round(n / sum(n), 2) * 100) \nproblem8 <- tmp1 %>% dplyr::select(problems, percent1) %>% mutate(name = \"channel image\")\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    problems \n    n \n    percent \n    percent1 \n  \n \n\n  \n    no complains \n    87 \n    88.8 \n    89 \n  \n  \n    order and sorting \n    5 \n    5.1 \n    5 \n  \n  \n    _other \n    3 \n    3.1 \n    3 \n  \n  \n    style \n    3 \n    3.1 \n    3 \n  \n\n\n\n\n\n\n\nShow the code\ntmp1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")"
  },
  {
    "objectID": "feedbacks.html#new-feature",
    "href": "feedbacks.html#new-feature",
    "title": "Feedbacks",
    "section": "New feature",
    "text": "New feature\n\n1\n\n\nShow the code\ntmp <- struggle1 %>% filter( new_feature != \"-\") %>% dplyr::select(new_feature) %>%\n  filter(!grepl(\"\\\\b(\\\\.|\\\\/|see)\\\\b\", new_feature)) %>%  \n  filter(!row_number() %in% c(13, 18, 20  ))  %>% \n  separate_rows(new_feature, sep = \";\", convert = FALSE) %>% \n#filter(!row_number() %in% c(59))  %>% \n  separate_rows(new_feature, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>% \n  mutate(group = case_when(\n    grepl(\"\\\\bsignif\\\\w*\", new_feature) == TRUE ~ \"adding significance\", \n    grepl(\"\\\\bstat\\\\w*\", new_feature) == TRUE ~ \"adding statistics\", \n    grepl(\"\\\\btopo\\\\w*\", new_feature) == TRUE ~ \"adding topoplot\", \n    grepl(\"\\\\b(custom\\\\w*|details|annotations|font|labels|color|colours|thicker)\", new_feature) == TRUE ~ \"customization (color, labels)\", \n    grepl(\"\\\\b(electrode|click|control|interact\\\\w*|gui|select\\\\w*)\", new_feature) == TRUE ~ \"interactivity and channel selection\", \n    grepl(\"\\\\b(highlight|shadow|window)\", new_feature) == TRUE ~ \"area highlighting\", \n    grepl(\"\\\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", new_feature) == TRUE ~ \"uncertainty\", \n    \n      TRUE ~ '_other'\n      )) %>% filter(nchar(new_feature) != 0) #%>% View()\n\n#n_rest <- mem_tab[2, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(group) %>%\n      dplyr::summarise(n = n()) %>% \n     # rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    group \n    n \n    percent \n    percent1 \n  \n \n\n  \n    uncertainty \n    15 \n    24.2 \n    24 \n  \n  \n    _other \n    10 \n    16.1 \n    16 \n  \n  \n    customization (color, labels) \n    10 \n    16.1 \n    16 \n  \n  \n    interactivity and channel selection \n    9 \n    14.5 \n    15 \n  \n  \n    adding significance \n    6 \n    9.7 \n    10 \n  \n  \n    adding statistics \n    6 \n    9.7 \n    10 \n  \n  \n    area highlighting \n    4 \n    6.5 \n    6 \n  \n  \n    adding topoplot \n    2 \n    3.2 \n    3 \n  \n\n\n\n\n\nShow the code\n # words = ifelse(nchar(words)==0, NA, words),\n#write.xlsx(tmp, \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\n\n\n2\n\n\nShow the code\ntmp <- struggle2 %>% filter( new_feature != \"-\") %>% dplyr::select(new_feature) %>% #View()\n  filter(!grepl(\"\\\\b(see|not|useful)\\\\b\", new_feature)) %>%  \n  #filter(!row_number() %in% c(13, 18, 20  ))  %>% \n  #separate_rows(new_feature, sep = \";\", convert = FALSE) %>% \n#filter(!row_number() %in% c(59))  %>% \n  separate_rows(new_feature, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>% \n  mutate(group = case_when(\n    grepl(\"\\\\bsignif\\\\w*\", new_feature) == TRUE ~ \"adding significance\", \n    grepl(\"\\\\b(stat\\\\w*|average|mean)\", new_feature) == TRUE ~ \"adding statistics\", \n    grepl(\"\\\\btopo\\\\w*\", new_feature) == TRUE ~ \"adding topoplot\", \n    grepl(\"\\\\b(custom\\\\w*|details|annotations|opacity|font|labels|color|colour(s)?|thicker)\", new_feature) == TRUE ~ \"customization (color, labels)\", \n    grepl(\"\\\\b(manipulating|highlight|graying|click|control|interact\\\\w*|gui|select\\\\w*)\", new_feature) == TRUE ~ \"interactivity and channel selection\", \n    grepl(\"\\\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", new_feature) == TRUE ~ \"uncertainty\", \n    \n      TRUE ~ '_other'\n      )) %>% filter(nchar(new_feature) != 0) #%>% View()\n\n#n_rest <- mem_tab[2, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(group) %>%\n      dplyr::summarise(n = n()) %>% \n     # rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    group \n    n \n    percent \n    percent1 \n  \n \n\n  \n    interactivity and channel selection \n    15 \n    36.6 \n    37 \n  \n  \n    customization (color, labels) \n    10 \n    24.4 \n    24 \n  \n  \n    adding topoplot \n    7 \n    17.1 \n    17 \n  \n  \n    _other \n    4 \n    9.8 \n    10 \n  \n  \n    adding statistics \n    4 \n    9.8 \n    10 \n  \n  \n    uncertainty \n    1 \n    2.4 \n    2 \n  \n\n\n\n\n\n\n\n3\n\n\nShow the code\ntmp <- struggle3 %>% filter( new_feature != \"-\") %>% dplyr::select(new_feature) %>% \n  filter(!grepl(\"\\\\b(no|\\\\/|above|good|balanced)\\\\b\", new_feature)) %>%  #View()\n  #filter(!row_number() %in% c(13, 18, 20  ))  %>% \n  #separate_rows(new_feature, sep = \";\", convert = FALSE) %>% \n#filter(!row_number() %in% c(59))  %>% \n  separate_rows(new_feature, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>% \n  mutate(group = case_when(\n    grepl(\"\\\\bsignif\\\\w*\", new_feature) == TRUE ~ \"adding significance\",\n    grepl(\"\\\\b(3d)\\\\b\", new_feature) == TRUE ~ \"3d\", \n    grepl(\"\\\\b(stat\\\\w*|average|mean)\\\\b\", new_feature) == TRUE ~ \"adding statistics\", \n    grepl(\"\\\\b(interpolat\\\\w*|extrapolat\\\\w*)\\\\b\", new_feature) == TRUE ~ \"interpolation and extrapolation\", \n    grepl(\"\\\\btopo\\\\w*\", new_feature) == TRUE ~ \"adding topoplot\", \n    grepl(\"\\\\b(custom\\\\w*|details|annotations|opacity|font|labels|color(s|map|maps|bar)?|colour(s)?|thicker)\\\\b\", new_feature) == TRUE ~ \"customization (color, labels)\", \n    grepl(\"\\\\b(anomatiom|slider|scrolling|gif|manipulating|hightlight|highlight|graying|click|control|interact\\\\w*|gui|select\\\\w*)\", new_feature) == TRUE ~ \"interactivity and channel selection\", \n    grepl(\"\\\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", new_feature) == TRUE ~ \"uncertainty\", \n     grepl(\"\\\\b(shape(s)?|circle|head)\\\\b\", new_feature) == TRUE ~ \"head shape\", \n      TRUE ~ '_other'\n      )) %>% filter(nchar(new_feature) != 0)# %>% View()\n\n#n_rest <- mem_tab[2, 3] - nrow(tmp)\n\ntmp1 <- tmp %>% group_by(group) %>%\n      dplyr::summarise(n = n()) %>% \n     # rbind(c(\"no complains\", as.numeric(n_rest))) %>% \n      mutate(n = as.numeric(n)) %>% \n      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) \n\n\ntmp1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n \n  \n    group \n    n \n    percent \n    percent1 \n  \n \n\n  \n    customization (color, labels) \n    17 \n    27.4 \n    27 \n  \n  \n    interactivity and channel selection \n    12 \n    19.4 \n    19 \n  \n  \n    _other \n    10 \n    16.1 \n    16 \n  \n  \n    3d \n    5 \n    8.1 \n    8 \n  \n  \n    head shape \n    5 \n    8.1 \n    8 \n  \n  \n    interpolation and extrapolation \n    5 \n    8.1 \n    8 \n  \n  \n    adding significance \n    3 \n    4.8 \n    5 \n  \n  \n    adding topoplot \n    3 \n    4.8 \n    5 \n  \n  \n    adding statistics \n    2 \n    3.2 \n    3"
  },
  {
    "objectID": "customs.html#plot-naming",
    "href": "customs.html#plot-naming",
    "title": "Visualisation customs",
    "section": "Plot naming",
    "text": "Plot naming\nThose who named a plot somehow and those who failed to do that\n\n\nShow the code\nword_preproc <- function(data, N){\n # N = 69\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"like\", \"s\", \"plot\", \"plots\")\n  tmp <- data %>% filter(!is.na(.[[N]])) %>% select(., N) %>% \n    dplyr::rename(words = !!names(.)[1]) %>% mutate(words = tolower(words)) %>% \n    mutate(words_prep = str_split(words, \"\\\\s+\")) %>%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \"))) %>% \n    mutate(words_prep = stri_replace_all_regex(words_prep,\n                                  pattern=c(\" \\\\(.*\", \", or.*\", \" across.*\", \" with.*\", \" at.*\", \" by.*\", \" over.*\", #\" of.*\", \n                                            \" for.*\", \" per.*\", \" across.*\", \" accross.*\", \" between.*\"),\n                                  replacement=c(''),\n                                  vectorize=FALSE)) %>% \n    mutate(words_prep = str_split(words_prep, \"\\\\s+\")) %>%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \")))\n     \n  return(tmp)\n}\n\n\n\n\nShow the code\nvec_named <- names(data[ , grepl( \"How would you \" , names(data))])\nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_map\", \"topo_array\", \"erp_img\", \"parallel\", \"channel_img\")\n\nna_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|why'), \"NA\", as.character(words))) %>%\n      mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n      table(.) %>% \n      data.frame(.) %>% filter(words != \"NA\") %>% \n      summarise(n = sum(Freq))  \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- plot_names\n    return(temp)\n}\n\nnum_named <- na_table(data, vec_named)\n\nslice(num_named, 1)  %>% \n  gather(., plots, succeeded, `line`:`channel_img`, factor_key=TRUE) %>% \n  mutate(failed = nrow(data) - succeeded) %>% \n  gather(., res, score, succeeded:failed, factor_key=TRUE) %>% \n\n  ggplot(., aes(x = plots, y = score, fill = res)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic() + theme(axis.title.x=element_blank(), plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = score, group = res), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Plot naming\")\n\n\n\n\n\n\n\nShow the code\nvec_plotted <- names(data[ , grepl( \"Have you ever plotted \" , names(data))]) \n\n\ndo_vec <- function(vec_plotted, data, plot_names){\n  t1 <- table(data[vec_plotted[1]])\n  for (i in 2:length(vec_plotted)) {\n    t <- table(data[vec_plotted[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec_plotted)))\n  return(t1)\n}\n\ntab <- do_vec(vec_plotted, data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nnamed <- slice(num_named, 1)  %>% \n  gather(., plots, succeeded, `line`:`channel_img`, factor_key=TRUE)%>% \n  mutate(failed = nrow(data) - succeeded) %>% \n  dplyr::rename(named = succeeded) %>% \n  dplyr::select(-failed)\n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\nmem_tab <- data.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>%\n  merge(., named)  %>% left_join(., tab)  \n\nmem_tab %>% #filter(plots != \"parallel\") %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of\\nfamiliarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2) +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Familiarity with plots\")"
  },
  {
    "objectID": "connections.html#experience-and-tools",
    "href": "connections.html#experience-and-tools",
    "title": "Linear models",
    "section": "Experience and tools",
    "text": "Experience and tools\n\n\nShow the code\nvec <- names(data[25:51]) %>% str_split_i(., \"\\\\? \\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:51] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% #mutate(`Custom scripts` = ifelse(Other == \"Custom scripts\", \"Yes\", `Custom scripts`)) %>% \n  dplyr::select(-Other) %>% \n  mutate_at(vars(vec[1:26]), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %>% \n  cbind(data[20], .) %>% dplyr::rename(years = !!names(.)[1]) %>% filter(years < 50) %>% \n  select_if(colSums(.) != 0)\n\n\n\nTools and year of experience\n\n\nShow the code\na <- software  %>% \n  select_if(colSums(.) > 10) \n\nres <- a %>%  dplyr::select(years, BESA) %>% \n  group_by(BESA) %>% dplyr::summarise(mean(years)) %>% dplyr::rename(., Usage = BESA, BESA = `mean(years)`)\n\ncn <- colnames(a[3:length(a)])\nfor (i in 1:length(cn)){\n  tmp <- a %>%  dplyr::select(years, cn[i]) %>% \n  group_by_at(2) %>% dplyr::summarise( mean(years)) %>%  dplyr::select(-1)\n  colnames(tmp) <- cn[i] \n  res <- cbind(res, tmp) \n  #print(cn[i])\n}\n res %>% t()  %>%\n  row_to_names(row_number = 1) %>% data.frame() %>% dplyr::rename(., not_used = X0, used = X1) %>% \n  tibble::rownames_to_column(., \"software\") %>%  \n  dplyr::mutate(., not_used = round(not_used, 2), used = round(used, 2)) %>% \n  dplyr::mutate(., status = ifelse(not_used > used, \"younger\", \"older\")) %>% \n  mutate(status = cell_spec(status, color = ifelse(status == \"younger\", \"green\", \"black\")))   %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>%\n   add_header_above(header = c(\" \" = 1, \"Years of user experience\" = 3))   %>%\n  kable_classic(full_width = T, html_font = \"Arial\")\n\n\n\n\n \n\n\nYears of user experience\n\n  \n    software \n    not_used \n    used \n    status \n  \n \n\n  \n    BESA \n    7.74 \n    8.58 \n    older \n  \n  \n    Brainstorm \n    7.64 \n    8.53 \n    older \n  \n  \n    Brain Vision Analyser \n    7.74 \n    8.00 \n    older \n  \n  \n    EEGLAB \n    6.27 \n    8.72 \n    older \n  \n  \n    ERPLAB \n    7.46 \n    9.08 \n    older \n  \n  \n    FieldTrip \n    7.51 \n    8.11 \n    older \n  \n  \n    LIMO \n    7.57 \n    10.50 \n    older \n  \n  \n    MNE-Python \n    8.22 \n    7.19 \n    younger \n  \n  \n    SPM \n    7.71 \n    8.58 \n    older \n  \n  \n    Custom scripts \n    7.32 \n    8.62 \n    older \n  \n\n\n\n\n\n\n\nShow the code\n# na.omit(data[51]) %>% nrow() # change others here \n# other <- c(rep(\"Custom scripts\", each=9), \"4DBTi\", rep(\"letswave\", 3), \"mTRF\", \"RAGU\", \"IGOR Pro\", \"EEGProcessor\", \"ELAN\", \"WinEEG\") %>% table(.) %>% data.frame(.) %>% rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))\n# data.frame(rowSums(t(software))) %>%  tibble::rownames_to_column(., \"soft\") %>% \n#   rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\")) %>% \n#  rbind(., other) %>% dplyr::group_by(soft) %>% dplyr::summarise(sum_scores = sum(sum_scores))"
  },
  {
    "objectID": "connections.html#experience-factor",
    "href": "connections.html#experience-factor",
    "title": "Linear models",
    "section": "Experience factor",
    "text": "Experience factor\n\n\nShow the code\nm = FAMD(exp_data[1:5], ncp=2, axes=c(1,2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npics <- fviz_famd_ind(m, col.ind = \"cos2\", \n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE)\npics\n\n\n\n\n\n\n\nShow the code\nfactor_scores <- as.data.frame(m$ind$coord)\nhead(factor_scores)\n\n\n       Dim.1      Dim.2\n1 -1.5303106 -0.1469071\n2 -0.8668375 -0.5862766\n3 -0.2361600 -1.4409580\n4  0.6099401 -0.9023251\n5  0.1887863  1.2908970\n6  0.9587131 -0.7597601\n\n\nShow the code\ncbind(data[20], factor_scores[1])  %>% \n   rename_at(vars(colnames(.)), ~ c(\"years\", \"proxy\")) %>% \n  with(cor.test( proxy, years)) %>% \n  broom::tidy()\n\n\n# A tibble: 1 × 8\n  estimate statistic  p.value parameter conf.low conf.high method        alter…¹\n     <dbl>     <dbl>    <dbl>     <int>    <dbl>     <dbl> <chr>         <chr>  \n1    0.617      10.7 5.08e-21       185    0.520     0.699 Pearson's pr… two.si…\n# … with abbreviated variable name ¹​alternative\n\n\nShow the code\n  #lm(data=.,years ~ proxy) %>% summary(.)"
  },
  {
    "objectID": "connections.html#experience-and",
    "href": "connections.html#experience-and",
    "title": "Linear models",
    "section": "Experience and …",
    "text": "Experience and …\n\nUp or down\n\n\nShow the code\ncbind(data[79], factor_scores[1])  %>% \n   rename_at(vars(colnames(.)), ~ c(\"ud\", \"proxy\")) %>% filter(!is.na(ud)) %>% \n  mutate(ud = ifelse(ud==\"Up\", 1, 0)) %>% \n  t.test( proxy ~ ud , data=.) %>% \n  broom::tidy()\n\n\n# A tibble: 1 × 10\n  estim…¹ estim…² estim…³ stati…⁴ p.value param…⁵ conf.…⁶ conf.…⁷ method alter…⁸\n    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <chr>  <chr>  \n1   0.405   0.348 -0.0576    1.15   0.257    38.9  -0.307    1.12 Welch… two.si…\n# … with abbreviated variable names ¹​estimate, ²​estimate1, ³​estimate2,\n#   ⁴​statistic, ⁵​parameter, ⁶​conf.low, ⁷​conf.high, ⁸​alternative\n\n\nShow the code\ncbind(data[79], factor_scores[1])  %>% \n   rename_at(vars(colnames(.)), ~ c(\"ud\", \"proxy\")) %>% filter(!is.na(ud)) %>% \n  ggplot(., aes(x=as.factor(ud), y = proxy)) + \n  geom_boxplot() + labs(x = \"Aware or not abour colorbar controvercies\", y = \"Experience\") +  theme_classic()\n\n\n\n\n\n\n\nColorbars\n\n\n\n\n\nTools\n\n\nShow the code\nvec <- names(data[25:51]) %>% str_split_i(., \"\\\\? \\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:51] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% #mutate(`Custom scripts` = ifelse(Other == \"Custom scripts\", \"Yes\", `Custom scripts`)) %>% \n  dplyr::select(-Other) %>% \n  mutate_at(vars(vec[1:26]), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %>% \n  cbind(data[20], .) %>% dplyr::rename(years = !!names(.)[1]) %>% filter(years < 50) %>% \n  select_if(colSums(.) != 0)\n\n\n\n\nShow the code\na <- software  %>% \n  select_if(colSums(.) > 10) \n\nres <- a %>%  dplyr::select(years, BESA) %>% \n  group_by(BESA) %>% dplyr::summarise(mean(years)) %>% dplyr::rename(., Usage = BESA, BESA = `mean(years)`)\n\ncn <- colnames(a[3:length(a)])\nfor (i in 1:length(cn)){\n  tmp <- a %>%  dplyr::select(years, cn[i]) %>% \n  group_by_at(2) %>% dplyr::summarise( mean(years)) %>%  dplyr::select(-1)\n  colnames(tmp) <- cn[i] \n  res <- cbind(res, tmp) \n  #print(cn[i])\n}\n res %>% t()  %>%\n  row_to_names(row_number = 1) %>% data.frame() %>% dplyr::rename(., not_used = X0, used = X1) %>% \n  tibble::rownames_to_column(., \"software\") %>%  \n  dplyr::mutate(., not_used = round(not_used, 2), used = round(used, 2)) %>% \n  dplyr::mutate(., status = ifelse(not_used > used, \"younger\", \"older\")) %>% \n  mutate(status = cell_spec(status, color = ifelse(status == \"younger\", \"green\", \"black\")))   %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>%\n   add_header_above(header = c(\" \" = 1, \"Years of user experience\" = 3))   %>%\n  kable_classic(full_width = T, html_font = \"Arial\")\n\n\n\n\n \n\n\nYears of user experience\n\n  \n    software \n    not_used \n    used \n    status \n  \n \n\n  \n    BESA \n    7.74 \n    8.58 \n    older \n  \n  \n    Brainstorm \n    7.64 \n    8.53 \n    older \n  \n  \n    Brain Vision Analyser \n    7.74 \n    8.00 \n    older \n  \n  \n    EEGLAB \n    6.27 \n    8.72 \n    older \n  \n  \n    ERPLAB \n    7.46 \n    9.08 \n    older \n  \n  \n    FieldTrip \n    7.51 \n    8.11 \n    older \n  \n  \n    LIMO \n    7.57 \n    10.50 \n    older \n  \n  \n    MNE-Python \n    8.22 \n    7.19 \n    younger \n  \n  \n    SPM \n    7.71 \n    8.58 \n    older \n  \n  \n    Custom scripts \n    7.32 \n    8.62 \n    older \n  \n\n\n\n\n\n\n\nNumber of used software\n\n\nShow the code\nvec <- names(data[25:50]) %>% str_split_i(., \"\\\\? \\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:50] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) \n\n\n\n\nShow the code\ncbind(data.frame(rowSums(software)), factor_scores[1])  %>% \n   rename_at(vars(colnames(.)), ~ c(\"n_soft\", \"experience\")) %>% \n  filter(n_soft > 0) %>% \n  ggplot(., aes(x=n_soft, y=experience)) + geom_jitter() + geom_smooth()\n\n\n\n\n\n\n\nShow the code\ncbind(data.frame(rowSums(software)), factor_scores[1])  %>% \n   rename_at(vars(colnames(.)), ~ c(\"n_soft\", \"experience\")) %>% \n  filter(n_soft > 0) %>% \n  lm(data=., n_soft ~ experience) %>% summary(.)\n\n\n\nCall:\nlm(formula = n_soft ~ experience, data = .)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.2500 -1.3027 -0.3206  0.9280  7.3483 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  3.05683    0.12848   23.79  < 2e-16 ***\nexperience   0.33443    0.08278    4.04 7.85e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.747 on 183 degrees of freedom\nMultiple R-squared:  0.08189,   Adjusted R-squared:  0.07687 \nF-statistic: 16.32 on 1 and 183 DF,  p-value: 7.854e-05\n\n\n\n\nFeatures\n\n\nShow the code\nfeature <- data[52:60] %>% rename_all(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %>% \n                                        str_sub(., 1, -2) ) %>%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 )))  %>% \n  cbind(., factor_scores[1]) %>% \n    filter_all(all_vars(!is.na(.))) %>%  \n  rename_at(vars(colnames(.)), ~ c(\"subplot\", \"attributes\", \"speed\", \"publicable\", \"reproducable\", \n                                   \"zooming\", \"interactive\", \"gui\", \"coding\", \"experience\")) %>% \n  mutate(experience = round(experience, 2), exp_quartile = cut(experience, 4, labels = c(\"25\", \"50\", \"75\", \"100\"))) %>% \n  group_by(exp_quartile) %>% dplyr::mutate(n = n()) %>% ungroup() #%>% \n  #mutate(perc = round(n / sum(n), 2) ) #%>% \n  \nfeature %>% lm(data=., subplot ~ experience) %>% summary()\n\n\n\nCall:\nlm(formula = subplot ~ experience, data = .)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.9823 -0.8302  0.2540  1.2356  1.7616 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.63317    0.09507   6.660 3.55e-10 ***\nexperience   0.13428    0.06024   2.229   0.0271 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.254 on 172 degrees of freedom\nMultiple R-squared:  0.02808,   Adjusted R-squared:  0.02243 \nF-statistic: 4.969 on 1 and 172 DF,  p-value: 0.0271\n\n\nShow the code\nfeature %>% \n  pivot_longer(cols = subplot:coding, names_to = \"feature\", values_to = \"likert\") %>% #summary()\n  #filter(feature == \"gui\") %>% \n  mutate(likert = likert + 3) %>% \n  group_by(feature, exp_quartile) %>% dplyr::summarise(m = mean(likert)) %>% \n  ggplot(aes(y = m, x= exp_quartile, fill = exp_quartile)) + \n  geom_bar(stat = \"identity\") + \n  #geom_smooth(aes(y = value, x= experience, color = str_wrap(name, 20)), bw = 0.5, method = \"loess\", span = 0.7) + \n  labs(y = \"Mean likert scale value\", x=\"Experience quartiles\", color = \"Features\")  + theme_classic() +\n  theme(legend.position = \"none\", \n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14)) + \n  facet_wrap(~str_wrap(feature, 20)) + \n  geom_text(aes(label = paste0(round(m, 1))),  position = position_stack(vjust = 0.5), size = 4)"
  },
  {
    "objectID": "feedbacks.html#feedback",
    "href": "feedbacks.html#feedback",
    "title": "Feedbacks",
    "section": "Feedback",
    "text": "Feedback\n\n\nShow the code\nfeed <- data[120] %>% dplyr::rename(feed = !!names(.)[1]) %>%  filter(!is.na(feed), feed != \"-\") #%>% View()\nfeed  %>%\n  filter(!row_number() %in% c(3, 14, 17, 32, 37, 41))# just appreciation\n\n\n# A tibble: 49 × 1\n   feed                                                                         \n   <chr>                                                                        \n 1 \"Not only 2-d, but also CIRCULAR colorbars please\\r\\nThey are essential to v…\n 2 \"I think a great feature to have would be a selection of colors for comparis…\n 3 \"stop pushing this jet bullshit on me so hard\"                               \n 4 \"Make it very modular. It will be useless to experts or people trying someth…\n 5 \"This is more of a tangential comment, but one issue for me is lack of aware…\n 6 \"Easy creation of different types of error bars on ERP plots (shading)\"      \n 7 \"I use R for most analyses and visualization but matlab/eeglab/Erplab (for n…\n 8 \"Dynamic head montage videos\"                                                \n 9 \"I feel like Matlab is not very easy to implement in public and interactive …\n10 \"I think everything that relates to plotting ERPs + results of statistical t…\n# … with 39 more rows"
  },
  {
    "objectID": "feedbacks.html#the-most-common-struggles",
    "href": "feedbacks.html#the-most-common-struggles",
    "title": "Feedbacks",
    "section": "The most common struggles",
    "text": "The most common struggles\n\n\nShow the code\nproblems <- rbind(problem1, problem2, problem3, problem4, problem5, problem6, problem8)\n\n\n\n\nShow the code\nproblems %>% filter(problems == \"no complains\") %>% \n  ggplot(., aes(y = reorder(name, percent1), x = percent1, fill = name)) +\n  geom_col() + \n  geom_text(aes(label = paste0(percent1, \"%\"), y = name, x = percent1),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent of no complains\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n\n\n\n\n\n\n\nShow the code\nproblems %>% filter(problems != \"no complains\") %>% group_by(name) %>% \n  arrange(desc(percent1)) %>% slice(1)\n\n\n# A tibble: 7 × 3\n# Groups:   name [7]\n  problems                                               percent1 name          \n  <chr>                                                     <dbl> <chr>         \n1 \"styling and color\"                                          10 butterfly plot\n2 \"order and sorting\"                                           5 channel image \n3 \"sorting\"                                                     4 erp image     \n4 \"uncertainty\"                                                30 line plot     \n5 \"legibility and scaling\"                                     21 topo array    \n6 \"time selection\"                                             14 topomap       \n7 \"channel selection\\n(differentiation, identification)\"       11 topoplot"
  }
]
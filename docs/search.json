[
  {
    "objectID": "src/tables.html",
    "href": "src/tables.html",
    "title": "All tables",
    "section": "",
    "text": "Here are the figures from the paper Art of the Brainwaves."
  },
  {
    "objectID": "src/tables.html#data",
    "href": "src/tables.html#data",
    "title": "All tables",
    "section": "data",
    "text": "data\n\n\nCode\ndata &lt;- read_excel(\"../data/results_survey.xlsx\")\ndata &lt;- data[1:121] %&gt;% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\n\nn1 &lt;- readxl::read_xlsx(\"../data/aggregated_plotnames.xlsx\", sheet = 1)\nn2 &lt;- readxl::read_xlsx(\"../data/aggregated_plotnames.xlsx\", sheet = 2)\nn3 &lt;- readxl::read_xlsx(\"../data/aggregated_plotnames.xlsx\", sheet = 3)\nn4 &lt;- readxl::read_xlsx(\"../data/aggregated_plotnames.xlsx\", sheet = 4)\nn5 &lt;- readxl::read_xlsx(\"../data/aggregated_plotnames.xlsx\", sheet = 5)\nn6 &lt;- readxl::read_xlsx(\"../data/aggregated_plotnames.xlsx\", sheet = 6)\nn7 &lt;- readxl::read_xlsx(\"../data/aggregated_plotnames.xlsx\", sheet = 7)\nn8 &lt;- readxl::read_xlsx(\"../data/aggregated_plotnames.xlsx\", sheet = 8)\n\nproblem1 &lt;- readxl::read_xlsx(\"../data/aggregated_problems.xlsx\", sheet = 1)\nproblem2 &lt;- readxl::read_xlsx(\"../data/aggregated_problems.xlsx\", sheet = 2)\nproblem3 &lt;- readxl::read_xlsx(\"../data/aggregated_problems.xlsx\", sheet = 3)\nproblem4 &lt;- readxl::read_xlsx(\"../data/aggregated_problems.xlsx\", sheet = 4)\nproblem5 &lt;- readxl::read_xlsx(\"../data/aggregated_problems.xlsx\", sheet = 5)\nproblem6 &lt;- readxl::read_xlsx(\"../data/aggregated_problems.xlsx\", sheet = 6)\nproblem7 &lt;- readxl::read_xlsx(\"../data/aggregated_problems.xlsx\", sheet = 7)\n\nexp_data &lt;- data[c( 19, 20, 12, 21, 22)]\ncolnames(exp_data) &lt;- c(\"n_papers\", \"years\", \"position\",\"self_level\", \"code_contribution\")\nm = FAMD(exp_data[1:5], ncp=2, axes=c(1,2))\n\n\n\n\n\nCode\nfactor_scores &lt;- as.data.frame(m$ind$coord)\n\nfont_add_google(\"Lato\")\nshowtext_opts(dpi = 100)\nshowtext_auto(enable = TRUE)"
  },
  {
    "objectID": "src/tables.html#table-1",
    "href": "src/tables.html#table-1",
    "title": "All tables",
    "section": "Table 1",
    "text": "Table 1\n\n\nCode\ndm &lt;- data.frame()\n\ndim &lt;- dplyr::tibble(\n  Plots = c(\"../miniatures/1.png\", \"../miniatures/2.png\", \"../miniatures/3.png\", \"../miniatures/4.png\", \"../miniatures/5.png\", \"../miniatures/6.png\", \"../miniatures/7.png\", \"../miniatures/8.png\"),\n  Name = c(\"ERP plot\", \"Butterfly plot\", \"Topoplot\", \"Topoplot timeseries\", \"ERP grid\", \"ERP image\", \"Channel image\", \"Parallel plot\"), \n  Time = c(\"x\", \"x\", \"\", \"(x)\", \"x\", \"x\", \"x\", \"(x)\"),\n  Channels = c(\"\", \"x\", \"x\", \"x\", \"x\", \"\", \"x\", \"x\"), \n  Layout = c(\"\", \"\", \"x\", \"x\", \"x\", \"\", \"\", \"\"), \n  Conditions = c(\"x\", \"\", \"\", \"\", \"(x)\", \"\", \"\", \"x\"), \n  Trials = c(\"\", \"\", \"\", \"\", \"\", \"x\", \"\", \"(x)\")\n) \n\nt1 &lt;- dim %&gt;% \n  gt()  %&gt;% \n  cols_align(align = \"center\", columns = c(Time, Channels, Layout, Conditions, Trials)) %&gt;% \n  cols_width(\n    Time ~ px(50),\n    Channels ~ px(50),\n    Layout ~ px(50),\n    Conditions ~ px(50),\n    Trials ~ px(50),\n  ) %&gt;% \n  text_transform(\n    locations = cells_body(columns = Plots),\n    fn = function(x) {\n      lapply(x, function(x) {\n              html(paste(local_image(filename = x)))\n      })\n    }\n  ) %&gt;%  opt_table_font(font = \"Source Sans Pro\")  %&gt;% \ntab_options(#container.width = 550, container.height = 550, \n            data_row.padding = px(0.1), table.font.size = px(14), \n            container.padding.x = px(1),  column_labels.border.bottom.color = \"black\",column_labels.border.top.color = \"white\",\n    column_labels.border.top.width = px(3),) %&gt;% \n  tab_footnote(\n  footnote = \"x - full dimension, (x) - partial dimension\",\n  placement = \"right\"\n)\n\nt1\n\n\n\n\n\n\n  \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n      Plots\n      Name\n      Time\n      Channels\n      Layout\n      Conditions\n      Trials\n    \n  \n  \n    \nERP plot\nx\n\n\nx\n\n    \nButterfly plot\nx\nx\n\n\n\n    \nTopoplot\n\nx\nx\n\n\n    \nTopoplot timeseries\n(x)\nx\nx\n\n\n    \nERP grid\nx\nx\nx\n(x)\n\n    \nERP image\nx\n\n\n\nx\n    \nChannel image\nx\nx\n\n\n\n    \nParallel plot\n(x)\nx\n\nx\n(x)\n  \n  \n  \n    \n       x - full dimension, (x) - partial dimension\n    \n  \n\n\n\n\n\n\nCode\nt1_1 &lt;- dim %&gt;% flextable() %&gt;%  valign(j = 2, valign = \"center\", part = \"all\") %&gt;%\n  compose(j = 'Plots', value = as_paragraph(as_image(Plots, width = 1, height = 0.6))) %&gt;%\n   padding(padding = 1, part = \"all\") %&gt;%  autofit() %&gt;% align(j = 3:7, align = \"center\") %&gt;% \n   height_all(0.01, part = \"all\", unit = \"cm\") %&gt;% \n  surround(\n    j = 1:7,\n    border.bottom = fp_border(color = \"gray\", style = \"dashed\"),\n    part = \"body\"\n  ) %&gt;%   font(fontname = \"Lato\", part=\"all\") %&gt;% \n  hline_bottom(part = \"body\", border = fp_border(color = \"black\", width = 1)) |&gt;\n  add_footer_lines(\"x - full dimension, (x) - partial dimension\")\n\nt1_1\n\n\n\nPlotsNameTimeChannelsLayoutConditionsTrialsERP plotxxButterfly plotxxTopoplotxxTopoplot timeseries(x)xxERP gridxxx(x)ERP imagexxChannel imagexxParallel plot(x)xx(x)x - full dimension, (x) - partial dimension"
  },
  {
    "objectID": "src/tables.html#table-2",
    "href": "src/tables.html#table-2",
    "title": "All tables",
    "section": "Table 2",
    "text": "Table 2\n\n\nCode\nplot_names &lt;- c(\"ERP plot\", \"Butterfly plot\", \"Topoplot\", \"Topoplot\\ntimeseries\", \"ERP grid\", \"ERP image\", \"Channel image\", \"Parallel plot\")\n\nt &lt;- list(n1, n2, n3, n4, n5, n6, n7, n8) \n\ncreate_table &lt;- function(t){\n  tmp &lt;- t[[1]] %&gt;% mutate(total = sum(Scores)) %&gt;% slice(1:3) %&gt;% mutate(type = plot_names[1]) %&gt;% rename_with(.cols = 1, ~\"names\") %&gt;% relocate(type, names )\n  \n  for (i in 2:8){\n    tmp &lt;- t[[i]]  %&gt;% mutate(total = sum(Scores)) %&gt;% slice(1:3) %&gt;% \n      mutate(type = plot_names[i]) %&gt;% rename_with(.cols = 1, ~\"names\") %&gt;% relocate(type, names) %&gt;% \n      rbind(tmp, .)\n  }\n  tmp &lt;- tmp %&gt;% \n    group_by( type) %&gt;%\n    dplyr::mutate(groupRow = 1:n()) %&gt;%\n    ungroup() %&gt;% mutate(p = round(as.numeric(Scores)/as.numeric(total), 2) * 100) %&gt;% \n    mutate(score = paste(p, total, sep = \"% out of \")) %&gt;% \n    dplyr::mutate(type = ifelse(groupRow == 1, as.character(type), \"\")) %&gt;%\n    dplyr::mutate(Scores = ifelse(groupRow == 1, as.character(score), paste(p, \"%\", sep = \"\"))) %&gt;%\n    select(-c(groupRow, score))\n}\nplots2 &lt;- c(\"../miniatures/1.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/2.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/3.png\",\"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/4.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/5.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/6.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/7.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/8.png\", \"../miniatures/filler.png\")\n\nplotnames &lt;- create_table(t) %&gt;% data.frame() %&gt;% \n  mutate(names = str_to_sentence(names)) %&gt;% \n  mutate(names = str_replace(names, \"Erp\", \"ERP\")) %&gt;% \n  mutate(names = str_replace(names, \"erp\", \"ERP\")) %&gt;% tibble::add_column(Plots = plots2, .before = \"type\") %&gt;% \n  dplyr::rename(`Plot types` = type,\n         `Aggregated responses` = names) %&gt;% select(-total, -p) \n\nt2 &lt;- plotnames %&gt;% flextable() %&gt;% \n  merge_at(j= 1, i = 1:3) %&gt;% merge_at(j= 1, i = 4:6) %&gt;% \n  merge_at(j= 1, i = 7:9) %&gt;% merge_at(j= 1, i = 10:12) %&gt;%\n  merge_at(j= 1, i = 13:15) %&gt;% merge_at(j= 1, i = 16:18) %&gt;%\n  merge_at(j= 1, i = 19:21) %&gt;% merge_at(j= 1, i = 22:23) %&gt;%\n  \n  merge_at(j= 2, i = 1:3) %&gt;% merge_at(j= 2, i = 4:6) %&gt;% \n  merge_at(j= 2, i = 7:9) %&gt;% merge_at(j= 2, i = 10:12) %&gt;%\n  merge_at(j= 2, i = 13:15) %&gt;% merge_at(j= 2, i = 16:18) %&gt;%\n  merge_at(j= 2, i = 19:21) %&gt;% merge_at(j= 2, i = 22:23)  %&gt;% \n  valign(j = 2, valign = \"center\", part = \"all\") %&gt;%\n  compose(j = 'Plots', value = as_paragraph(as_image(Plots, width = 1, height = 0.6))) %&gt;%\n   padding(padding = 1, part = \"all\") %&gt;% \n  autofit() %&gt;% valign(valign = \"top\") %&gt;% \n  height_all(0.01, part = \"all\", unit = \"cm\") %&gt;% \n  surround(\n    i = c(3, 6, 9, 12, 15, 18, 21),\n    j = 1:4,\n    border.bottom = fp_border(color = \"gray\", style = \"dashed\"),\n    part = \"body\"\n  ) %&gt;%   font(fontname = \"Lato\", part=\"all\") %&gt;% \n  hline_bottom(part = \"body\", border = fp_border(color = \"white\", width = 3)) \nt2\n\n\n\nPlotsPlot typesAggregated responsesScoresERP plotERP (plot)39% out of 197Averaged ERP (plot)19%ERP wave(form)s6%Butterfly plotButterfly (plot)48% out of 159Single/individual channel ERP (plot)17%Multi(channel/electrode) ERP (plot)14%TopoplotTopo(plot)40% out of 192Topography (plot)39%Topomap7%TopoplottimeseriesTopo(plot) over time(series/course)23% out of 189Topography over time(series/course)22%Topo(plot)12%ERP gridERP over channels15% out of 162Multi(channel) plot14%Topographic ERP14%ERP imageERP image27% out of 114Sorted ERP trials19%Trials11%Channel imageChannel(s) (ERP)35% out of 96Heatmap16%Channel image9%Parallel plot(ERP) amplitudes50% out of 8Parallel coordinates50%"
  },
  {
    "objectID": "src/tables.html#table-3",
    "href": "src/tables.html#table-3",
    "title": "All tables",
    "section": "Table 3",
    "text": "Table 3\n\n\nCode\nprob_comb &lt;- \n  rbind(problem1, problem2, problem3, problem4, problem5, problem6, problem7) %&gt;%\n  group_by(`Plot names`) %&gt;%  mutate(index = match(`Plot names`, unique(`Plot names`)))  %&gt;% filter(`Main problems` != \"no complains\") %&gt;% \n  arrange(desc(Scores)) %&gt;% slice(1:3) %&gt;% \n  arrange(index) %&gt;%  dplyr::select(`Plot names`, `Main problems`, Scores, Total) %&gt;%  \n  mutate(`Plot names` = str_to_sentence(`Plot names`)) %&gt;% \n  mutate(`Plot names` = str_replace(`Plot names`, \"Erp\", \"ERP\")) %&gt;% \n  mutate(`Plot names` = str_replace(`Plot names`, \"erp\", \"ERP\")) %&gt;%  \n  group_by(`Plot names`) %&gt;%\n  dplyr::mutate(groupRow = 1:n()) %&gt;%\n  ungroup() %&gt;%\n  mutate(p = round(as.numeric(Scores)/as.numeric(Total), 2) * 100) %&gt;% \n  dplyr::group_by(`Plot names`) %&gt;%   mutate(mx = max(p)) %&gt;% \n  arrange(desc(mx), desc(p)) %&gt;% \n  mutate(score = paste(p, Total, sep = \"% out of \")) %&gt;% \n  dplyr::mutate(`Plot names` = ifelse(groupRow == 1, as.character(`Plot names`), \"\")) %&gt;%\n  dplyr::mutate(Scores = ifelse(groupRow == 1, as.character(score), paste(p, \"%\", sep = \"\"))) %&gt;%\n  select(-c(groupRow, score, Total, p, mx)) \n\nplots3 &lt;- c(\"../miniatures/1.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/5.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/4.png\",\"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/7.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/2.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/3.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/6.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\")\n\nprobs &lt;- prob_comb %&gt;% tibble::add_column(Plots = plots3, .before = \"Plot names\")  %&gt;% ungroup() \n\nt3 &lt;- probs %&gt;% flextable() %&gt;% \n  merge_at(j= 1, i = 1:3) %&gt;% merge_at(j= 1, i = 4:6) %&gt;% \n  merge_at(j= 1, i = 7:9) %&gt;% merge_at(j= 1, i = 10:12) %&gt;%\n  merge_at(j= 1, i = 13:15) %&gt;% merge_at(j= 1, i = 16:18) %&gt;% \n  merge_at(j= 1, i = 19:21) %&gt;%\n  merge_at(j= 2, i = 1:3) %&gt;% merge_at(j= 2, i = 4:6) %&gt;% \n  merge_at(j= 2, i = 7:9) %&gt;% merge_at(j= 2, i = 10:12) %&gt;%\n  merge_at(j= 2, i = 13:15) %&gt;% merge_at(j= 2, i = 16:18) %&gt;%\n  merge_at(j= 2, i = 19:21) %&gt;% \n  padding(padding = 1, part = \"all\") %&gt;% \n  valign(j = 2, valign = \"center\", part = \"all\") %&gt;%\n  compose(j = 'Plots', value = as_paragraph(as_image(Plots, width = 1, height = 0.6))) %&gt;%\n  autofit() %&gt;%\n  height_all(0.01, part = \"all\", unit = \"cm\") %&gt;% \n  surround(\n    i = c(3, 6, 9, 12, 15, 18, 21),\n    j = 1:4,\n    border.bottom = fp_border(color = \"gray\", style = \"dashed\"),\n    part = \"body\"\n  ) %&gt;% \n  hline_bottom(part = \"body\", border = fp_border(color = \"white\", width = 3)) %&gt;% \n  font(fontname = \"Lato\", part=\"all\") \nt3 \n\n\n\nPlotsPlot namesMain problemsScoresERP plotuncertainty34% out of 187customization6%color2%ERP gridlegibility and scaling25% out of 133customization6%channel selection2%Topoplot timeseriestime specification17% out of 153color5%customization4%Channel imagesorting14% out of 51legibility and scaling8%color4%Butterfly plotcolor11% out of 125channel selection9%adding topography4%Topoplotchannel selection9% out of 175head shape and montage6%color5%ERP imagesorting7% out of 70preprocessing4%smoothing4%"
  },
  {
    "objectID": "src/tables.html#sup-table-1",
    "href": "src/tables.html#sup-table-1",
    "title": "All tables",
    "section": "Sup table 1",
    "text": "Sup table 1\n\n\nCode\nlog_fun &lt;- function(df){\n  mod &lt;- glm(df$score ~ df$proxy, family = \"binomial\") \n  ci1 &lt;- confint(mod)[2]\n  ci2 &lt;- confint(mod)[4]\n  mod %&gt;% tidy() %&gt;% slice(-1) %&gt;% cbind(ci1) %&gt;% cbind(ci2)\n}\n\nvec &lt;- names(data[25:51]) %&gt;% str_split_i(., \"\\\\? \\\\[\", 2) %&gt;%  str_sub(., 1, -2)\n\ndata[25:51] %&gt;%\n  rename_at(vars(colnames(.)), ~ vec) %&gt;% \n  dplyr::select(-Other) %&gt;% \n  mutate_at(vars(vec[1:26]), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %&gt;%\n  select_if(colSums(.) &gt; 10) %&gt;% \n  cbind(factor_scores[1], .) %&gt;% dplyr::rename(proxy = !!names(.)[1]) %&gt;% \n  gather(type, score, BESA:`Custom scripts`) %&gt;% \n   dplyr::group_by(., type) %&gt;% nest() %&gt;% \n  dplyr::mutate(., model = map(data, log_fun)) %&gt;% unnest() %&gt;% \n  dplyr::select(type, estimate, std.error, p.value, ci1, ci2) %&gt;%\n  dplyr::group_by(type) %&gt;%  slice(1) %&gt;% mutate(p.value = round(as.numeric(p.value), 2), \n                                                 estimate = round(as.numeric(estimate), 2),\n                                                 std.error = round(as.numeric(std.error), 2), \n                                                 CI = paste0('(' , round(ci1, 3), ', ', round(ci2, 3), ')' )) %&gt;%\n  dplyr::select(-ci1, -ci2) %&gt;%\n  mutate(p.value = cell_spec(p.value, bold = ifelse(p.value &lt; 0.05, TRUE, FALSE))) %&gt;% \n  dplyr::rename(`Analytical software` = type) %&gt;% \n  kable(escape = F, booktabs = T) %&gt;% \n  kable_minimal(full_width = F,  html_font = \"Source Sans Pro\")\n\n\n\n\n\nAnalytical software\nestimate\nstd.error\np.value\nCI\n\n\n\n\nBESA\n-0.03\n0.25\n0.92\n(-1.129, 0.234)\n\n\nBrain Vision Analyser\n-0.08\n0.20\n0.67\n(-0.766, 0.158)\n\n\nBrainstorm\n-0.01\n0.13\n0.96\n(-0.514, 0.207)\n\n\nCustom scripts\n0.84\n0.37\n0.02\n(0.14, 1.587)\n\n\nEEGLAB\n-0.03\n0.10\n0.75\n(-0.274, 0.202)\n\n\nERPLAB\n1.07\n0.45\n0.02\n(0.21, 1.975)\n\n\nFieldTrip\n0.02\n0.10\n0.85\n(-0.209, 0.265)\n\n\nLIMO\n0.05\n0.13\n0.72\n(-0.472, 0.262)\n\n\nMNE-Python\n-0.16\n0.23\n0.49\n(-0.798, 0.099)\n\n\nSPM\n-0.05\n0.26\n0.84\n(-1.072, 0.213)\n\n\nUnfold\n-0.56\n0.73\n0.45\n(-2.045, 0.203)"
  },
  {
    "objectID": "src/tables.html#sup-table-2",
    "href": "src/tables.html#sup-table-2",
    "title": "All tables",
    "section": "Sup table 2",
    "text": "Sup table 2\n\n\nCode\ncor_fun &lt;- function(df){\n  p.value &lt;- cor.test(df$proxy, df$score, method = \"spearman\")$p.value\n  mod &lt;- spearman.ci(df$proxy, df$score) %&gt;% tidy() %&gt;% cbind(p.value) \n  }\nfeature &lt;- data[52:60] %&gt;% rename_all(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %&gt;% str_sub(., 1, -2) ) %&gt;%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 )))  %&gt;% \n  cbind(., factor_scores[1]) %&gt;%  \n  rename_at(vars(colnames(.)), ~ c(\"subplot\", \"attributes\", \"speed\", \"publicable\", \"reproducable\", \"zooming\", \"interactive\", \"gui\", \"coding\", \"proxy\")) \n\nfeature %&gt;% \n  gather(type, score, subplot:coding) %&gt;% \n  dplyr::group_by(., type) %&gt;% nest() %&gt;% \n  dplyr::mutate(., model = map(data, cor_fun)) %&gt;% unnest() %&gt;% \n  dplyr::select(type, estimate, conf.low.Inf, conf.high.Sup, p.value) %&gt;% # , method\n  dplyr::group_by(type) %&gt;%  slice(1) %&gt;% mutate(estimate = round(as.numeric(estimate), 2),\n                                                 CI = paste0('(' , round(conf.low.Inf, 3), ', ', round(conf.high.Sup, 3), ')' ),\n                                                             p.value = round(as.numeric(p.value), 2)) %&gt;% \n  mutate(p.value = cell_spec(p.value, bold = ifelse(p.value &lt; 0.05, TRUE, FALSE))) %&gt;% \n  dplyr::rename(`Software feature` = type, `Spearman rho` = estimate) %&gt;% \n  select(-conf.low.Inf, -conf.high.Sup) %&gt;% \n  kable(escape = F, booktabs = T) %&gt;% \n  kable_minimal(full_width = F,  html_font = \"Source Sans Pro\") \n\n\n\n\n\nSoftware feature\nSpearman rho\np.value\nCI\n\n\n\n\nattributes\n-0.03\n0.71\n(-0.164, 0.12)\n\n\ncoding\n0.12\n0.09\n(-0.014, 0.252)\n\n\ngui\n-0.17\n0.01\n(-0.301, -0.036)\n\n\ninteractive\n-0.11\n0.11\n(-0.241, 0.02)\n\n\npublicable\n-0.15\n0.03\n(-0.287, 0.005)\n\n\nreproducable\n0.02\n0.81\n(-0.126, 0.159)\n\n\nspeed\n-0.01\n0.83\n(-0.145, 0.125)\n\n\nsubplot\n0.11\n0.11\n(-0.015, 0.247)\n\n\nzooming\n-0.06\n0.39\n(-0.193, 0.062)"
  },
  {
    "objectID": "src/feedbacks.html",
    "href": "src/feedbacks.html",
    "title": "Feedbacks",
    "section": "",
    "text": "Here we analyse how participants named presented figures and what kind of struggles their experienced. Also, their feedback on some issues presented"
  },
  {
    "objectID": "src/feedbacks.html#setup",
    "href": "src/feedbacks.html#setup",
    "title": "Feedbacks",
    "section": "Setup",
    "text": "Setup\n\n\nCode\ndata &lt;- read_excel(\"../data/results_survey.xlsx\")\ndata &lt;- data[1:121] %&gt;% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\nregister_gfont(\"Lato\")\n\n\n[1] TRUE\n\n\n\nword_preproc\n\n\nCode\nword_preproc &lt;- function(data, N){\n # N = 69\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"like\", \"s\", \"plot\", \"plots\")\n  tmp &lt;- data %&gt;% filter(!is.na(.[[N]])) %&gt;% select(., N) %&gt;% \n    dplyr::rename(words = !!names(.)[1]) %&gt;% mutate(words = tolower(words)) %&gt;% \n    mutate(words_prep = str_split(words, \"\\\\s+\")) %&gt;%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \"))) %&gt;% \n    mutate(words_prep = stri_replace_all_regex(words_prep,\n                                  pattern=c(\" \\\\(.*\", \", or.*\", \" across.*\", \" with.*\", \" at.*\", \" by.*\", \" over.*\", #\" of.*\", \n                                            \" for.*\", \" per.*\", \" across.*\", \" accross.*\", \" between.*\"),\n                                  replacement=c(''),\n                                  vectorize=FALSE)) %&gt;% \n    mutate(words_prep = str_split(words_prep, \"\\\\s+\")) %&gt;%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \")))\n     \n  return(tmp)\n}"
  },
  {
    "objectID": "src/feedbacks.html#plot-dimension",
    "href": "src/feedbacks.html#plot-dimension",
    "title": "Feedbacks",
    "section": "Plot dimension",
    "text": "Plot dimension\n\ndimensions\n\n\nCode\ndm &lt;- data.frame()\n\n  \ndata.frame(plots = c(\"ERP plot\", \"Butterfly plot\", \"Topoplot\", \"Topoplot timeseries\", \"ERP grid\", \"ERP image\", \"Channel image\", \"Parallel plot\"), \n           time = c(\"x\", \"x\", \"\", \"(x)\", \"x\", \"x\", \"x\", \"x\"),\n           channels = c(\"\", \"x\", \"x\", \"x\", \"x\", \"\", \"x\", \"x\"), \n           spatial = c(\"\", \"\", \"x\", \"x\", \"x\", \"\", \"\", \"\"), \n           conditions = c(\"x\", \"\", \"\", \"\", \"\", \"\", \"\", \"x\"), \n           trials = c(\"\", \"x\", \"\", \"\", \"\", \"x\", \"\", \"\")) %&gt;% kable(align=\"lcccccc\")  %&gt;% \n  kable_minimal(full_width = F,  html_font = \"Source Sans Pro\") \n\n\n\n\n\nplots\ntime\nchannels\nspatial\nconditions\ntrials\n\n\n\n\nERP plot\nx\n\n\nx\n\n\n\nButterfly plot\nx\nx\n\n\nx\n\n\nTopoplot\n\nx\nx\n\n\n\n\nTopoplot timeseries\n(x)\nx\nx\n\n\n\n\nERP grid\nx\nx\nx\n\n\n\n\nERP image\nx\n\n\n\nx\n\n\nChannel image\nx\nx\n\n\n\n\n\nParallel plot\nx\nx\n\nx\n\n\n\n\n\n\n\n\n\n\nCode\ndim &lt;- dplyr::tibble(\n  Plots = c(\"../miniatures/1.png\", \"../miniatures/2.png\", \"../miniatures/3.png\", \"../miniatures/4.png\", \"../miniatures/5.png\", \"../miniatures/6.png\", \"../miniatures/7.png\", \"../miniatures/8.png\"),\n  Name = c(\"ERP plot\", \"Butterfly plot\", \"Topoplot\", \"Topoplot timeseries\", \"ERP grid\", \"ERP image\", \"Channel image\", \"Parallel plot\"), \n  Time = c(\"x\", \"x\", \"\", \"(x)\", \"x\", \"x\", \"x\", \"(x)\"),\n  Channels = c(\"\", \"x\", \"x\", \"x\", \"x\", \"\", \"x\", \"x\"), \n  Layout = c(\"\", \"\", \"x\", \"x\", \"x\", \"\", \"\", \"\"), \n  Conditions = c(\"x\", \"\", \"\", \"\", \"(x)\", \"\", \"\", \"x\"), \n  Trials = c(\"\", \"\", \"\", \"\", \"\", \"x\", \"\", \"(x)\")\n) \n\ndim_plot &lt;- dim %&gt;% \n  gt()  %&gt;% \n  cols_align(align = \"center\", columns = c(Time, Channels, Layout, Conditions, Trials)) %&gt;% \n  cols_width(\n    Time ~ px(50),\n    Channels ~ px(50),\n    Layout ~ px(50),\n    Conditions ~ px(50),\n    Trials ~ px(50),\n  ) %&gt;% \n  text_transform(\n    locations = cells_body(columns = Plots),\n    fn = function(x) {\n      lapply(x, function(x) {\n              html(paste(local_image(filename = x)))\n      })\n    }\n  ) %&gt;%  opt_table_font(font = \"Source Sans Pro\")  %&gt;% \ntab_options(data_row.padding = px(0.1), table.font.size = 14, container.padding.x = 1,  column_labels.border.bottom.color = \"black\",column_labels.border.top.color = \"white\",\n    column_labels.border.top.width = px(3),) %&gt;% \n  tab_footnote(\n  footnote = \"x - full dimension, (x) - partial dimension\",\n  placement = \"right\"\n)\n\ndim_plot #%&gt;% gtsave(\"Table 1.png\")\n\n\n\n\n\n\n  \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n      Plots\n      Name\n      Time\n      Channels\n      Layout\n      Conditions\n      Trials\n    \n  \n  \n    \nERP plot\nx\n\n\nx\n\n    \nButterfly plot\nx\nx\n\n\n\n    \nTopoplot\n\nx\nx\n\n\n    \nTopoplot timeseries\n(x)\nx\nx\n\n\n    \nERP grid\nx\nx\nx\n(x)\n\n    \nERP image\nx\n\n\n\nx\n    \nChannel image\nx\nx\n\n\n\n    \nParallel plot\n(x)\nx\n\nx\n(x)\n  \n  \n  \n    \n       x - full dimension, (x) - partial dimension"
  },
  {
    "objectID": "src/feedbacks.html#the-most-common-names-for-each-plot",
    "href": "src/feedbacks.html#the-most-common-names-for-each-plot",
    "title": "Feedbacks",
    "section": "The most common names for each plot",
    "text": "The most common names for each plot\n\n1\n\n\nCode\nn1 &lt;- word_preproc(data, 69)  %&gt;% #View()\n   mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember)\\\\b\", words) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(average(d)?|averagded)\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\baverage(d)?\\\\b\", words) == TRUE ~ \"averaged erp (plot)\",\n      grepl(\"\\\\bwave(form|forms)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\bwave(form|forms)?\\\\b\", words) == TRUE ~ \"erp wave(form)s\",\n      grepl(\"\\\\btime(course|series|domain)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\btime(course|series|domain)?\\\\b\", words) == TRUE ~ \"erp timecourse/timeseries\",\n      grepl(\"\\\\b(classic(al)?)\\\\b\", words) == TRUE ~ \"classic erp\",\n      grepl(\"\\\\b(standard)\\\\b\", words) == TRUE ~ \"standart erp\",\n      grepl(\"\\\\b(evoked)\\\\b\", words) == TRUE ~ \"evoked potential/reponses\",\n      grepl(\"\\\\b(erp(s)?|ep|related)\\\\b\", words) == TRUE ~ \"erp (plot)\", \n      grepl(\"\\\\b(time|timeseries)\\\\b\", words) == TRUE ~ \"time series\",\n  \n      grepl(\"\\\\b(line|boundedline)\\\\b\", words) == TRUE ~ \"line (plot)\",\n      grepl(\"\\\\b(single|singleplot|singe)\\\\b\", words) == TRUE ~ \"single (channel)\",\n      grepl(\"\\\\b(waveform(s)?)\\\\b\", words) == TRUE ~ \"waveform\",\n       grepl(\"\\\\b(p300)\\\\b\", words) == TRUE ~ \"p300\",\n      grepl(\"\\\\b(average|mean)\\\\b\", words) == TRUE ~ \"average/mean\",\n      grepl(\"\\\\b(amplitude)\\\\b\", words) == TRUE ~ \"amplitude\",\n  \n      TRUE ~ '_other'\n      ))  %&gt;%  #View()\n   filter(!is.na(type), type != \"bad\") %&gt;% dplyr::select(type) %&gt;%  table(.) %&gt;% \n  data.frame(.) %&gt;% arrange(desc(Freq))  %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"ERP plot\", \"n\")) \nn1 \n\n\n                    ERP plot  n\n1                 erp (plot) 77\n2        averaged erp (plot) 38\n3            erp wave(form)s 12\n4  evoked potential/reponses 12\n5                     _other 11\n6  erp timecourse/timeseries 11\n7                time series  7\n8               average/mean  6\n9                line (plot)  5\n10          single (channel)  5\n11                 amplitude  3\n12              standart erp  3\n13                  waveform  3\n14               classic erp  2\n15                      p300  2\n\n\n\n\nCode\nn1 %&gt;% \n  mutate(total = sum(n)) %&gt;% slice(1:11) %&gt;% \n  mutate(p = round(as.numeric(n)/as.numeric(total), 2) * 100) \n\n\n                    ERP plot  n total  p\n1                 erp (plot) 77   197 39\n2        averaged erp (plot) 38   197 19\n3            erp wave(form)s 12   197  6\n4  evoked potential/reponses 12   197  6\n5                     _other 11   197  6\n6  erp timecourse/timeseries 11   197  6\n7                time series  7   197  4\n8               average/mean  6   197  3\n9                line (plot)  5   197  3\n10          single (channel)  5   197  3\n11                 amplitude  3   197  2\n\n\n\n\n2\n\n\nCode\nn2 &lt;- word_preproc(data, 80)  %&gt;%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\\\b\", words) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(butterfly|bitterfly|buterfly|buttefly)\\\\b\", words) == TRUE ~ \"butterfly (plot)\",\n      grepl(\"\\\\b(spaghetti)\\\\b\", words) == TRUE ~ \"spaghetti\",\n      grepl(\"\\\\b(time|timeseries|timecourse)\\\\b\", words) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(channel|single|singleplot|individual)\\\\b\", words)  == TRUE ~ \"single/individual channel erp (plot)\",\n      grepl(\"\\\\b(channels|multichannel|multeple|multiple|multi|all|muti|electrodes)\\\\b\", words)  == TRUE ~ \"multi(channel/electrode) erp (plot)\",\n      grepl(\"\\\\b(evoked)\\\\b\", words)  == TRUE ~ \"evoked responces\",\n      grepl(\"\\\\b(erp(s)?|eprs|event-related)\\\\b\", words) == TRUE ~ \"erp (plot)\",\n      TRUE ~ '_other'\n      ))  %&gt;%  #View()\n  filter(!is.na(type), type != \"bad\") %&gt;%\n  dplyr::select(type) %&gt;%  table(.) %&gt;% \n  data.frame(.) %&gt;% arrange(desc(Freq))  %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Butterfly plot\", \"n\")) \nn2\n\n\n                        Butterfly plot  n\n1                     butterfly (plot) 76\n2 single/individual channel erp (plot) 27\n3  multi(channel/electrode) erp (plot) 23\n4                          time series 13\n5                           erp (plot)  9\n6                               _other  8\n7                            spaghetti  2\n8                     evoked responces  1\n\n\n\n\n3\n\n\nCode\nn3 &lt;- word_preproc(data, 85)  %&gt;%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\\\b\", words) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(topo|topoplot(s)?)\\\\b\", words) == TRUE ~ \"topo(plot)\", \n      grepl(\"\\\\b(topomap|topomape)\\\\b\", words) == TRUE ~ \"topomap\",\n      grepl(\"\\\\b(topograph(y|ic|ical|ies)|topgraphy|topograbphy)\\\\b\", words) == TRUE ~ \"topography (plot)\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(map)\\\\b\", words) == TRUE ~ \"scalp map\",\n      grepl(\"\\\\b(distribution)\\\\b\", words) == TRUE ~ \"scalp distribution\",\n      TRUE ~ '_other'\n      )) %&gt;%  #View()\n  dplyr::select(type) %&gt;%  table(.) %&gt;% \n  data.frame(.) %&gt;% arrange(desc(Freq))  %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Topoplot\", \"n\")) \nn3\n\n\n            Topoplot  n\n1         topo(plot) 76\n2  topography (plot) 74\n3            topomap 14\n4             _other 10\n5          scalp map  8\n6            heatmap  5\n7 scalp distribution  5\n\n\n\n\n4\n\n\nCode\nn4 &lt;- word_preproc(data, 90)  %&gt;%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|unclear)\\\\b\", words) == TRUE ~ \"bad\", \n      grepl(\"\\\\btopograph(y|ic|ical|ies)?\\\\b.*\\\\btime\\\\b|\\\\btime\\\\b.*\\\\btopograph(y|ic|ical|ies)?\\\\b\", words) == TRUE ~ \"topography over time(series/course)\",\n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\btime(course|series|line)?\\\\b|\\\\btime(course|series|line)?\\\\b.*\\\\btopo(plot|plots)?|topology\\\\b\", words) == TRUE ~ \"topo(plot) over time(series/course)\",\n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\btime(s)?\\\\b|\\\\btime(s)?\\\\b.*\\\\btopo(plot|plots)?|topology\\\\b\", words) == TRUE ~ \"topo(plot) over time(series/course)\",\n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\bseries\\\\b|\\\\bseries\\\\b.*\\\\btopo(plot|plots)?\\\\b\", words) == TRUE ~ \"topo series\",\n      grepl(\"\\\\b(topo(s)?|topoplot(s)?)\\\\b\", words) == TRUE ~ \"topo(plot)\",\n      grepl(\"\\\\b(topomap(s|e)?)\\\\b\", words) == TRUE ~ \"topomap\",\n      grepl(\"\\\\btopograph(y|ic|ical|ies)\\\\b.*\\\\bmap(s)?\\\\b|\\\\bmap(s)?\\\\b.*\\\\btopograph(y|ic|ical|ies)\\\\b\", words) == TRUE ~ \"topographical map (over time)\",\n   \n      grepl(\"\\\\b(topograph(y|ic|ical|ies)?|topgraphy|topograhy|topograbphy|topgraphies)\\\\b\", words) == TRUE ~ \"topography\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(map(s)?)\\\\b\", words) == TRUE ~ \"scalp map (over time)\",\n      grepl(\"\\\\bscalp\\\\b.*\\\\bplot(s)?\\\\b|\\\\bplot(s)?\\\\b.*\\\\bscalp\\\\b\", words) == TRUE ~ \"scalp plot\",\n      grepl(\"\\\\b(distribution)\\\\b\", words) == TRUE ~ \"scalp distribution\",\n      TRUE ~ '_other'\n      )) %&gt;% \n  mutate(type = ifelse(nchar(words) == 1, \"bad\", type)) %&gt;% \n  #View()\n  dplyr::select(type) %&gt;%  table(.) %&gt;% \n  data.frame(.) %&gt;% arrange(desc(Freq)) %&gt;% filter(type != \"bad\")  %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Topoplot\\ntimeseries\", \"n\")) \nn4\n\n\n                  Topoplot\\ntimeseries  n\n1  topo(plot) over time(series/course) 44\n2  topography over time(series/course) 42\n3                           topo(plot) 23\n4                           topography 21\n5                              topomap 14\n6                               _other 11\n7                scalp map (over time)  9\n8                          topo series  9\n9        topographical map (over time)  6\n10                             heatmap  4\n11                  scalp distribution  3\n12                          scalp plot  3\n\n\n\n\n5\n\n\nCode\nn5 &lt;- word_preproc(data, 97)   %&gt;%\n  mutate(type = case_when(\n    grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|unclear|ugly|don't|useless)\\\\b\", words) == TRUE ~ \"bad\",\n    grepl(\"\\\\bwave(form|forms)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\bwave(form|forms)?\\\\b\", words) == TRUE ~ \"erp wave(form)s\",\n    grepl(\"\\\\b(multi(plot|channel|ploter|ploterp)?)\\\\b\", words) == TRUE ~ \"multi(channel) plot\",\n    grepl(\"\\\\bchannel(s)?\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\bchannel(s)?\\\\b\", words) == TRUE ~ \"erp over channels\",\n    grepl(\"\\\\btopograph(y|ic|ical|ies|logy)|topology\\\\b.*\\\\berp(s)\\\\b|\\\\berp(s)\\\\b.*\\\\btopograph(y|ic|ical|ies|logy)|topology\\\\b\", words) == TRUE ~ \"topographic erp\",\n    grepl(\"\\\\b(scalp)\\\\b\", words) == TRUE ~ \"(erp) scalp\",\n    grepl(\"\\\\b(array)\\\\b\", words) == TRUE ~ \"(erp) array\",\n    grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\btopo(plot|plots)?\\\\b\", words) == TRUE ~ \"topo erp\",\n    grepl(\"\\\\b(erp(s)?|eprs|event-related)\\\\b\", words) == TRUE ~ \"erp\",\n    grepl(\"\\\\b(topo(s)?|topoplot(s)?|toposplot)\\\\b\", words) == TRUE ~ \"topo\",\n    grepl(\"\\\\b(channel(s|plot)?)\\\\b\", words) == TRUE ~ \"channel (plot)\",\n    TRUE ~ '_other'\n  )) %&gt;%\n  mutate(type = ifelse(nchar(words) == 1, \"bad\", type)) %&gt;%\n  mutate(type = ifelse(grepl(\"topographic erp\", type) & !grepl(\"\\\\berp(s)?|evoked|eeg\\\\b\", words), \"topographical plot(s)\", type)) %&gt;%\n # View()\n  dplyr::select(type) %&gt;%  table(.) %&gt;%\n  data.frame(.) %&gt;% arrange(desc(Freq)) %&gt;% filter(type != \"bad\")  %&gt;%\n  rename_at(vars(colnames(.)), ~ c(\"ERP grid\", \"n\"))\nn5\n\n\n                ERP grid  n\n1      erp over channels 24\n2    multi(channel) plot 23\n3        topographic erp 23\n4            (erp) scalp 21\n5                    erp 21\n6                 _other 11\n7         channel (plot)  9\n8  topographical plot(s)  8\n9        erp wave(form)s  6\n10                  topo  6\n11              topo erp  6\n12           (erp) array  4\n\n\nCode\n# write.csv(n5, \"topogrid.csv\")\n\n\n\n\n6\n\n\nCode\nn6 &lt;- word_preproc(data, 102)  %&gt;% #View()\nmutate(type = case_when(\n  grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\\\?\\\\?|unclear|ugly|don't|useless)\\\\b\", words) == TRUE ~ \"bad\",\n  grepl(\"\\\\b(sort(ed)?)\\\\b\", words) == TRUE ~ \"sorted erp trials\",\n  grepl(\"\\\\bimage\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\bimage|erpimage|image\\\\b\", words) == TRUE ~ \"erp image\",\n  grepl(\"\\\\bimage\\\\b.*\\\\bepoch(s)?\\\\b|\\\\bepoch(s)?\\\\b.*\\\\bimage\\\\b\", words) == TRUE ~ \"epoch image\",\n  grepl(\"\\\\berp(s)?\\\\b.*\\\\btrial(s)?\\\\b|\\\\btrial(s)?\\\\b.*\\\\berp(s)?\\\\b\", words) == TRUE ~ \"erp trials\",\n  grepl(\"\\\\b(raster(plot)?)\\\\b\", words) == TRUE ~ \"raster\",\n  grepl(\"\\\\b(waterfall)\\\\b\", words) == TRUE ~ \"waterfall\",\n  grepl(\"\\\\b(heat(map)?)\\\\b\", words) == TRUE ~ \"heatmap\",\n  grepl(\"\\\\b(erp(s)?|eprs|ersp|event-related)\\\\b\", words) == TRUE ~ \"erp\",\n  grepl(\"\\\\b(voltage)\\\\b\", words) == TRUE ~ \"voltage (over trial)\",\n  grepl(\"\\\\b(time(series)?|serie(s)?)\\\\b\", words) == TRUE ~ \"time series/frequencies\",\n  grepl(\"\\\\b(frequency|frecuencia)\\\\b\", words) == TRUE ~ \"time series/frequencies\",\n  grepl(\"\\\\b(trial(s|wise)?|trialplot)\\\\b\", words) == TRUE ~ \"trials\",\n  grepl(\"\\\\b(spectrum|spectral)\\\\b\", words) == TRUE ~ \"spectral\",\n  TRUE ~ '_other'\n  )) %&gt;%\n  mutate(type = ifelse(nchar(words) == 1, \"bad\", type)) %&gt;% # View()\n  dplyr::select(type) %&gt;%  table(.) %&gt;%\n  data.frame(.) %&gt;% arrange(desc(Freq)) %&gt;% filter(type != \"bad\")  %&gt;%\n  rename_at(vars(colnames(.)), ~ c(\"ERP image\", \"n\"))\nn6\n\n\n                 ERP image  n\n1                erp image 31\n2        sorted erp trials 22\n3                   trials 13\n4               erp trials 11\n5  time series/frequencies 11\n6                   _other  5\n7                  heatmap  5\n8     voltage (over trial)  5\n9                   raster  4\n10                     erp  3\n11                spectral  2\n12               waterfall  2\n\n\nCode\n#write.csv(n6, \"erpimage.csv\")\n\n\n\n\n7\n\n\nCode\nn7 &lt;- word_preproc(data, 107)  %&gt;% #View()\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\\\?\\\\?|unclear|-|ugly|don't|x|useless)\\\\b\", words) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(amplitude(s)?)\\\\b\", words) == TRUE ~ \"(erp) amplitudes\",\n      grepl(\"\\\\b(parallel)\\\\b\", words) == TRUE ~ \"parallel coordinates\",\n      TRUE ~ '_other'\n      )) %&gt;% #View()\n  dplyr::select(type) %&gt;%  table(.) %&gt;% \n  data.frame(.) %&gt;% arrange(desc(Freq)) %&gt;% filter(type != \"bad\")  %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Parallel plot\", \"n\")) \nn7\n\n\n         Parallel plot n\n1     (erp) amplitudes 4\n2 parallel coordinates 4\n\n\n\n\n8\n\n\nCode\nn8 &lt;- word_preproc(data, 112)  %&gt;%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|normal|\\\\?\\\\?|unclear|recall|ugly|don't|useless|nan|clear)\\\\b\", words) == TRUE ~ \"bad\", \n      grepl(\"\\\\bimage\\\\b.*\\\\bchannel\\\\b|\\\\bchannel\\\\b.*\\\\bimage|chanimage|imagesc\\\\b\", words) == TRUE ~ \"channel image\",\n      grepl(\"\\\\bimage\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\bimage|erpimage\\\\b\", words) == TRUE ~ \"erp image\",\n      \n      grepl(\"\\\\b(heat(map)?)\\\\b\", words) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(image)\\\\b\", words) == TRUE ~ \"image\",\n      grepl(\"\\\\b(raster(plot)?|custer)\\\\b\", words) == TRUE ~ \"raster (plot)\",\n      grepl(\"\\\\b(matrix)\\\\b\", words) == TRUE ~ \"(erp) matrix\",\n      grepl(\"\\\\b(channel(s|wise)?)\\\\b\", words) == TRUE ~ \"channel(s) (erp)\",\n      grepl(\"\\\\b(erp(s)?|eprs|ersp|event-related)\\\\b\", words) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(voltage)\\\\b\", words) == TRUE ~ \"voltage\",\n      TRUE ~ '_other'\n      )) %&gt;% \n  mutate(type = ifelse(nchar(words) == 1, \"bad\", type)) %&gt;%  #View()\n  dplyr::select(type) %&gt;%  table(.) %&gt;% \n  data.frame(.) %&gt;% arrange(desc(Freq)) %&gt;% filter(type != \"bad\") %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Channel_image\", \"n\")) \n\nn8\n\n\n      Channel_image  n\n1  channel(s) (erp) 34\n2           heatmap 15\n3     channel image  9\n4            _other  8\n5         erp image  8\n6             image  6\n7      (erp) matrix  5\n8     raster (plot)  5\n9               erp  3\n10          voltage  3\n\n\n\n\nCombined\n\n\nCode\nwrite.xlsx(n1 %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Plot names\", \"Scores\")), \"../data/aggregated_plotnames.xlsx\", sheetName\n   =\"ERP plot\", row.names=FALSE)\nwrite.xlsx(n2 %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Plot names\", \"Scores\")), \"../data/aggregated_plotnames.xlsx\", append=TRUE, sheetName =\"Butterfly plot\", row.names=FALSE)\nwrite.xlsx(n3 %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Plot names\", \"Scores\")), \"../data/aggregated_plotnames.xlsx\", append=TRUE, sheetName =\"Topoplot\", row.names=FALSE)\nwrite.xlsx(n4 %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Plot names\", \"Scores\")), \"../data/aggregated_plotnames.xlsx\", append=TRUE, sheetName =\"Topoplot timeseries\", row.names=FALSE)\nwrite.xlsx(n5 %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Plot names\", \"Scores\")), \"../data/aggregated_plotnames.xlsx\", append=TRUE, sheetName =\"ERP grid\", row.names=FALSE)\nwrite.xlsx(n6 %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Plot names\", \"Scores\")), \"../data/aggregated_plotnames.xlsx\", append=TRUE, sheetName =\"ERP image\", row.names=FALSE)\nwrite.xlsx(n8 %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Plot names\", \"Scores\")), \"../data/aggregated_plotnames.xlsx\", append=TRUE, sheetName =\"Channel image\", row.names=FALSE)\nwrite.xlsx(n7 %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Plot names\", \"Scores\")), \"../data/aggregated_plotnames.xlsx\", append=TRUE, sheetName =\"Parallel plot\", row.names=FALSE)\n\n\n\n\nCode\nplot_names &lt;- c(\"ERP plot\", \"Butterfly plot\", \"Topoplot\", \"Topoplot\\ntimeseries\", \"ERP grid\", \"ERP image\", \"Channel image\", \"Parallel plot\")\n\nt &lt;- list(n1, n2, n3, n4, n5, n6, n8, n7) \n\ncreate_table &lt;- function(t){\n  tmp &lt;- t[[1]] %&gt;% mutate(total = sum(n)) %&gt;% slice(1:3) %&gt;% mutate(type = plot_names[1]) %&gt;% rename_with(.cols = 1, ~\"names\") %&gt;% relocate(type, names )\n  \n  for (i in 2:8){\n    tmp &lt;- t[[i]]  %&gt;% mutate(total = sum(n)) %&gt;% slice(1:3) %&gt;% \n      mutate(type = plot_names[i]) %&gt;% rename_with(.cols = 1, ~\"names\") %&gt;% relocate(type, names) %&gt;% \n      rbind(tmp, .)\n  }\n  tmp &lt;- tmp %&gt;% \n    group_by( type) %&gt;%\n    dplyr::mutate(groupRow = 1:n()) %&gt;%\n    ungroup() %&gt;% mutate(p = round(as.numeric(n)/as.numeric(total), 2) * 100) %&gt;% \n    mutate(score = paste(p, total, sep = \"% out of \")) %&gt;% \n    dplyr::mutate(type = ifelse(groupRow == 1, as.character(type), \"\")) %&gt;%\n    dplyr::mutate(score = ifelse(groupRow == 1, as.character(score), paste(p, \"%\", sep = \"\"))) %&gt;%\n    select(-c(groupRow))\n}\n\ncreate_table(t) %&gt;% data.frame() %&gt;% \n  mutate(names = str_to_sentence(names)) %&gt;% \n  mutate(names = str_replace(names, \"Erp\", \"ERP\")) %&gt;% \n  mutate(names = str_replace(names, \"erp\", \"ERP\")) %&gt;%\n  dplyr::rename(`Plot types` = type,\n         `Names given by respondents` = names,\n         `Scores` =  score) %&gt;% select(-n, -total, -p)  %&gt;% kable()  %&gt;% \n  kable_minimal(full_width = F,  html_font = \"Source Sans Pro\") %&gt;% \n  row_spec(c(3, 6, 9, 12, 15, 18, 21), extra_css = \"border-bottom: 1px dotted gray;\")\n\n\n\n\n\nPlot types\nNames given by respondents\nScores\n\n\n\n\nERP plot\nERP (plot)\n39% out of 197\n\n\n\nAveraged ERP (plot)\n19%\n\n\n\nERP wave(form)s\n6%\n\n\nButterfly plot\nButterfly (plot)\n48% out of 159\n\n\n\nSingle/individual channel ERP (plot)\n17%\n\n\n\nMulti(channel/electrode) ERP (plot)\n14%\n\n\nTopoplot\nTopo(plot)\n40% out of 192\n\n\n\nTopography (plot)\n39%\n\n\n\nTopomap\n7%\n\n\nTopoplot timeseries\nTopo(plot) over time(series/course)\n23% out of 189\n\n\n\nTopography over time(series/course)\n22%\n\n\n\nTopo(plot)\n12%\n\n\nERP grid\nERP over channels\n15% out of 162\n\n\n\nMulti(channel) plot\n14%\n\n\n\nTopographic ERP\n14%\n\n\nERP image\nERP image\n27% out of 114\n\n\n\nSorted ERP trials\n19%\n\n\n\nTrials\n11%\n\n\nChannel image\nChannel(s) (ERP)\n35% out of 96\n\n\n\nHeatmap\n16%\n\n\n\nChannel image\n9%\n\n\nParallel plot\n(ERP) amplitudes\n50% out of 8\n\n\n\nParallel coordinates\n50%\n\n\n\n\n\n\n\n\n\nCode\nplots2 &lt;- c(\"../miniatures/1.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/2.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/3.png\",\"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/4.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/5.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/6.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/7.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/8.png\", \"../miniatures/filler.png\")\n\nplotnames &lt;- create_table(t) %&gt;% data.frame() %&gt;% \n  mutate(names = str_to_sentence(names)) %&gt;% \n  mutate(names = str_replace(names, \"Erp\", \"ERP\")) %&gt;% \n  mutate(names = str_replace(names, \"erp\", \"ERP\")) %&gt;% tibble::add_column(Plots = plots2, .before = \"type\") %&gt;% \n  dplyr::rename(`Plot types` = type,\n         `Aggregated responses` = names,\n         `Scores` =  score) %&gt;% select(-n, -total, -p) \n\nplotnames_pic &lt;- plotnames %&gt;% flextable() %&gt;% \n  merge_at(j= 1, i = 1:3) %&gt;% merge_at(j= 1, i = 4:6) %&gt;% \n  merge_at(j= 1, i = 7:9) %&gt;% merge_at(j= 1, i = 10:12) %&gt;%\n  merge_at(j= 1, i = 13:15) %&gt;% merge_at(j= 1, i = 16:18) %&gt;%\n  merge_at(j= 1, i = 19:21) %&gt;% merge_at(j= 1, i = 22:23) %&gt;%\n  \n  merge_at(j= 2, i = 1:3) %&gt;% merge_at(j= 2, i = 4:6) %&gt;% \n  merge_at(j= 2, i = 7:9) %&gt;% merge_at(j= 2, i = 10:12) %&gt;%\n  merge_at(j= 2, i = 13:15) %&gt;% merge_at(j= 2, i = 16:18) %&gt;%\n  merge_at(j= 2, i = 19:21) %&gt;% merge_at(j= 2, i = 22:23)  %&gt;% \n  valign(j = 2, valign = \"center\", part = \"all\") %&gt;%\n  compose(j = 'Plots', value = as_paragraph(as_image(Plots, width = 1, height = 0.6))) %&gt;%\n   padding(padding = 1, part = \"all\") %&gt;% \n  autofit() %&gt;% valign(valign = \"top\") %&gt;% \n  height_all(0.01, part = \"all\", unit = \"cm\") %&gt;% \n  surround(\n    i = c(3, 6, 9, 12, 15, 18, 21),\n    j = 1:4,\n    border.bottom = fp_border(color = \"gray\", style = \"dashed\"),\n    part = \"body\"\n  ) %&gt;%   font(fontname = \"Lato\", part=\"all\") %&gt;% \n  hline_bottom(part = \"body\", border = fp_border(color = \"white\", width = 3)) \nplotnames_pic\n\n\n\nPlotsPlot typesAggregated responsesScoresERP plotERP (plot)39% out of 197Averaged ERP (plot)19%ERP wave(form)s6%Butterfly plotButterfly (plot)48% out of 159Single/individual channel ERP (plot)17%Multi(channel/electrode) ERP (plot)14%TopoplotTopo(plot)40% out of 192Topography (plot)39%Topomap7%TopoplottimeseriesTopo(plot) over time(series/course)23% out of 189Topography over time(series/course)22%Topo(plot)12%ERP gridERP over channels15% out of 162Multi(channel) plot14%Topographic ERP14%ERP imageERP image27% out of 114Sorted ERP trials19%Trials11%Channel imageChannel(s) (ERP)35% out of 96Heatmap16%Channel image9%Parallel plot(ERP) amplitudes50% out of 8Parallel coordinates50%\n\n\nCode\n#save_as_html(plotnames_pic, path = \"Table 2.html\")\n#save_as_image(plotnames_pic, path = \"Table 2.png\")\n\n\n\n\nCode\ntab1 &lt;- create_table(t) %&gt;% data.frame() %&gt;% \n  mutate(names = str_to_sentence(names)) %&gt;% \n  mutate(names = str_replace(names, \"Erp\", \"ERP\")) %&gt;% \n  mutate(names = str_replace(names, \"erp\", \"ERP\")) %&gt;% tibble::add_column(Plots = plots2, .before = \"type\") %&gt;% \n  dplyr::rename(`Plot types` = type,\n         `Aggregated responses` = names,\n         `Scores` =  score) %&gt;% select(-n, -total, -p) %&gt;%  gt()  %&gt;% \n  text_transform(\n    locations = cells_body(columns = Plots),\n    fn = function(x) {\n      lapply(x, function(x) {\n              html(paste(local_image(filename = x)))\n      })\n    }\n  ) %&gt;% opt_table_font(font = \"Source Sans Pro\") %&gt;%  tab_options(table_body.hlines.color = \"transparent\") %&gt;% \n  tab_options(data_row.padding = px(0.1), table.font.size = 14, container.padding.x = 1) %&gt;% \n   \n  tab_style(\n    style = cell_borders(\n      sides = c(\"bottom\"),\n      color = \"gray\",\n      weight = px(1.5),\n      style = \"dotted\"\n    ),\n    locations = cells_body(rows = c(3, 6, 9, 12, 15, 18, 21))) \ntab1 #%&gt;% gtsave(\"Table 2.png\")\n\n\n\n\n\n\n  \n    \n    \n      Plots\n      Plot types\n      Aggregated responses\n      Scores\n    \n  \n  \n    \nERP plot\nERP (plot)\n39% out of 197\n    \n\nAveraged ERP (plot)\n19%\n    \n\nERP wave(form)s\n6%\n    \nButterfly plot\nButterfly (plot)\n48% out of 159\n    \n\nSingle/individual channel ERP (plot)\n17%\n    \n\nMulti(channel/electrode) ERP (plot)\n14%\n    \nTopoplot\nTopo(plot)\n40% out of 192\n    \n\nTopography (plot)\n39%\n    \n\nTopomap\n7%\n    \nTopoplot\ntimeseries\nTopo(plot) over time(series/course)\n23% out of 189\n    \n\nTopography over time(series/course)\n22%\n    \n\nTopo(plot)\n12%\n    \nERP grid\nERP over channels\n15% out of 162\n    \n\nMulti(channel) plot\n14%\n    \n\nTopographic ERP\n14%\n    \nERP image\nERP image\n27% out of 114\n    \n\nSorted ERP trials\n19%\n    \n\nTrials\n11%\n    \nChannel image\nChannel(s) (ERP)\n35% out of 96\n    \n\nHeatmap\n16%\n    \n\nChannel image\n9%\n    \nParallel plot\n(ERP) amplitudes\n50% out of 8\n    \n\nParallel coordinates\n50%"
  },
  {
    "objectID": "src/feedbacks.html#struggles-with-plots",
    "href": "src/feedbacks.html#struggles-with-plots",
    "title": "Feedbacks",
    "section": "Struggles with plots",
    "text": "Struggles with plots\n\nstats\n\n\nCode\nstat_preproc &lt;- function(vec){\n  #N = 70\n  tmp &lt;- vec %&gt;% filter(!is.na(.)) %&gt;% \n    dplyr::rename(words = !!names(.)[1]) %&gt;% mutate(words = tolower(words)) %&gt;% \n    mutate(words = ifelse(nchar(words) &lt; 3, paste(words, \"baddd\"), words)) %&gt;% \n    mutate(check = \n    ifelse(grepl(\"\\\\b(baddd|idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|unclear|ugly|don't|useless|nan|clear)\\\\b\", words), \"bad\", \"good\")) \n  return(tmp)\n}\n\nvec_named &lt;- names(data[ , grepl( \"How would you \" , names(data))])\nplot_names &lt;- c(\"line\", \"butterfly\", \"topo\", \"topo_series\", \"erp_grid\", \"erp_img\", \"parallel\", \"channel_img\")\n\nna_table &lt;- function(data, vec_named, plot_names){\n    temp &lt;- data.frame(plot_names)\n    temp$n &lt;- NA\n    for (i in 1:8){\n      n_part &lt;- \n        data[vec_named[i]] %&gt;%  stat_preproc(.) %&gt;% #View()\n      filter(check != \"bad\") %&gt;%  \n      dplyr::summarise(n = n())  \n      temp$n[i] &lt;- n_part$n\n    }\n    return(temp)\n}\n\nnum_named &lt;- na_table(data, vec_named, plot_names)\n\nfamiliar &lt;-  data[61:68] %&gt;% rename_at(vars(colnames(.)), ~ plot_names) %&gt;% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %&gt;%\n  t() %&gt;% rowSums(.) %&gt;% data.frame(.) %&gt;%  tibble::rownames_to_column(., \"plot\") %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\"))\n\nvec_plotted &lt;- names(data[ , grepl( \"Have you ever plotted \" , names(data))]) \n\ndo_vec &lt;- function(vec_plotted, data, plot_names){\n  t1 &lt;- table(data[vec_plotted[1]])\n  for (i in 2:length(vec_plotted)) {\n    t &lt;- table(data[vec_plotted[i]])\n    t1 &lt;- rbind(t1, t)\n  }\n  rownames(t1) &lt;- plot_names \n  return(t1)\n}\n\ntab &lt;- do_vec(vec_plotted, data, plot_names) %&gt;%  data.frame() %&gt;% tibble::rownames_to_column(., \"plots\") %&gt;%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %&gt;% \n  filter(type == \"Yes\") %&gt;% dplyr::select(-type) \n\nnamed &lt;- num_named %&gt;% dplyr::rename(named = n, plots = plot_names)  \n\nmem_tab &lt;-  familiar %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %&gt;%\n  left_join(., named)  %&gt;% left_join(., tab)  \nmem_tab\n\n\n        plots recognized named plotted\n1        line        199   196     187\n2   butterfly        168   159     125\n3        topo        192   192     175\n4 topo_series        195   188     153\n5    erp_grid        187   162     133\n6     erp_img        133   114      70\n7    parallel         11     9       5\n8 channel_img        125    98      51\n\n\n\n\nstruggles\n\n\nCode\nvec &lt;- names(data[ , grepl( \".*Which parts of*.\" , names(data))])\n#which(names(data) %in% vec)\n\n\n\n\nCode\nword_preproc_tool_2 &lt;- function(data, N, lim){\n  #lim = 10\n  tmp &lt;- data %&gt;% dplyr::select(N, N+1, N+2) %&gt;% dplyr::rename(soft = !!names(.)[1], parts = !!names(.)[2], new_feature = !!names(.)[3]) %&gt;% \n    filter(!is.na(soft)) %&gt;% \n    mutate_at(vars(colnames(.)), funs(tolower(.))) %&gt;% \n    mutate(soft = str_replace(soft, 'own', \"custom\"), \n           soft = str_replace(soft, '(matlab)', \"matlab\"), \n           soft = case_when(\n      str_detect(soft, 'brain vision') ~ \"brain vision analyser\",\n      #str_detect(soft, 'matlab|bar.m|boundedline') ~ \"custom matlab\",\n      str_detect(soft, 'mne') ~ \"mne\",\n      TRUE ~ as.character(soft)\n    ), \n    parts = case_when(\n      str_detect(parts, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t|easy') ~ \"-\",\n      TRUE ~ as.character(parts)\n    ),\n    new_feature = case_when(\n      str_detect(new_feature, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(new_feature)\n    )) %&gt;% \n  \n    filter_at(vars(parts, new_feature), all_vars(!is.na(.))) %&gt;% mutate(n = lengths(gregexpr(\"\\\\W+\", soft)) + 1) %&gt;% \n    filter(parts != \"-\" | new_feature != \"-\", n &lt; lim) %&gt;%  dplyr::select(-4) %&gt;% arrange(soft)\n  return(tmp)\n}\n\n\n\n1\n\n\nCode\nstruggle1 &lt;- word_preproc_tool_2(data, 71, 10) \nseparated_row &lt;- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %&gt;% dplyr::select(soft, parts)\n\ntmp &lt;- struggle1 %&gt;% filter( parts != \"-\") %&gt;% dplyr::select(soft, parts) %&gt;% \n  filter(!row_number() %in% c(2, 11, 40, 41, 69, 78, 83, 87, 89, 91))  %&gt;% \n  separate_rows(parts, sep = \"2\\\\)\", convert = FALSE) %&gt;% \n  separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %&gt;%  rbind(., separated_row) %&gt;%\n  mutate(problems = case_when(\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency|publication)\\\\b\", parts) == TRUE ~ \"uncertainty\", \n      grepl(\"\\\\b(axes|lable(s)?|label(s)?|legend|ticks)\\\\b\", parts) == TRUE ~ \"customization\", \n      grepl(\"\\\\b(proportion(s)?|scal(e|ing|es))\\\\b\", parts) == TRUE ~ \"scaling\", \n      grepl(\"\\\\b(color(s)?|colour(s)?)\\\\b\", parts) == TRUE ~ \"color\", \n      grepl(\"\\\\b(preprocessing|extracting|datatype)\\\\b\", parts) == TRUE ~ \"preprocessing\", \n      grepl(\"\\\\b(syncronisation|organizing|groups)\\\\b\", parts) == TRUE ~ \"subplotting\", \n      grepl(\"\\\\b(mean|significan(t|ce)|permutations|combine)\\\\b\", parts) == TRUE ~ \"statistics\", \n      )) %&gt;% filter(nchar(parts) != 0) %&gt;% filter(!is.na(problems)) #%&gt;% View()\n\nn_rest &lt;- mem_tab %&gt;% filter(plots == \"line\") %&gt;% select(plotted)  - nrow(tmp)\n\n\ntmp1 &lt;- tmp  %&gt;% group_by(problems) %&gt;%\n      dplyr::summarise(n = n()) %&gt;% \n      rbind(c(\"no complains\", as.numeric(n_rest$plotted))) %&gt;% \n      mutate(n = as.numeric(n)) %&gt;% \n      mutate(total = sum(n)) \n\nproblem1 &lt;- tmp1 %&gt;%  mutate(name = \"ERP plot\")\n\ntmp1\n\n\n# A tibble: 8 × 3\n  problems          n total\n  &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;\n1 color             4   187\n2 customization    11   187\n3 preprocessing     3   187\n4 scaling           3   187\n5 statistics        4   187\n6 subplotting       3   187\n7 uncertainty      63   187\n8 no complains     96   187\n\n\n\n\n2\n\n\nCode\nstruggle2 &lt;- word_preproc_tool_2(data, 82, 10) \n#separated_row &lt;- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %&gt;% dplyr::select(parts)\n\ntmp &lt;- struggle2 %&gt;% filter( parts != \"-\") %&gt;% dplyr::select(parts) %&gt;%\n  filter(!row_number() %in% c(18, 31))  %&gt;% \n  #separate_rows(parts, sep = \"2\\\\)\", convert = FALSE) %&gt;% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %&gt;%  rbind(., separated_row) %&gt;%\n  mutate(problems = case_when(\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\", \n      grepl(\"\\\\b(publication|ax(is|es)?|lable(s)?|label(s)?|legend|ticks|neg)\\\\b\", parts) == TRUE ~ \"customization\", \n      grepl(\"\\\\b(color(s|ing)?|colour(s)?)\\\\b\", parts) == TRUE ~ \"color\", \n      grepl(\"\\\\b(proportion(s)?|scal(e|ing|es))\\\\b\", parts) == TRUE ~ \"scaling\", \n      grepl(\"\\\\btopo\\\\w*\", parts) == TRUE ~ \"adding topography\", \n      grepl(\"\\\\b(channel(s)?|electrodes(s)?|interpretable|read|remembering)\\\\b\", parts) == TRUE ~ \"channel selection\"\n      )) %&gt;% filter(nchar(parts) != 0) %&gt;% filter(!is.na(problems)) #%&gt;% View()\n\nn_rest &lt;- mem_tab %&gt;% filter(plots == \"butterfly\") %&gt;% select(plotted)  - nrow(tmp)\n\ntmp2 &lt;- tmp %&gt;% group_by(problems) %&gt;%\n      dplyr::summarise(n = n()) %&gt;% \n      rbind(c(\"no complains\", as.numeric(n_rest$plotted))) %&gt;% \n      mutate(n = as.numeric(n)) %&gt;% \n      mutate(total = sum(n)) \n\nproblem2 &lt;- tmp2  %&gt;% mutate(name = \"Butterfly plot\")\n\ntmp2 \n\n\n# A tibble: 6 × 3\n  problems              n total\n  &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt;\n1 adding topography     5   125\n2 channel selection    11   125\n3 color                14   125\n4 customization         4   125\n5 uncertainty           1   125\n6 no complains         90   125\n\n\n\n\n3\n\n\nCode\nstruggle3 &lt;- word_preproc_tool_2(data, 87, 10) \n#separated_row &lt;- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %&gt;% dplyr::select(parts)\n\ntmp &lt;- struggle3 %&gt;% filter( parts != \"-\") %&gt;% dplyr::select(parts) %&gt;% \n  filter(!row_number() %in% c(5, 7, 16, 18, 43, 50))  %&gt;% \n  separate_rows(parts, sep = \";\", convert = FALSE) %&gt;% filter(nchar(parts) != 0) %&gt;%  \n  filter(!row_number() %in% c(59))  %&gt;% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %&gt;%  rbind(., separated_row) %&gt;%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(head|headshape|montage|topographies)\\\\b\", parts) == TRUE ~ \"head shape and montage\",\n    grepl(\"\\\\b(time|threshold)\\\\b\", parts) == TRUE ~ \"time range selection\",\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\",\n      grepl(\"\\\\b(scal(e|ing|es)|limits|proportion(s)?)\\\\b\", parts) == TRUE ~ \"scaling\", \n      grepl(\"\\\\b(interpolat(e|ion)?|edges)\\\\b\", parts) == TRUE ~ \"interpolation\",\n      grepl(\"\\\\b(color(s|ing|bar|map)?|colour(s)?)\\\\b\", parts) == TRUE ~ \"color\", \n      grepl(\"\\\\b(channel(s)?|electrode(s)?|sensors|elec)\\\\b\", parts) == TRUE ~ \"channel selection\",\n      \n      grepl(\"\\\\b(publication|ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|features|layout)\\\\b\", parts) == TRUE ~ \"customization\", \n      grepl(\"\\\\b(mean|significan(t|ce)|permutations|p-value(s)?|smoothing|statistical|stats)\\\\b\", parts) == TRUE ~ \"statistics\",\n      ))  %&gt;% \n  filter(nchar(parts) != 0) %&gt;% filter(!is.na(problems)) #%&gt;% View()\n\nn_rest &lt;- mem_tab %&gt;% filter(plots == \"topo\") %&gt;% select(plotted)  - nrow(tmp)\n\ntmp3 &lt;- tmp %&gt;% group_by(problems) %&gt;%\n      dplyr::summarise(n = n()) %&gt;% \n      rbind(c(\"no complains\", as.numeric(n_rest$plotted))) %&gt;% \n      mutate(n = as.numeric(n)) %&gt;%       \n  mutate(total = sum(n)) \n\nproblem3 &lt;- tmp3 %&gt;% mutate(name = \"Topoplot\")\n\ntmp3\n\n\n# A tibble: 9 × 3\n  problems                   n total\n  &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n1 channel selection         15   175\n2 color                      9   175\n3 customization              4   175\n4 head shape and montage    10   175\n5 interpolation              5   175\n6 scaling                    9   175\n7 statistics                 3   175\n8 time range selection       5   175\n9 no complains             115   175\n\n\n\n\n4\n\n\nCode\nstruggle4 &lt;- word_preproc_tool_2(data, 92, 10) \n#separated_row &lt;- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %&gt;% dplyr::select(parts)\n\ntmp &lt;- struggle4 %&gt;% filter( parts != \"-\") %&gt;% dplyr::select(parts) %&gt;% \n  filter(!grepl(\"\\\\b(no|okay|certain|see|same as|\\\"\\\"|reaching)\\\\b\", parts)) %&gt;% #View()\n  filter(!row_number() %in% c(17, 51, 12 ))  %&gt;% \n  separate_rows(parts, sep = \";\", convert = FALSE) %&gt;% \n#filter(!row_number() %in% c(59))  %&gt;% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %&gt;%  rbind(., separated_row) %&gt;%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(head|headshape|montage|topographies|topoplots|shape)\\\\b\", parts) == TRUE ~ \"head shape and montage\",\n    grepl(\"\\\\b(time(s|course|points)?|threshold)\\\\b\", parts) == TRUE ~ \"time specification\",\n    grepl(\"\\\\b(channel(s)?|electrode(s)?|sensors|elec)\\\\b\", parts) == TRUE ~ \"channel selection\",\n    grepl(\"\\\\b(color(s|ing|bar|map|scale)?|colour(s)?|color)\\\\b\", parts) == TRUE ~ \"color\", \n    grepl(\"\\\\b(ax(is|es)?|lable(s)?|label(s|ing)?|features|markers|layout|specifications|publication|handle)\\\\b\", parts) == TRUE ~ \"customization\", \n     grepl(\"\\\\b(visible|subplots|size(s)?|resizing|arrange|scal(e|ing|es)|references|limits)\\\\b\", parts) == TRUE ~ \"scaling\",\n    grepl(\"\\\\b(mean|significan(t|ce)|permutations|smoothing|statistical|stats|t-stat)\\\\b\", parts) == TRUE ~ \"statistics\",\n    grepl(\"\\\\b(interpolat(e|ion)?|edges)\\\\b\", parts) == TRUE ~ \"interpolation\",\n      TRUE ~ '_other'\n      )) %&gt;% filter(nchar(parts) != 0) %&gt;% filter(!is.na(problems)) #%&gt;% View()\n\nn_rest &lt;- mem_tab %&gt;% filter(plots == \"topo_series\") %&gt;% select(plotted)  - nrow(tmp)\n\ntmp4 &lt;- tmp %&gt;% group_by(problems) %&gt;%\n      dplyr::summarise(n = n()) %&gt;% \n      rbind(c(\"no complains\", as.numeric(n_rest$plotted))) %&gt;% \n      mutate(n = as.numeric(n)) %&gt;% \n      mutate(total = sum(n)) \nproblem4 &lt;- tmp4  %&gt;% mutate(name = \"Topoplot timeseries\")\ntmp4\n\n\n# A tibble: 8 × 3\n  problems                   n total\n  &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n1 channel selection          3   153\n2 color                      7   153\n3 customization              6   153\n4 head shape and montage     3   153\n5 scaling                    6   153\n6 statistics                 1   153\n7 time specification        26   153\n8 no complains             101   153\n\n\n\n\n5\n\n\nCode\nstruggle5 &lt;- word_preproc_tool_2(data, 99, 10) \n#separated_row &lt;- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %&gt;% dplyr::select(parts)\n\ntmp &lt;- struggle5 %&gt;% filter( parts != \"-\") %&gt;% dplyr::select(parts) %&gt;% #View()\n  filter(!grepl(\"\\\\b(_|reaching)\\\\b\", parts)) %&gt;%\n  filter(!row_number() %in% c(33 ))  %&gt;% \n  separate_rows(parts, sep = \";\", convert = FALSE) %&gt;% #View()\n#filter(!row_number() %in% c(59))  %&gt;% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %&gt;%  rbind(., separated_row) %&gt;%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(selecting|marking|spotting)\\\\b\", parts) == TRUE ~ \"channel selection\",\n    grepl(\"\\\\b(legible|readable|visible|small|shape|montage|subplots|size(s)?|larger|dimensions|channel(s)?|electrode(s)?|sensors)|scal(e|ing|es)|references\\\\b\", parts) == TRUE ~ \"legibility and scaling\",\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\",\n      grepl(\"\\\\b(color(s|ing|bar|map)?|colour(s)?)\\\\b\", parts) == TRUE ~ \"color\", \n      grepl(\"\\\\b(publication|quality|ax(is|es)?|lable(s)?|label(s|ing)?|legend|ticks|edit|features|markers|layout)\\\\b\", parts) == TRUE ~ \"customization\", \n      grepl(\"\\\\b(preprocessing|extracting|masks)\\\\b\", parts) == TRUE ~ \"preprocessing\", \n    \n      TRUE ~ '_other'\n      )) %&gt;% filter(nchar(parts) != 0) %&gt;% filter(!is.na(problems)) #%&gt;% View()\n  #filter(problems ==\"legibility and scaling\") %&gt;%\n  \n\nn_rest &lt;- mem_tab %&gt;% filter(plots == \"erp_grid\") %&gt;% select(plotted)  - nrow(tmp)\n\ntmp5 &lt;- tmp %&gt;% group_by(problems) %&gt;%\n      dplyr::summarise(n = n()) %&gt;% \n      rbind(c(\"no complains\", as.numeric(n_rest$plotted))) %&gt;% \n      mutate(n = as.numeric(n)) %&gt;% \n      mutate(total = sum(n)) \n\nproblem5 &lt;- tmp5 %&gt;% mutate(name = \"ERP grid\")\ntmp5\n\n\n# A tibble: 7 × 3\n  problems                   n total\n  &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n1 channel selection          3   133\n2 color                      1   133\n3 customization              8   133\n4 legibility and scaling    33   133\n5 preprocessing              2   133\n6 uncertainty                2   133\n7 no complains              84   133\n\n\n\n\n6\n\n\nCode\nstruggle6 &lt;- word_preproc_tool_2(data, 104, 10) \n#separated_row &lt;- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %&gt;% dplyr::select(parts)\n\ntmp &lt;- struggle6 %&gt;% filter( parts != \"-\") %&gt;% dplyr::select(parts) %&gt;% \n  filter(!grepl(\"\\\\b(x|ok|no)\\\\b\", parts)) %&gt;% \n # filter(!row_number() %in% c(33 ))  %&gt;% \n  separate_rows(parts, sep = \";\", convert = FALSE) %&gt;% #View()\n#filter(!row_number() %in% c(59))  %&gt;% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %&gt;%  rbind(., separated_row) %&gt;%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(axes|paper)\\\\b\", parts) == TRUE ~ \"customization\", \n    grepl(\"\\\\b(preprocessing|making sense|correspondance)\\\\b\", parts) == TRUE ~ \"preprocessing\",\n    grepl(\"\\\\b(sort(ing)?|max|correspondance)\\\\b\", parts) == TRUE ~ \"sorting\", \n    grepl(\"\\\\b(smoothing)\\\\b\", parts) == TRUE ~ \"smoothing\", \n    grepl(\"\\\\b(epochs|time)\\\\b\", parts) == TRUE ~ \"time specification\", \n    grepl(\"\\\\b(colo(r|ur)|paper)\\\\b\", parts) == TRUE ~ \"color\", \n      TRUE ~ '_other'\n      )) %&gt;% filter(nchar(parts) != 0) %&gt;% filter(!is.na(problems)) #%&gt;% View() #%&gt;%   filter(problems ==\"defining epochs\") \n\nn_rest &lt;- mem_tab %&gt;% filter(plots == \"erp_img\") %&gt;% select(plotted)  - nrow(tmp)\n\ntmp6 &lt;- tmp %&gt;% group_by(problems) %&gt;%\n      dplyr::summarise(n = n()) %&gt;% \n      rbind(c(\"no complains\", as.numeric(n_rest$plotted))) %&gt;% \n      mutate(n = as.numeric(n)) %&gt;% \n            mutate(total = sum(n)) \n\nproblem6 &lt;- tmp6 %&gt;% mutate(name = \"ERP image\")\ntmp6\n\n\n# A tibble: 7 × 3\n  problems               n total\n  &lt;chr&gt;              &lt;dbl&gt; &lt;dbl&gt;\n1 color                  2    70\n2 customization          2    70\n3 preprocessing          3    70\n4 smoothing              3    70\n5 sorting                5    70\n6 time specification     2    70\n7 no complains          53    70\n\n\n\n\n8\n\n\nCode\nstruggle8 &lt;- word_preproc_tool_2(data, 114, 10) \n#separated_row &lt;- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %&gt;% dplyr::select(parts)\n\ntmp &lt;- struggle8 %&gt;% filter( parts != \"-\") %&gt;% dplyr::select(parts) %&gt;% \n  filter(!grepl(\"\\\\b(n|x|ok|dont)\\\\b\", parts)) %&gt;% #View()\n # filter(!row_number() %in% c(33 ))  %&gt;% \n  #separate_rows(parts, sep = \";\", convert = FALSE) %&gt;% #View()\n#filter(!row_number() %in% c(59))  %&gt;% \n  #separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %&gt;%  rbind(., separated_row) %&gt;%\n  mutate(problems = case_when(\n    grepl(\"\\\\b(sort(ing)?|order(ing)?|organisation)\\\\b\", parts) == TRUE ~ \"sorting\", \n    grepl(\"\\\\b(smoothing)\\\\b\", parts) == TRUE ~ \"smoothing\", \n    grepl(\"\\\\b(scale|visibility|visability|interpreting|range)\\\\b\", parts) == TRUE ~ \"legibility and scaling\", \n    grepl(\"\\\\b(color(bar)?|paper)\\\\b\", parts) == TRUE ~ \"color\", \n    \n      TRUE ~ '_other'\n      )) %&gt;% filter(nchar(parts) != 0) %&gt;% filter(!is.na(problems)) #%&gt;% View()# %&gt;%   filter(problems ==\"_other\") \n\nn_rest &lt;- mem_tab %&gt;% filter(plots == \"channel_img\") %&gt;% select(plotted)  - nrow(tmp)\n\ntmp8 &lt;- tmp %&gt;% group_by(problems) %&gt;%\n      dplyr::summarise(n = n()) %&gt;% \n      rbind(c(\"no complains\", as.numeric(n_rest$plotted))) %&gt;% \n      mutate(n = as.numeric(n)) %&gt;% \n      mutate(total = sum(n)) \nproblem8 &lt;- tmp8 %&gt;% mutate(name = \"Channel image\")\n\ntmp8\n\n\n# A tibble: 5 × 3\n  problems                   n total\n  &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n1 color                      2    51\n2 legibility and scaling     4    51\n3 smoothing                  1    51\n4 sorting                    7    51\n5 no complains              37    51\n\n\n\n\n\nCombined\n\n\nCode\nwrite.xlsx(data.frame(problem1) %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Main problems\", \"Scores\", \"Total\", \"Plot names\")), \"../data/aggregated_problems.xlsx\", sheetName\n   =\"ERP plot\", row.names=FALSE)\nwrite.xlsx(problem2 %&gt;% data.frame(.) %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Main problems\", \"Scores\", \"Total\", \"Plot names\")), \"../data/aggregated_problems.xlsx\", append=TRUE, sheetName =\"Butterfly plot\", row.names=FALSE)\nwrite.xlsx(problem3 %&gt;% data.frame(.) %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Main problems\", \"Scores\", \"Total\", \"Plot names\")), \"../data/aggregated_problems.xlsx\", append=TRUE, sheetName =\"Topoplot\", row.names=FALSE)\nwrite.xlsx(problem4 %&gt;% data.frame(.) %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Main problems\", \"Scores\", \"Total\", \"Plot names\")), \"../data/aggregated_problems.xlsx\", append=TRUE, sheetName =\"Topoplot timeseries\", row.names=FALSE)\nwrite.xlsx(problem5 %&gt;% data.frame(.) %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Main problems\", \"Scores\", \"Total\", \"Plot names\")), \"../data/aggregated_problems.xlsx\", append=TRUE, sheetName =\"ERP grid\", row.names=FALSE)\nwrite.xlsx(problem6 %&gt;% data.frame(.) %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Main problems\", \"Scores\", \"Total\", \"Plot names\")), \"../data/aggregated_problems.xlsx\", append=TRUE, sheetName =\"ERP image\", row.names=FALSE)\nwrite.xlsx(problem8 %&gt;% data.frame(.) %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"Main problems\", \"Scores\", \"Total\", \"Plot names\")), \"../data/aggregated_problems.xlsx\", append=TRUE, sheetName =\"Channel image\", row.names=FALSE)\n\n\n\n\nCode\nprob_comb &lt;- \n  rbind(problem1, problem2, problem3, problem4, problem5, problem6, problem8) %&gt;%\n  group_by(name) %&gt;%  mutate(index = match(name, unique(name)))  %&gt;% filter(problems != \"no complains\") %&gt;% \n  arrange(desc(n)) %&gt;% slice(1:3) %&gt;% \n  arrange(index) %&gt;%  dplyr::select(name, problems, n, total) %&gt;%  \n  mutate(name = str_to_sentence(name)) %&gt;% \n  mutate(name = str_replace(name, \"Erp\", \"ERP\")) %&gt;% \n  mutate(name = str_replace(name, \"erp\", \"ERP\")) %&gt;%  \n  group_by(name) %&gt;%\n  dplyr::mutate(groupRow = 1:n()) %&gt;%\n  ungroup() %&gt;%\n  mutate(p = round(as.numeric(n)/as.numeric(total), 2) * 100) %&gt;% \n  dplyr::group_by(name) %&gt;%   mutate(mx = max(p)) %&gt;% \n  arrange(desc(mx), desc(p)) %&gt;% \n  mutate(score = paste(p, total, sep = \"% out of \")) %&gt;% \n  dplyr::mutate(name = ifelse(groupRow == 1, as.character(name), \"\")) %&gt;%\n  dplyr::mutate(score = ifelse(groupRow == 1, as.character(score), paste(p, \"%\", sep = \"\"))) %&gt;%\n  select(-c(groupRow, n, total, p, mx)) \nprob_comb\n\n\n# A tibble: 21 × 3\n# Groups:   name [8]\n   name                  problems               score         \n   &lt;chr&gt;                 &lt;chr&gt;                  &lt;chr&gt;         \n 1 \"ERP plot\"            uncertainty            34% out of 187\n 2 \"\"                    customization          6%            \n 3 \"\"                    color                  2%            \n 4 \"ERP grid\"            legibility and scaling 25% out of 133\n 5 \"\"                    customization          6%            \n 6 \"\"                    channel selection      2%            \n 7 \"Topoplot timeseries\" time specification     17% out of 153\n 8 \"\"                    color                  5%            \n 9 \"\"                    customization          4%            \n10 \"Channel image\"       sorting                14% out of 51 \n# ℹ 11 more rows\n\n\n\n\nCode\nplots3 &lt;- c(\"../miniatures/1.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/5.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/4.png\",\"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/7.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/2.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/3.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\", \"../miniatures/6.png\", \"../miniatures/filler.png\", \"../miniatures/filler.png\")\n\nprobs &lt;- prob_comb %&gt;% tibble::add_column(Plots = plots3, .before = \"name\") %&gt;% dplyr::rename(`Plot name` = name,\n         `The main problem` = problems,\n         `Scores` =  score) %&gt;% ungroup() \n\nprobs_pic &lt;- probs %&gt;% flextable() %&gt;% \n  merge_at(j= 1, i = 1:3) %&gt;% merge_at(j= 1, i = 4:6) %&gt;% \n  merge_at(j= 1, i = 7:9) %&gt;% merge_at(j= 1, i = 10:12) %&gt;%\n  merge_at(j= 1, i = 13:15) %&gt;% merge_at(j= 1, i = 16:18) %&gt;% \n  merge_at(j= 1, i = 19:21) %&gt;%\n  merge_at(j= 2, i = 1:3) %&gt;% merge_at(j= 2, i = 4:6) %&gt;% \n  merge_at(j= 2, i = 7:9) %&gt;% merge_at(j= 2, i = 10:12) %&gt;%\n  merge_at(j= 2, i = 13:15) %&gt;% merge_at(j= 2, i = 16:18) %&gt;%\n  merge_at(j= 2, i = 19:21) %&gt;% \n  padding(padding = 1, part = \"all\") %&gt;% \n  valign(j = 2, valign = \"center\", part = \"all\") %&gt;%\n  compose(j = 'Plots', value = as_paragraph(as_image(Plots, width = 1, height = 0.6))) %&gt;%\n  autofit() %&gt;%\n  height_all(0.01, part = \"all\", unit = \"cm\") %&gt;% \n  surround(\n    i = c(3, 6, 9, 12, 15, 18, 21),\n    j = 1:4,\n    border.bottom = fp_border(color = \"gray\", style = \"dashed\"),\n    part = \"body\"\n  ) %&gt;% \n  hline_bottom(part = \"body\", border = fp_border(color = \"white\", width = 3)) %&gt;% \n  font(fontname = \"Lato\", part=\"all\") \nprobs_pic \n\n\n\nPlotsPlot nameThe main problemScoresERP plotuncertainty34% out of 187customization6%color2%ERP gridlegibility and scaling25% out of 133customization6%channel selection2%Topoplot timeseriestime specification17% out of 153color5%customization4%Channel imagesorting14% out of 51legibility and scaling8%color4%Butterfly plotcolor11% out of 125channel selection9%adding topography4%Topoplotchannel selection9% out of 175head shape and montage6%color5%ERP imagesorting7% out of 70preprocessing4%smoothing4%\n\n\nCode\n#save_as_image(probs_pic, path = \"Table 3.pdf\")\n#save_as_html(probs_pic, path = \"Table 3.html\")\n\n\n\n\nThe most problematic plot\n\n\nCode\nrbind(problem1, problem2, problem3, problem4, problem5, problem6, problem8) %&gt;%\n  group_by(name) %&gt;%  mutate(index = match(name, unique(name))) %&gt;% filter(problems == \"no complains\") %&gt;%\n  mutate(percent1 = 100 - (round(n / total, 2) * 100)) %&gt;% \n  ggplot(., aes(y = reorder(name, percent1), x = percent1)) +\n  geom_col(fill =\"lightblue1\", colour =\"dodgerblue3\") + \n  geom_text(aes(label = paste0(percent1, \"%\"), y = name, x = percent1),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent of complains\", y  = \"\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")"
  },
  {
    "objectID": "src/feedbacks.html#new-features",
    "href": "src/feedbacks.html#new-features",
    "title": "Feedbacks",
    "section": "New features",
    "text": "New features\n\n1\n\n\nCode\ntmp &lt;- struggle1 %&gt;% filter( new_feature != \"-\") %&gt;% dplyr::select(new_feature) %&gt;%\n  filter(!grepl(\"\\\\b(\\\\.|\\\\/|see)\\\\b\", new_feature)) %&gt;%  \n  filter(!row_number() %in% c(13, 18, 20  ))  %&gt;% \n  separate_rows(new_feature, sep = \";\", convert = FALSE) %&gt;% \n#filter(!row_number() %in% c(59))  %&gt;% \n  separate_rows(new_feature, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %&gt;% \n  mutate(group = case_when(\n    grepl(\"\\\\bsignif\\\\w*\", new_feature) == TRUE ~ \"adding significance\", \n    grepl(\"\\\\bstat\\\\w*\", new_feature) == TRUE ~ \"adding statistics\", \n    grepl(\"\\\\btopo\\\\w*\", new_feature) == TRUE ~ \"adding topoplot\", \n    grepl(\"\\\\b(custom\\\\w*|details|annotations|font|labels|color|colours|thicker)\", new_feature) == TRUE ~ \"customization (color, labels)\", \n    grepl(\"\\\\b(electrode|click|control|interact\\\\w*|gui|select\\\\w*)\", new_feature) == TRUE ~ \"interactivity and channel selection\", \n    grepl(\"\\\\b(highlight|shadow|window)\", new_feature) == TRUE ~ \"area highlighting\", \n    grepl(\"\\\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", new_feature) == TRUE ~ \"uncertainty\", \n    \n      TRUE ~ '_other'\n      )) %&gt;% filter(nchar(new_feature) != 0) #%&gt;% View()\n\n#n_rest &lt;- mem_tab[2, 3] - nrow(tmp)\n\ntmp1 &lt;- tmp %&gt;% group_by(group) %&gt;%\n      dplyr::summarise(n = n()) %&gt;% \n     # rbind(c(\"no complains\", as.numeric(n_rest))) %&gt;% \n      mutate(n = as.numeric(n)) %&gt;% \n      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) \n\n\ntmp1 %&gt;% \n  arrange(desc(n)) %&gt;% \n  kable(escape = F, booktabs = T) %&gt;% kable_styling(\"striped\", position = \"center\",) %&gt;% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n\ngroup\nn\npercent\npercent1\n\n\n\n\nuncertainty\n18\n25.7\n26\n\n\n_other\n14\n20.0\n20\n\n\ncustomization (color, labels)\n11\n15.7\n16\n\n\ninteractivity and channel selection\n9\n12.9\n13\n\n\nadding significance\n6\n8.6\n9\n\n\nadding statistics\n6\n8.6\n9\n\n\narea highlighting\n4\n5.7\n6\n\n\nadding topoplot\n2\n2.9\n3\n\n\n\n\n\n\n\nCode\n # words = ifelse(nchar(words)==0, NA, words),\n#write.xlsx(tmp, \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n\n# problems: n of problems is higher than number of rows \n\n\n\n\n2\n\n\nCode\ntmp &lt;- struggle2 %&gt;% filter( new_feature != \"-\") %&gt;% dplyr::select(new_feature) %&gt;% #View()\n  filter(!grepl(\"\\\\b(see|not|useful)\\\\b\", new_feature)) %&gt;%  \n  #filter(!row_number() %in% c(13, 18, 20  ))  %&gt;% \n  #separate_rows(new_feature, sep = \";\", convert = FALSE) %&gt;% \n#filter(!row_number() %in% c(59))  %&gt;% \n  separate_rows(new_feature, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %&gt;% \n  mutate(group = case_when(\n    grepl(\"\\\\bsignif\\\\w*\", new_feature) == TRUE ~ \"adding significance\", \n    grepl(\"\\\\b(stat\\\\w*|average|mean)\", new_feature) == TRUE ~ \"adding statistics\", \n    grepl(\"\\\\btopo\\\\w*\", new_feature) == TRUE ~ \"adding topoplot\", \n    grepl(\"\\\\b(custom\\\\w*|details|annotations|opacity|font|labels|color|colour(s)?|thicker)\", new_feature) == TRUE ~ \"customization (color, labels)\", \n    grepl(\"\\\\b(manipulating|highlight|graying|click|control|interact\\\\w*|gui|select\\\\w*)\", new_feature) == TRUE ~ \"interactivity and channel selection\", \n    grepl(\"\\\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", new_feature) == TRUE ~ \"uncertainty\", \n    \n      TRUE ~ '_other'\n      )) %&gt;% filter(nchar(new_feature) != 0) #%&gt;% View()\n\ntmp1 &lt;- tmp %&gt;% group_by(group) %&gt;%\n      dplyr::summarise(n = n()) %&gt;% \n     # rbind(c(\"no complains\", as.numeric(n_rest))) %&gt;% \n      mutate(n = as.numeric(n)) %&gt;% \n      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) \n\n\ntmp1 %&gt;% \n  arrange(desc(n)) %&gt;% \n  kable(escape = F, booktabs = T) %&gt;% kable_styling(\"striped\", position = \"center\",) %&gt;% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n\ngroup\nn\npercent\npercent1\n\n\n\n\ninteractivity and channel selection\n16\n35.6\n36\n\n\ncustomization (color, labels)\n11\n24.4\n24\n\n\nadding topoplot\n9\n20.0\n20\n\n\n_other\n4\n8.9\n9\n\n\nadding statistics\n4\n8.9\n9\n\n\nuncertainty\n1\n2.2\n2\n\n\n\n\n\n\n\n\n\n3\n\n\nCode\ntmp &lt;- struggle3 %&gt;% filter( new_feature != \"-\") %&gt;% dplyr::select(new_feature) %&gt;% \n  filter(!grepl(\"\\\\b(no|\\\\/|above|good|balanced)\\\\b\", new_feature)) %&gt;%  #View()\n  #filter(!row_number() %in% c(13, 18, 20  ))  %&gt;% \n  #separate_rows(new_feature, sep = \";\", convert = FALSE) %&gt;% \n#filter(!row_number() %in% c(59))  %&gt;% \n  separate_rows(new_feature, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %&gt;% \n  mutate(group = case_when(\n    grepl(\"\\\\bsignif\\\\w*\", new_feature) == TRUE ~ \"adding significance\",\n    grepl(\"\\\\b(3d)\\\\b\", new_feature) == TRUE ~ \"3d\", \n    grepl(\"\\\\b(stat\\\\w*|average|mean)\\\\b\", new_feature) == TRUE ~ \"adding statistics\", \n    grepl(\"\\\\b(interpolat\\\\w*|extrapolat\\\\w*)\\\\b\", new_feature) == TRUE ~ \"interpolation and extrapolation\", \n    grepl(\"\\\\btopo\\\\w*\", new_feature) == TRUE ~ \"adding topoplot\", \n    grepl(\"\\\\b(custom\\\\w*|details|annotations|opacity|font|labels|color(s|map|maps|bar)?|colour(s)?|thicker)\\\\b\", new_feature) == TRUE ~ \"customization (color, labels)\", \n    grepl(\"\\\\b(anomatiom|slider|scrolling|gif|manipulating|hightlight|highlight|graying|click|control|interact\\\\w*|gui|select\\\\w*)\", new_feature) == TRUE ~ \"interactivity and channel selection\", \n    grepl(\"\\\\b(ci|ribbons|se|ses|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", new_feature) == TRUE ~ \"uncertainty\", \n     grepl(\"\\\\b(shape(s)?|circle|head)\\\\b\", new_feature) == TRUE ~ \"head shape\", \n      TRUE ~ '_other'\n      )) %&gt;% filter(nchar(new_feature) != 0)# %&gt;% View()\n\n\ntmp1 &lt;- tmp %&gt;% group_by(group) %&gt;%\n      dplyr::summarise(n = n()) %&gt;% \n     # rbind(c(\"no complains\", as.numeric(n_rest))) %&gt;% \n      mutate(n = as.numeric(n)) %&gt;% \n      mutate(percent = round(n / sum(n), 3) * 100, percent1 = round(n / sum(n), 2) * 100) \n\n\ntmp1 %&gt;% \n  arrange(desc(n)) %&gt;% \n  kable(escape = F, booktabs = T) %&gt;% kable_styling(\"striped\", position = \"center\",) %&gt;% \n  kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n\ngroup\nn\npercent\npercent1\n\n\n\n\ncustomization (color, labels)\n17\n24.6\n25\n\n\n_other\n14\n20.3\n20\n\n\ninteractivity and channel selection\n14\n20.3\n20\n\n\n3d\n5\n7.2\n7\n\n\nhead shape\n5\n7.2\n7\n\n\ninterpolation and extrapolation\n5\n7.2\n7\n\n\nadding topoplot\n4\n5.8\n6\n\n\nadding significance\n3\n4.3\n4\n\n\nadding statistics\n2\n2.9\n3"
  },
  {
    "objectID": "src/feedbacks.html#for-developers",
    "href": "src/feedbacks.html#for-developers",
    "title": "Feedbacks",
    "section": "For developers",
    "text": "For developers\n\n\nCode\nfordev &lt;- gdata::combine(struggle1, struggle2, struggle3, struggle4, struggle5, struggle6, struggle8) \n\nfordev1 &lt;- fordev %&gt;% \n  mutate(source = case_when(\n    grepl(\"struggle1\", source) == TRUE ~ \"ERP plot\", \n    grepl(\"struggle2\", source) == TRUE ~ \"Butterfly plot\", \n    grepl(\"struggle3\", source) == TRUE ~ \"Topoplot\", \n    grepl(\"struggle4\", source) == TRUE ~ \"Topoplot series\", \n    grepl(\"struggle5\", source) == TRUE ~ \"ERP grid\", \n    grepl(\"struggle6\", source) == TRUE ~ \"ERP image\", \n    grepl(\"struggle8\", source) == TRUE ~ \"Channel image\")) %&gt;% \n  dplyr::rename(struggles = parts, plot_type = source) %&gt;% filter(nchar(soft) != 1) %&gt;% \n  mutate(struggles = ifelse(nchar(struggles) &lt; 3, \"-\", struggles)) %&gt;%\n  mutate(struggles = str_replace_all(struggles, \"it was ok\", \"-\")) %&gt;%\n  mutate(new_feature = str_replace_all(new_feature, \"it was ok\", \"-\")) %&gt;%\n  mutate(new_feature = ifelse(nchar(new_feature) &lt; 3, \"-\", new_feature))  %&gt;% \n  filter(!(new_feature == \"-\" & struggles == \"-\")) %&gt;% filter(soft !=\"i don't remember\") %&gt;% filter(soft !=\"see comments for topoplot\") \n#%&gt;% distinct(soft) %&gt;% View()\n\nfordev2 &lt;-\n  fordev1 %&gt;% mutate(soft = case_when(\n    grepl(\"matlab\", soft) & grepl(\"custom\", soft) & !grepl(\"(fieldtrip|eeglab|ggplot|erplab)\", soft) == TRUE ~ \"custom matlab\", \n    grepl(\"matlab\", soft) & !grepl(\"(fieldtrip|eeglab|ggplot|erplab|python)\", soft) == TRUE ~ \"custom matlab\", \n    grepl(\"matplotlib\", soft) & !grepl(\"(fieldtrip|eeglab|ggplot|erplab|python)\", soft) == TRUE ~ \"custom matplotlib\", \n    grepl(\"matplotlib\", soft) & grepl(\"custom\", soft) & !grepl(\"(fieldtrip|eeglab|ggplot|erplab)\", soft) == TRUE ~ \"custom matplotlib\", \n    grepl(\"ggplot\", soft) & grepl(\"custom\", soft) & !grepl(\"(fieldtrip|eeglab|erplab|plotly)\", soft) == TRUE ~ \"custom ggplot\", \n    grepl(\"ggplot\", soft) & !grepl(\"(fieldtrip|eeglab|erplab|plotly)\", soft) == TRUE ~ \"custom ggplot\", \n    grepl(\"eeglab\", soft) & grepl(\"custom\", soft) & !grepl(\"(fieldtrip|ggplot|erplab)\", soft) == TRUE ~ \"custom eeglab\", \n    grepl(\"fieldteip|fieldtrip's ft_topoplot\", soft)  == TRUE ~ \"fieldtrip\", \n    grepl(\"eegalb|eeglan|eeglab gui|eeglab \\\\(i think\\\\)|eeglab, matlab plot\", soft)  == TRUE ~ \"eeglab\", \n    grepl(\"fieldtrip, matlab|fieldtrip\", soft)  == TRUE ~ \"fieldtrip, custom matlab\", \n    grepl(\"fieldtrip, matlab custom code\", soft)  == TRUE ~ \"fieldtrip, custom matlab\", \n    grepl(\"fieldtrip, matlab custom code)\", soft)  == TRUE ~ \"fieldtrip, custom matlab\", \n\n      TRUE ~ soft\n)) %&gt;% mutate(soft = str_replace_all(soft, \" or\", \",\")) %&gt;% \n    mutate(soft = str_replace_all(soft, \" and\", \",\")) %&gt;% \n    mutate(soft = str_replace_all(soft, \";\", \",\")) %&gt;% \n    mutate(soft = str_replace_all(soft, \" \\\\+\", \",\")) %&gt;% \n    mutate(soft = str_replace(soft, \"\\\\+\", \", \")) %&gt;% \n    mutate(soft = str_replace_all(soft, \"\\\\/\", \", \")) %&gt;%\n    mutate(soft = str_replace_all(soft, \" &\", \", \")) %&gt;%\n    mutate(soft = str_replace_all(soft, \"cant remember maybe \", \"\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \"cusom script, cartool back in the days.\", \"custom, cartool\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \"brainstorm\\\\?\", \"brainstorm\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \"script(s)?\", \"\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \",, code from mike cohen's book\", \"\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \" for sanity checks\", \"\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \" for sanity check, publication\", \"\")) %&gt;%\n    mutate(soft = str_replace_all(soft, ', matlab \"plot\" function', \"\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \" with a few modifications of topoplot.m\", \"\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \" ing\", \"\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \"eeglab \\\\(topoplot\\\\), fieldtrip \\\\(ft_topoploter\\\\), github.com, widmann, sphspline\", \"eeglab, fieldtrip\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \"fieldtrip ft_topoplotxxx functions\\r\\ncustom matlab code to modify\", \"fieldtrip, custom matlab\")) %&gt;%\n    mutate(soft = str_replace_all(soft, \"\\r\\n\", \", \")) %&gt;% \n    mutate(soft = str_replace_all(soft, \"spm12\", \"spm\")) %&gt;% \n  select(soft, plot_type, struggles, new_feature) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"Tools\", \"Plot type\", \"Struggles\", \"Proposed features\"))\n\n    # distinct(soft)  %&gt;% \n    # View()\n\n\n\n\nCode\neeglab &lt;- fordev2 %&gt;% filter(grepl(\"eeglab\", Tools)) %&gt;% write.csv(\"../feedback/eeglab.csv\")\nfieldtrip &lt;- fordev2 %&gt;% filter(grepl(\"fieldtrip\", Tools))  %&gt;% write.csv(\"../feedback/fieldtrip.csv\")\nmne &lt;- fordev2 %&gt;% filter(grepl(\"mne\", Tools)) %&gt;% write.csv(\"../feedback/mne.csv\")\nerplab &lt;- fordev2 %&gt;% filter(grepl(\"erplab\", Tools)) %&gt;% write.csv(\"../feedback/erplab.csv\")\nBVA &lt;- fordev2 %&gt;% filter(grepl(\"brain vision analyser\", Tools)) %&gt;% write.csv(\"../feedback/BVA.csv\")\nbrainstorm &lt;- fordev2 %&gt;% filter(grepl(\"brainstorm\", Tools)) %&gt;% write.csv(\"../feedback/brainstorm.csv\")\n\n#spm &lt;- fordev2 %&gt;% filter(grepl(\"spm\", Tools))\n#besa &lt;- fordev2 %&gt;% filter(grepl(\"besa\", Tools))\n#cartool &lt;- fordev2 %&gt;% filter(grepl(\"cartool\", Tools))\n#unfold &lt;- fordev2 %&gt;% filter(grepl(\"unfold\", Tools))"
  },
  {
    "objectID": "src/feedbacks.html#feedback",
    "href": "src/feedbacks.html#feedback",
    "title": "Feedbacks",
    "section": "Feedback",
    "text": "Feedback\n\n\nCode\nfeed &lt;- data[120] %&gt;% dplyr::rename(feedback = !!names(.)[1]) %&gt;%  \n  filter(!is.na(feedback), feedback != \"-\") #%&gt;% View()\nfeed  %&gt;% \n  filter(!row_number() %in% c(3, 4, 14, 17, 32, 37, 41, 59)) %&gt;% # just appreciation \nwrite.csv(\"../feedback/general_feedback.csv\")"
  },
  {
    "objectID": "src/about.html",
    "href": "src/about.html",
    "title": "About the project",
    "section": "",
    "text": "The Art of Brainwaves: A Survey on Event-Related Potential Visualization Practices\nHello! We conducted a survey to find out how researchers use EEG plotting tools in their daily work. Here you can find the analysis of this survey.\nCheck out these sections on the left panel:\n\nSample information - information about our respondents (country, position, etc.) and their experience;\nVisualization customs - information about familiarity with ERP plots, attitudes towards features of analytic tools, opinions on controversial issues in ERP visualization, awareness about perceptual issues related with ERP plots;\nProficiency - how proficiency affects researchers attitudes and visualization customs;\nNaming and feedback - how would researchers name ERP plots in a free manner, what kind of struggles they have during visualization, what kind of features they would like to have in analytic tools concerning each plot type, general feedback;\nSoftware - on popularity of analytical tools.\n\nAdditional sections are devoted to paper Figures and Tables.\nStudy was conducted by Vladimir Mikheev, René Skukies and Benedikt Ehinger and supported by the Transregional Collaborative Research Center 161 (Sonderforschungsbereiche/Transregio 161, SFB-TRR 161) and Deutsche Forschungsgemeinschaft (DFG, German Research Foundation)."
  },
  {
    "objectID": "src/software.html",
    "href": "src/software.html",
    "title": "Software usage",
    "section": "",
    "text": "Here we present researcher’s visualization customs and awareness about some methodological problems."
  },
  {
    "objectID": "src/software.html#setup",
    "href": "src/software.html#setup",
    "title": "Software usage",
    "section": "Setup",
    "text": "Setup\n\n\n[1] TRUE\n\n\n\n\nCode\ndata &lt;- read_excel(\"../data/results_survey.xlsx\") #change to csv or tab and check will it work\n\ndata &lt;- data[1:121] %&gt;% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\n\n\n\n\nCode\ncit1 &lt;- read.table(file = \"../data/cit/eeglab.txt\", header = TRUE, fill = TRUE)[1:2] %&gt;% mutate(name = \"EEGLAB\")\ncit2 &lt;- read.table(file = \"../data/cit/mne.txt\", header = TRUE, fill = TRUE)[1:2]%&gt;% mutate(name = \"MNE\")\ncit3 &lt;- read.table(file = \"../data/cit/erplab.txt\", header = TRUE, fill = TRUE)[1:2]%&gt;% mutate(name = \"ERPLAB\")\ncit4 &lt;- read.table(file = \"../data/cit/fieldtrip.txt\", header = TRUE, fill = TRUE)[1:2]%&gt;% mutate(name = \"FieldTrip\")\ncit5 &lt;- read.table(file = \"../data/cit/brainstorm.txt\", header = TRUE, fill = TRUE)[1:2]%&gt;% mutate(name = \"Brainstorm\")\n\ncit_data &lt;- rbind(cit1, cit2, cit3, cit4, cit5) %&gt;% rename_at(vars(colnames(.)), ~ c(\"year\", \"citations\", \"name\"))"
  },
  {
    "objectID": "src/software.html#software-usage",
    "href": "src/software.html#software-usage",
    "title": "Software usage",
    "section": "Software usage",
    "text": "Software usage\n\nFrequency\n\n\nCode\nna.omit(data[51]) %&gt;% nrow()\n\n\n[1] 22\n\n\nCode\nother &lt;- c(rep(\"Custom scripts\", each=9), \"4DBTi\", rep(\"letswave\", 3), \"mTRF\", \"RAGU\", \"IGOR Pro\", \"EEGProcessor\", \"ELAN\", \"WinEEG\") %&gt;% table(.) %&gt;% data.frame(.) %&gt;% rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))\n\n\n\n\nCode\nvec &lt;- names(data[25:50]) %&gt;% str_split_i(., \"\\\\? \\\\[\", 2) %&gt;%  str_sub(., 1, -2)\n\nsoftware &lt;- data[25:50] %&gt;%\n    rename_at(vars(colnames(.)), ~ vec) %&gt;% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %&gt;% \n  cbind(., data[51] %&gt;% rename_at(vars(colnames(.)), ~ c(\"other\"))) %&gt;% mutate(other = case_when(\n      grepl(\"\\\\b(letswave)\\\\b\", other, ignore.case = TRUE) == TRUE ~ \"Letswave\",\n      grepl(\"\\\\b(r|matlab|python|ggplot(2)?|own)\\\\b\", other, ignore.case = TRUE) == TRUE ~ \"Custom scripts\",\n      grepl(\"\\\\bnever\\\\b\", other, ignore.case = TRUE) == TRUE ~ NA_character_,\n      TRUE ~ as.character(other)\n      ))  %&gt;%\n  mutate(cs = ifelse(other == \"Custom scripts\", other, NA_character_),\n         other2 = ifelse(other != \"Custom scripts\", other, NA_character_)) %&gt;% \n  mutate(`Custom scripts` = case_when(\n    cs == \"Custom scripts\" ~ as.numeric(1),\n    TRUE ~ as.numeric(`Custom scripts`)\n  )) %&gt;% \n  mutate(Letswave = case_when( #gross\n    other2 == \"Letswave\" ~ as.numeric(1),\n    TRUE ~ as.numeric(0)\n  )) %&gt;% dplyr::select(-cs, -other, -other2) # next time I also will extend other 2 too\n\n\nd &lt;- data.frame(rowSums(t(software))) %&gt;%  tibble::rownames_to_column(., \"soft\") %&gt;% \n    rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))   %&gt;% \n    filter(sum_scores != 0) %&gt;% \n      mutate(soft = ifelse(sum_scores &gt; 8, as.character(soft), \"Other\")) %&gt;% group_by(soft) %&gt;% \n      dplyr::summarise(sum_scores = sum(sum_scores)) %&gt;% ungroup() %&gt;% \n      mutate(percent_score = round(sum_scores / nrow(software) * 100))  %&gt;% \n  mutate(soft = factor(soft, levels = soft[rev(order(sum_scores))]))\n\n\n\n\nCode\ntools &lt;- rev(c(\"EEGLAB\", \"FieldTrip\", expression(italic(\"Custom scripts\")), \"MNE-Python\", \"ERPLAB\", \"BrainVision A.\",\n           expression(italic(\"Other\")), \"Brainstorm\", \"SPM\", \"LIMO\", \"Unfold\", \"BESA\", \"Curry\", \"Cartool\"))\n\nchart &lt;- d %&gt;% \n    ggplot(data = ., aes(y = reorder(soft, percent_score),  x= percent_score)) +\n    geom_bar(stat=\"identity\", fill =\"#6BAED6\") + \n    labs(x=\"\",title=\"Which EEG, MEG, or iEEG analysis platform\\nhave you used for ERP plotting?\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), \n            hjust = -0.2, size = 4)  + \n    theme_classic() + theme(\n      axis.text.y = element_text(size = 14),\n      legend.position=\"none\", plot.caption.position = \"plot\", \n      plot.caption = element_text(hjust=0), \n      text = element_text(family = \"Lato\"),\n      axis.text.x = element_blank(), axis.text = element_text(size = 10),  \n      plot.title = element_text(color = \"grey10\", size = 16, face = \"bold\"),\n      axis.title.y = element_blank(),\n      #axis.title.x = element_blank(),\n      plot.title.position = \"plot\"\n      ) + \n    xlim(0, 100) +\n    scale_y_discrete(labels = tools)\n\nchart +\n    labs(caption = sprintf(\"N of respondents - %d\",  nrow(software)))\n\n\n\n\n\nMatlab users\n\n\nCode\ndata.frame(rowSums(t(software))) %&gt;%  tibble::rownames_to_column(., \"soft\") %&gt;% \n    rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))   %&gt;% \n    filter(sum_scores != 0) %&gt;% \n   mutate(soft = case_when(\n      grepl(\"\\\\b(EEGLAB|FieldTrip|ERPLAB|Brainstorm)\\\\b\", soft) == TRUE ~ \"MATLAB-based tools\", \n      TRUE ~ soft\n      )) %&gt;% \n      #mutate(soft = ifelse(sum_scores &gt; 8, as.character(soft), \"Other\")) %&gt;% \n  group_by(soft) %&gt;% \n      dplyr::summarise(sum_scores = sum(sum_scores)) %&gt;% ungroup() %&gt;% \n      mutate(percent_score = round(sum_scores / nrow(software) * 100))  %&gt;% \n  mutate(soft = factor(soft, levels = soft[rev(order(sum_scores))])) %&gt;% \n  arrange(desc(sum_scores)) %&gt;% head(5)\n\n\n# A tibble: 5 × 3\n  soft                    sum_scores percent_score\n  &lt;fct&gt;                        &lt;dbl&gt;         &lt;dbl&gt;\n1 \"MATLAB-based tools\"           313           147\n2 \"Custom scripts\"                90            42\n3 \"MNE-Python\"                    88            41\n4 \"Brain Vision Analyser\"         47            22\n5 \"SPM \"                          18             8\n\n\n\n\nCode\nsoftware %&gt;% select(EEGLAB, FieldTrip, ERPLAB, Brainstorm) %&gt;% mutate(sum = rowSums(across(where(is.numeric)))) %&gt;% \n    filter(sum != 0) %&gt;% summarise(n = n()/ nrow(software) * 100)\n\n\n         n\n1 82.62911\n\n\n\n\nMonousers\nSoft frequency among those who used only one software\n\n\nCode\nns &lt;- cbind(data.frame(rowSums(software), software)) %&gt;% \n  filter(rowSums.software. == 1) %&gt;% dplyr::select(-rowSums.software.)\n\ndata.frame(rowSums(t(ns))) %&gt;%  \n  tibble::rownames_to_column(., \"soft\") %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\")) %&gt;% \n  arrange(., desc(sum_scores)) %&gt;% filter(sum_scores != 0)\n\n\n                   soft sum_scores\n1            MNE.Python         11\n2                EEGLAB          9\n3             FieldTrip          8\n4 Brain.Vision.Analyser          2\n5        Custom.scripts          2\n6                ERPLAB          1\n7                  SPM.          1\n8                Unfold          1\n\n\n\n\nNumber of used tools\n\n\nCode\nnu_med &lt;- data.frame(rowSums(software)) %&gt;%  dplyr::rename(n_soft = rowSums.software.) %&gt;% summarise(median_n_soft = median(n_soft)) %&gt;% as.numeric()\n\ndata.frame(rowSums(software)) %&gt;%  dplyr::rename(n_soft = rowSums.software.) %&gt;% #arrange(desc(n_soft))\n ggplot(data = ., aes(n_soft)) +\n  geom_histogram(bins = 45) +  scale_x_continuous(breaks=seq(0, 30, 1)) +\n  labs(x =\"Number of software used\", y=\"Count\") +\n  theme_classic() + theme(legend.position=\"none\", axis.text.x = element_text(size = 12))  +\n    labs(caption = sprintf(\"N of respondents - %d, median - %d\",  nrow(software), nu_med)) +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10)) \n\n\n\n\n\n\n\nCooccurrence\n\n\nCode\nlibrary(reshape2)\n# how to order by diagonal matrix \n# how to add others\nsoftware &lt;- data[25:50]\nd1 &lt;- foreach(i = colnames(software)) %do% ifelse(software[i]==\"Yes\", 1, 0)\nc &lt;- crossprod(matrix(unlist(d1), ncol = 26))\nrownames(c) &lt;- colnames(software) %&gt;% str_split_i(., \"\\\\? \\\\[\", 2) %&gt;%  str_sub(., 1, -2)\ncolnames(c) &lt;- rownames(c)\n\ndiag.order &lt;- order(diag(c), decreasing = FALSE)\nmat_reordered &lt;- c[diag.order, diag.order]\n\nmat_reordered %&gt;%  reshape2::melt(.) %&gt;% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) +\n    labs(caption = sprintf(\"N of respondents - %d\",  nrow(software))) +\n    theme(legend.position=\"none\", plot.caption.position = \"plot\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10)) \n\n\n\n\n\n\n\nCode\nzero_rows &lt;- rowSums(mat_reordered) == 0\nzero_cols &lt;- colSums(mat_reordered) == 0\n\n# Create a new matrix array without the rows and columns consisting only of zeroes\nnew_matrix &lt;- mat_reordered[!zero_rows, !zero_cols]\nnew_matrix %&gt;% reshape2::melt(.) %&gt;% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) +\n    labs(caption = sprintf(\"N of respondents - %d. Zero rows are excluded\",  nrow(software))) +\n    theme(legend.position=\"none\", plot.caption.position = \"plot\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10))"
  },
  {
    "objectID": "src/software.html#software-usage-based-on-citations",
    "href": "src/software.html#software-usage-based-on-citations",
    "title": "Software usage",
    "section": "Software usage based on citations",
    "text": "Software usage based on citations\n\n\nCode\ncbPalette &lt;- rev(c(\"#e3342f\",  \"#38c172\", \"#3490dc\", \"#f6993f\",\"#9561e2\"))\n#font_add_google(\"Lato\")\n\n#showtext_opts(dpi = 100)\n#showtext_auto(enable = TRUE)\n\ncit_plot &lt;- cit_data %&gt;% filter(year &lt; 2023) %&gt;% group_by(year) %&gt;% \n  mutate(ylast = case_when(year == 2022 ~ citations, TRUE ~ NA)) %&gt;% \n  ggplot(., aes(x = year, y = citations, color = name, label = name)) + geom_line() +\n  geom_point(shape = 21, fill = 'white', size=2, stroke=1) + \n  scale_color_manual(values=cbPalette) +  \n  theme(legend.position = \"none\",\n        panel.background = element_blank(), panel.border = element_blank(), strip.background = element_blank(), \n        text = element_text(family = \"Lato\"),\n        plot.title = element_text(color = \"grey10\", size = 16, face = \"bold\", margin = margin(t = 15)),\n        plot.title.position = \"plot\",)+\n  scale_x_continuous(\n    expand = c(0, 0),\n    limits = c(2003.8, 2023), \n    breaks = seq(2004, 2023, by = 3)\n  ) + labs(\n    title = \"Citations per year for the most popular EEG tools\", subtitle = \"\", x = \"Years\", y = \"Yearly citations\"\n  ) + geom_rangeframe(color = \"black\") +\n  scale_y_continuous(\n    expand = c(0.04, 0),\n    breaks = seq(0, 1800, by = 200)\n  )+ coord_cartesian(xlim = c(2004, 2029), clip = \"off\")  + \n  geom_text_repel(\n    aes(color = name, label = name, x = 2022, y = ylast,),\n    family = \"Lato\",\n    fontface = \"bold\",\n    size = 4,\n    direction = \"y\",\n    xlim = c(2022.3, NA),\n    hjust = 0,\n    segment.size = .7,\n    segment.alpha = .5,\n    segment.linetype = \"dotted\",\n    box.padding = .4,\n    segment.curvature = -0.1,\n    segment.ncp = 3,\n    segment.angle = 20\n  )# \n\ncit_plot"
  },
  {
    "objectID": "src/software.html#comb",
    "href": "src/software.html#comb",
    "title": "Software usage",
    "section": "Comb",
    "text": "Comb\n\n\nCode\n#showtext_opts(dpi = 100)\n#showtext_auto(enable = TRUE)\ncbPalette2 &lt;- c(\"#f6993f\",  \"#38c172\", \"grey10\", \"#e3342f\", \"#3490dc\", \"grey10\", \"grey10\", \"#9561e2\", rep(\"grey10\", 6) )\nggarrange(chart + labs(title=\"Which EEG, MEG, or iEEG\\nanalysis platform\\nhave you used for ERP plotting?\")+\n            theme( axis.text.y = element_text(color = rev(cbPalette2), face = \"bold\"),\n              plot.title = element_text(color = \"grey10\", size = 14, margin = margin(t = 15))), \n          \n          cit_plot + labs(title = \"Citations per year for\\nthe most popular EEG tools\") +\n            theme(plot.title = element_text(color = \"grey10\", face = \"bold\", size = 14, margin = margin(t = 15)))+\n            scale_x_continuous(limits = c(2003.8, 2023), breaks = seq(2004, 2023, by = 3)), \n          labels = c(\"A\", \"B\"), align = 'h')"
  },
  {
    "objectID": "src/figures.html",
    "href": "src/figures.html",
    "title": "All figures",
    "section": "",
    "text": "Here are the figures from the paper Art of the Brainwaves."
  },
  {
    "objectID": "src/figures.html#data",
    "href": "src/figures.html#data",
    "title": "All figures",
    "section": "data",
    "text": "data\n\n\nCode\ndata &lt;- read_excel(\"../data/results_survey.xlsx\")\ndata &lt;- data[1:121] %&gt;% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\n\ncit1 &lt;- read.table(file = \"../data/cit/eeglab.txt\", header = TRUE, fill = TRUE)[1:2] %&gt;% mutate(name = \"EEGLAB\")\ncit2 &lt;- read.table(file = \"../data/cit/mne.txt\", header = TRUE, fill = TRUE)[1:2]%&gt;% mutate(name = \"MNE\")\ncit3 &lt;- read.table(file = \"../data/cit/erplab.txt\", header = TRUE, fill = TRUE)[1:2]%&gt;% mutate(name = \"ERPLAB\")\ncit4 &lt;- read.table(file = \"../data/cit/fieldtrip.txt\", header = TRUE, fill = TRUE)[1:2]%&gt;% mutate(name = \"FieldTrip\")\ncit5 &lt;- read.table(file = \"../data/cit/brainstorm.txt\", header = TRUE, fill = TRUE)[1:2]%&gt;% mutate(name = \"Brainstorm\")\n\ncit_data &lt;- rbind(cit1, cit2, cit3, cit4, cit5) %&gt;% rename_at(vars(colnames(.)), ~ c(\"year\", \"citations\", \"name\"))\n\njust &lt;- read.csv(\"../data/justification.csv\") %&gt;% dplyr::select(group, num)\n\nfont_add_google(\"Lato\")\nshowtext_opts(dpi = 100)\nshowtext_auto(enable = TRUE)"
  },
  {
    "objectID": "src/figures.html#figure-4",
    "href": "src/figures.html#figure-4",
    "title": "All figures",
    "section": "Figure 4",
    "text": "Figure 4\n\n\nCode\ncountry &lt;- data.frame(table(data[8]))  %&gt;% dplyr::rename(country_work = !!names(.)[1]) %&gt;%\n  mutate(country_work = ifelse(Freq &gt;= 6, as.character(country_work), \"Other\")) %&gt;% group_by(country_work) %&gt;% \n  mutate(country_work = case_when(\n    country_work == \"United Kingdom\" ~ \"UK\",\n    TRUE ~ as.character(country_work)  \n  )) %&gt;% \n  dplyr::summarise(Freq = sum(Freq)) %&gt;% \n  dplyr::mutate(percent_score = round(Freq / sum(Freq) * 100)) %&gt;% \n  mutate(country_work = factor(country_work, levels = country_work[rev(order(percent_score))]))\n\nitalised1 &lt;- rev(c(\"Germany\", expression(italic(\"Other\")), \"USA\", \"UK\", \"France\", \"Netherlands\", \"Switzerland\", \"Spain\", \"Italy\", \"Russia\", \"Belgium\", \"Australia\"))\n\n\ncountry_fig &lt;- country %&gt;%\n  ggplot(data = ., aes(y = reorder(country_work, percent_score),  x= percent_score)) +#, fill = country_work)) +\n  geom_col(stat = \"identity\", width = 0.8) + \n  labs(x = \"Percent\", y=\"\", title = \"Country of work\") +\n  geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.1,\n  size = 4)  + theme_classic()   +\n  theme(legend.position=\"none\", \n        plot.caption.position = \"plot\", \n        plot.caption = element_text(hjust=0), \n        axis.text.y = element_text(size = 12),\n        text = element_text(family = \"Lato\"),\n        ) + coord_cartesian(clip = \"off\") +\n    scale_y_discrete(labels = italised1)\n\n\npos &lt;- data[c(12, 13)] %&gt;% dplyr::rename(position = !!names(.)[1], other = !!names(.)[2]) %&gt;%\n  mutate(position = case_when(\n    position == \"Industry senior researcher\" ~ \"Industry R&D\",\n    position == \"Doctoral researcher\" ~ \"PhD Candidate\",\n    position == \"Postdoctoral researcher\" ~ \"Postdoc\",\n    position == \"Bachelor student\" ~ \"Bachelor\",\n    position == \"Master student\" ~ \"Master\",\n    TRUE ~ as.character(position)))  %&gt;% \n  mutate(other = tolower(other)) %&gt;% \n  mutate(position = case_when(\n      grepl(\"\\\\b(master)\\\\b\", other) == TRUE ~ \"Master\",\n      grepl(\"\\\\b(engineer|tech)\\\\b\", other) == TRUE ~ \"Industry R&D\",\n      TRUE ~ as.character(position)\n      )) %&gt;% dplyr::select(position) %&gt;% na.omit(.) %&gt;% table() %&gt;% as.data.frame()  %&gt;% \n   mutate(position = factor(position, levels = rev(c('Bachelor', 'Master', 'PhD Candidate', 'Postdoc', 'Professor', 'Industry R&D', 'Medical doctor', 'Other')))) %&gt;% mutate(percent_score = round(Freq / sum(Freq) * 100))\n\nitalised2 &lt;- rev(c('Bachelor', 'Master', 'PhD Candidate', 'Postdoc', 'Professor', 'Industry R&D', 'Medical doctor', expression(italic('Other'))))\nposition &lt;- pos %&gt;% \n    ggplot(data = ., aes(y = position, x= percent_score))+ \n    geom_col(stat=\"identity\") + labs(title = \"Current position\", x = \"Percent\", y=\"\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.1) +\n    theme_classic()  +\n    theme(legend.position=\"none\", \n        text = element_text(family = \"Lato\"), \n        plot.caption.position = \"plot\", \n        plot.caption = element_text(hjust=0), \n        axis.text = element_text(size = 10)) + \n    coord_cartesian(clip = \"off\") +\n    scale_y_discrete(labels = italised2)\n\nfield &lt;- as.data.frame(table(data[9])) %&gt;% arrange(desc(Freq)) %&gt;% head(3)\nfield$Freq[1] &lt;- field$Freq[1] + 1 # from Others\nfield$Freq[2] &lt;- field$Freq[2] + 1\nfield$Freq[3] &lt;- field$Freq[3] + 1\n\nfieldplot &lt;- field %&gt;% dplyr::rename(area = !!names(.)[1]) %&gt;%\n  mutate(percent_score = round(Freq / sum(Freq) * 100)) %&gt;% \n    ggplot(data = ., aes(y = reorder(area, percent_score),  x = percent_score)) +\n    geom_col(stat=\"identity\", width = 0.7) + labs(y = \"\", title=\"Field of research\", x =\"Percent\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.1)  + \n  theme_classic()  +\n    theme(legend.position=\"none\", \n          plot.caption = element_text(hjust=0), \n          text = element_text(family = \"Lato\"),\n          axis.text.y = element_text(size = 12)) + scale_y_discrete(labels=c(\"Applied\", \"Clinical\", \"Fundamental\")) + \n  coord_cartesian(clip = \"off\")\n\nmethod &lt;- data[14:17]\ncolnames(method) &lt;- names(method) %&gt;%  str_split_i(., \"\\\\? \\\\[\", 2)  %&gt;%  str_sub(., 1, -2)\n\nmethods &lt;- data.frame(rowSums(t(data.frame(foreach(i = colnames(method)) %do% ifelse(method[i]==\"Yes\", 1, 0))))) %&gt;% \n  tibble::rownames_to_column(., \"plots\") %&gt;% \n    dplyr::rename(method = !!names(.)[1], sum_scores = !!names(.)[2])  %&gt;%  \n    mutate(percent_score = round(sum_scores / sum(sum_scores) * 100)) %&gt;% \n  \n    ggplot(., aes(y = reorder(method, percent_score), x = percent_score)) + \n    geom_col(stat = \"identity\", width = 0.7) + labs(y = \"\", x = \"Percent\", title = \"Method\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.1)+\n    theme_classic() + \n    theme(legend.position=\"none\", text = element_text(family = \"Lato\"), \n          plot.caption = element_text(hjust=0), axis.text.y = element_text(size = 14)) +\n    scale_y_discrete(labels=c(\"OPMs MEG\", \"Intracranial EEG\", \"SQUID MEG\", \"Scalp EEG\")) +\n    coord_cartesian(clip = \"off\") + xlim(0, 75)\n\n\n\n\nCode\nf4 &lt;- #png(filename=\"bench_query_sort.png\", width=1000, height=800)\n  ggarrange(country_fig + geom_col(stat = \"identity\", width = 0.8, fill =\"#6BAED6\") + \n            theme(axis.text.y = element_text(size = 14), plot.title = element_text(size = 22), axis.text.x = element_blank()) + xlim(0, 100) + labs(x= \"Percent of respondents\"), \n          position + xlim(0, 100) + geom_col(stat = \"identity\", fill =\"#6BAED6\") + \n            theme(axis.text.y = element_text(size = 14), plot.title = element_text(size = 22), axis.text.x = element_blank()) + labs(x = \"Percent of respondents\"),   \n          fieldplot + xlim(0, 100) + geom_col(stat = \"identity\", width = 0.7, fill =\"#6BAED6\") + \n            theme(axis.text.y = element_text(size = 14), plot.title = element_text(size = 22), axis.text.x = element_blank()) + labs(x = \"Percent of respondents\"), \n          methods  + geom_col(stat = \"identity\", width = 0.7, fill =\"#6BAED6\") +  \n            scale_y_discrete(labels=c(\"OPMs\", \"iEEG\", \"MEG\", \"Scalp EEG\")) + xlim(0, 100) +  \n            theme(axis.text.y = element_text(size = 14), plot.title = element_text(size = 22), axis.text.x = element_blank()) + labs(x = \"Percent of respondents\"),\n          labels = c(\"A\", \"B\", \"C\", \"D\"),\n          ncol = 2, nrow = 2, align = 'hv') \n\n#while (!is.null(dev.list()))  dev.off()\n\n\nf4 \n\n\n\n\n\nCode\n#ggsave(\"f4.png\", f4, units = \"px\", dpi=100, width = 1180, height = 880)"
  },
  {
    "objectID": "src/figures.html#figure-5",
    "href": "src/figures.html#figure-5",
    "title": "All figures",
    "section": "Figure 5",
    "text": "Figure 5\n\n\nCode\nyear &lt;- data %&gt;% dplyr::rename(years = !!names(.)[20]) %&gt;% filter(.[[20]] &lt; 50) %&gt;% select(years)\n\nyears &lt;- year %&gt;% group_by(years) %&gt;% \n  dplyr::summarise(n = n()) %&gt;% \n  mutate(p = round(n / sum(n), 2))  %&gt;% ggplot(data = ., aes(x=years, y = p)) +\n  geom_col(position = \"identity\", col=\"grey\") +  scale_x_continuous(breaks=seq(0, 30, 5)) +\n  labs(x =\"Years of experience with EEG, MEG, or iEEG analysis\", y=\"\") +\n  theme_classic() + theme(legend.position=\"none\", text = element_text(family = \"Lato\"),\n                          axis.text = element_text(size = 10)) +\n  theme(legend.position=\"none\", plot.caption = element_text(hjust=0), \n        axis.text = element_text(size = 10)) + \n  geom_vline(xintercept = median(year$years),        # Add line for mean\n             col = \"brown1\", lty='dashed',\n             lwd = 1) +\n  geom_text(aes(label = paste0(\"median = \", median(year$years)), col = \"brown1\",\n                x = median(year$years)*2.2, family = \"Lato\",\n                y  = 0.11)) + scale_y_continuous(labels = scales::percent)\ntmp_med &lt;- data[19] %&gt;% dplyr::rename(papers = !!names(.)[1]) %&gt;% \n  filter(papers &lt; 100) %&gt;% summarise(median_paper = median(papers)) %&gt;% as.numeric()\n\npapers &lt;- data[19] %&gt;% dplyr::rename(papers = !!names(.)[1]) \n\npapers_fig &lt;- papers %&gt;% \n  filter(papers &lt; 100) %&gt;% group_by(papers) %&gt;% \n  dplyr::summarise(n = n()) %&gt;% \n  mutate(p = round(n / sum(n), 2)) %&gt;% \n\nggplot(., aes(x = papers, y = p)) +\n  geom_col(position = \"identity\", bins = 45, col=\"grey\") +\n  labs(x =\"The number of published papers/preprints with EEG, MEG or iEEG analysis\", y = \"\") + theme_classic()  +\n  theme(legend.position=\"none\", plot.caption = element_text(hjust=0), text = element_text(family = \"Lato\"),\n        axis.text = element_text(size = 10)) + \n  geom_vline(xintercept = tmp_med - 1,        # Add line for mean, -1 because starts from zero\n             col = \"brown1\", lty='dashed',\n             lwd = 1) +\n  geom_text(aes(label = paste0(\"median = \", tmp_med), \n                x = tmp_med*7, col = \"brown1\", family = \"Lato\",\n                y  = 0.15)) + scale_y_continuous(labels = scales::percent)\n\ncc &lt;- table(data[22])  %&gt;% data.frame()%&gt;% dplyr::rename(level = !!names(.)[1]) %&gt;%\n    mutate(percent_score = round(Freq / sum(Freq) * 100)) %&gt;% \n    ggplot(data = ., aes(y = reorder(level, Freq),  x = percent_score))  +\n    geom_col(stat=\"identity\", width = 0.5) + \n    geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.2)  +\n  theme_classic() +\n  theme(legend.position=\"none\", axis.text.x = element_text(size = 12), text = element_text(family = \"Lato\")) +\n  labs(title = \"Code contribution\", x=\"Percent\", y=\"\")  +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10)) + xlim(0, 64)\n\ncolorsal &lt;- c(\"#f9a65a\", \"#599ad3\", \"#8dc63f\")\nsal &lt;- table(data[21]) %&gt;% data.frame() %&gt;% dplyr::rename(level = !!names(.)[1]) %&gt;%\n    mutate(percent_score = round(Freq / sum(Freq) * 100)) %&gt;% \n    mutate(level = factor(level, levels = rev(c(\"Beginner\", \"Intermediate\", \"Expert\"))))\n\nsall &lt;- sal %&gt;% \n    ggplot(data = ., aes(y = level, x = percent_score)) +  \n    geom_col(stat=\"identity\",  width = 0.5) + labs(x = \"Percent\", y = \"\", title=\"Self-assessed level\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.2)  + theme_classic() +\n    theme(legend.position=\"none\", axis.text.x = element_text(size = 12), text = element_text(family = \"Lato\"),\n          plot.caption = element_text(hjust=0), axis.text = element_text(size = 10))\n\n\n\n\nCode\nf5 &lt;- ggarrange(years +  geom_col(position = \"identity\", bins = 45, fill =\"#6BAED6\") + \n  geom_vline(xintercept = median(year$years),        # Add line for mean\n             col = \"#FC9272\", lty='dashed',\n             lwd = 1) + labs(title =\"Years of experience\", y= \"Percent of\\nrespondents\", x=\"\") ,\n  \n          papers_fig + geom_col(position = \"identity\", bins = 45, fill =\"#6BAED6\") + \n  geom_vline(xintercept = tmp_med - 1,        # Add line for mean\n             col = \"#FC9272\", lty='dashed',\n             lwd = 1) + labs(title =\"Number of papers published\", y= \"Percent of\\nrespondents\", x=\"\"), \n  \n          cc +  geom_col(stat = \"identity\",  width = 0.5, fill =\"#6BAED6\") + xlim(0, 100) + theme(axis.text.y = element_text(size = 10), axis.text.x = element_blank()) +  \n    labs(x =\"Percent of respondents\") , \n  \n          sall + geom_col(stat = \"identity\",  width = 0.5, fill =\"#6BAED6\") + xlim(0, 100) + theme(axis.text.y = element_text(size = 10), axis.text.x = element_blank()) +  \n    labs(x =\"Percent of respondents\"), \n          labels = c(\"A\", \"B\", \"C\", \"D\"),\n          ncol = 2, nrow = 2) \nf5"
  },
  {
    "objectID": "src/figures.html#figure-6",
    "href": "src/figures.html#figure-6",
    "title": "All figures",
    "section": "Figure 6",
    "text": "Figure 6\n\n\nCode\nvec &lt;- c(\"line\", \"butterfly\", \"topo\",  \"topo_map\", \"topo_array\", \"erp_image\", \"parallel\", \"channel_image\")\n\nfamiliar &lt;-  data[61:68] %&gt;% rename_at(vars(colnames(.)), ~ vec) %&gt;% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\n\n\n\nCode\nstat_preproc &lt;- function(vec){\n  tmp &lt;- vec %&gt;% filter(!is.na(.)) %&gt;% \n    dplyr::rename(words = !!names(.)[1]) %&gt;% mutate(words = tolower(words)) %&gt;% \n    mutate(words = ifelse(nchar(words) &lt; 3, paste(words, \"baddd\"), words)) %&gt;% \n    mutate(check = \n    ifelse(grepl(\"\\\\b(baddd|idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|unclear|ugly|don't|useless|nan|clear)\\\\b\", words), \"bad\", \"good\")) \n  return(tmp)\n}\n\n\n\n\nCode\nvec_named &lt;- names(data[ , grepl( \"How would you \" , names(data))])\nplot_names &lt;- c(\"line\", \"butterfly\", \"topo\", \"topo_series\", \"erp_grid\", \"erp_img\", \"parallel\", \"channel_img\")\n\nna_table &lt;- function(data, vec_named, plot_names){\n    temp &lt;- data.frame(plot_names)\n    temp$n &lt;- NA\n    for (i in 1:8){\n      n_part &lt;- data[vec_named[i]] %&gt;%  stat_preproc(.) %&gt;% #View()\n      filter(check != \"bad\") %&gt;%  \n      dplyr::summarise(n = n())  \n      temp$n[i] &lt;- n_part$n\n    }\n    return(temp)\n}\nnum_named &lt;- na_table(data, vec_named, plot_names)\n\n\n\n\nCode\nfamiliar &lt;-  data[61:68] %&gt;% rename_at(vars(colnames(.)), ~ plot_names) %&gt;% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %&gt;%\n  t() %&gt;% rowSums(.) %&gt;% data.frame(.) %&gt;%  tibble::rownames_to_column(., \"plot\") %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\"))\n\nplot_vec &lt;- rev(c(\"Parallel\\nplot\", \"Channel\\nimage\", \"ERP image\", \"Butterfly\\nplot\", \"ERP grid\", \"Topoplot\\ntimeseries\", \"Topoplot\", \"ERP plot\"))\n\nvec_plotted &lt;- names(data[ , grepl( \"Have you ever plotted \" , names(data))]) \n\ndo_vec &lt;- function(vec_plotted, data, plot_names){\n  t1 &lt;- table(data[vec_plotted[1]])\n  for (i in 2:length(vec_plotted)) {\n    t &lt;- table(data[vec_plotted[i]])\n    t1 &lt;- rbind(t1, t)\n  }\n  rownames(t1) &lt;- plot_names \n  return(t1)\n}\n\ntab &lt;- do_vec(vec_plotted, data, plot_names) %&gt;%  data.frame() %&gt;% tibble::rownames_to_column(., \"plots\") %&gt;%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %&gt;% \n  filter(type == \"Yes\") %&gt;% dplyr::select(-type) \n\nnamed &lt;- num_named %&gt;% dplyr::rename(named = n, plots = plot_names)  \n\n\n\n\nCode\nmem_tab &lt;-  familiar %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %&gt;%\n  left_join(., named)  %&gt;% left_join(., tab)  \n\nf6 &lt;- mem_tab %&gt;% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %&gt;% \n  ggplot(., aes(x = score, y = reorder(plots, -score), fill = reorder(type, score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(y = \"\", x = \"Number of users\", title = \"Level of familiarity with a plot\") +\n    theme_classic() + \n  geom_text(aes(label = score, group = reorder(type, score)), position = position_dodge(width = .9), hjust = -0.2, size = 3) +  \n  xlim(0, 210) + \n  scale_fill_brewer(palette = \"Blues\") +\n  guides(fill = guide_legend(reverse=T)) +\n  scale_y_discrete(labels = plot_vec) +\n  theme(plot.caption = element_text(hjust=0), \n        axis.text = element_text(size = 10), \n        text = element_text(family = \"Lato\"), \n        legend.title = element_blank(),\n        legend.position = c(0.8, 0.9),\n        plot.title = element_text(hjust = 0.5),\n        axis.title = element_text(size = 12),\n        plot.title.position = \"plot\") \nf6"
  },
  {
    "objectID": "src/figures.html#figure-7",
    "href": "src/figures.html#figure-7",
    "title": "All figures",
    "section": "Figure 7",
    "text": "Figure 7\n\n\nCode\nother &lt;- c(rep(\"Custom scripts\", each=9), \"4DBTi\", rep(\"letswave\", 3), \"mTRF\", \"RAGU\", \"IGOR Pro\", \"EEGProcessor\", \"ELAN\", \"WinEEG\") %&gt;% table(.) %&gt;% data.frame(.) %&gt;% rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))\n\nvec &lt;- names(data[25:50]) %&gt;% str_split_i(., \"\\\\? \\\\[\", 2) %&gt;%  str_sub(., 1, -2)\n\nsoftware &lt;- data[25:50] %&gt;%\n    rename_at(vars(colnames(.)), ~ vec) %&gt;% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %&gt;% \n  cbind(., data[51] %&gt;% rename_at(vars(colnames(.)), ~ c(\"other\"))) %&gt;% mutate(other = case_when(\n      grepl(\"\\\\b(letswave)\\\\b\", other, ignore.case = TRUE) == TRUE ~ \"Letswave\",\n      grepl(\"\\\\b(r|matlab|python|ggplot(2)?|own)\\\\b\", other, ignore.case = TRUE) == TRUE ~ \"Custom scripts\",\n      grepl(\"\\\\bnever\\\\b\", other, ignore.case = TRUE) == TRUE ~ NA_character_,\n      TRUE ~ as.character(other)\n      ))  %&gt;%\n  mutate(cs = ifelse(other == \"Custom scripts\", other, NA_character_),\n         other2 = ifelse(other != \"Custom scripts\", other, NA_character_)) %&gt;% \n  mutate(`Custom scripts` = case_when(\n    cs == \"Custom scripts\" ~ as.numeric(1),\n    TRUE ~ as.numeric(`Custom scripts`)\n  )) %&gt;% \n  mutate(Letswave = case_when( #gross\n    other2 == \"Letswave\" ~ as.numeric(1),\n    TRUE ~ as.numeric(0)\n  )) %&gt;% dplyr::select(-cs, -other, -other2) # next time I also will extend other 2 too\n\n\n\n\nCode\ntools &lt;- rev(c(\"EEGLAB\", \"FieldTrip\", expression(italic(\"Custom scripts\")), \"MNE-Python\", \"ERPLAB\", \"BrainVision A.\",\n           expression(italic(\"Other\")), \"Brainstorm\", \"SPM\", \"LIMO\", \"Unfold\", \"BESA\", \"Curry\", \"Cartool\"))\nchart &lt;- data.frame(rowSums(t(software))) %&gt;%  tibble::rownames_to_column(., \"soft\") %&gt;%\n    rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))   %&gt;% \n    filter(sum_scores != 0) %&gt;% \n      mutate(soft = ifelse(sum_scores &gt; 8, as.character(soft), \"Other\")) %&gt;% group_by(soft) %&gt;% \n      dplyr::summarise(sum_scores = sum(sum_scores)) %&gt;% ungroup() %&gt;% \n      mutate(percent_score = round(sum_scores / nrow(software) * 100))  %&gt;% \n  mutate(soft = factor(soft, levels = soft[rev(order(sum_scores))])) %&gt;% \n    ggplot(data = ., aes(y = reorder(soft, percent_score),  x= percent_score)) +\n    geom_bar(stat=\"identity\", fill =\"#6BAED6\") + \n    labs(x=\"\",title=\"Which EEG, MEG, or iEEG analysis platform\\nhave you used for ERP plotting?\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), \n            hjust = -0.2, size = 4)  + \n    theme_classic() + theme(\n      axis.text.y = element_text(size = 14),\n      legend.position=\"none\", plot.caption.position = \"plot\", \n      plot.caption = element_text(hjust=0), \n      text = element_text(family = \"Lato\"),\n      axis.text.x = element_blank(), axis.text = element_text(size = 10),  \n      plot.title = element_text(color = \"grey10\", size = 16, face = \"bold\"),\n      axis.title.y = element_blank(),\n      #axis.title.x = element_blank(),\n      plot.title.position = \"plot\"\n      ) + \n    xlim(0, 100) +\n    scale_y_discrete(labels = tools)\n\ncbPalette &lt;- rev(c(\"#e3342f\",  \"#38c172\", \"#3490dc\", \"#f6993f\",\"#9561e2\"))\ncit_plot &lt;- cit_data %&gt;% filter(year &lt; 2023) %&gt;% group_by(year) %&gt;% \n  mutate(ylast = case_when(year == 2022 ~ citations, TRUE ~ NA)) %&gt;% \n  ggplot(., aes(x = year, y = citations, color = name, label = name)) + geom_line() +\n  geom_point(shape = 21, fill = 'white', size=2, stroke=1) + \n  scale_color_manual(values=cbPalette) +  \n  theme(legend.position = \"none\",\n        panel.background = element_blank(), panel.border = element_blank(), strip.background = element_blank(), \n        text = element_text(family = \"Lato\"),\n        plot.title = element_text(color = \"grey10\", size = 16, face = \"bold\", margin = margin(t = 15)),\n        plot.title.position = \"plot\",)+\n  scale_x_continuous(\n    expand = c(0, 0),\n    limits = c(2003.8, 2023), \n    breaks = seq(2004, 2023, by = 3)\n  ) + labs(\n    title = \"Citations per year for the most popular EEG tools\", subtitle = \"\", x = \"Years\", y = \"Yearly citations\"\n  ) + geom_rangeframe(color = \"black\") +\n  scale_y_continuous(\n    expand = c(0.04, 0),\n    breaks = seq(0, 1800, by = 200)\n  )+ coord_cartesian(xlim = c(2004, 2029), clip = \"off\")  + \n  geom_text_repel(\n    aes(color = name, label = name, x = 2022, y = ylast,),\n    family = \"Lato\",\n    fontface = \"bold\",\n    size = 4,\n    direction = \"y\",\n    xlim = c(2022.3, NA),\n    hjust = 0,\n    segment.size = .7,\n    segment.alpha = .5,\n    segment.linetype = \"dotted\",\n    box.padding = .4,\n    segment.curvature = -0.1,\n    segment.ncp = 3,\n    segment.angle = 20\n  )\n\n\n\n\nCode\ncbPalette2 &lt;- c(\"#f6993f\",  \"#38c172\", \"grey10\", \"#e3342f\", \"#3490dc\", \"grey10\", \"grey10\", \"#9561e2\", rep(\"grey10\", 6))\n\nf7 &lt;- ggarrange(chart + labs(title=\"Which EEG, MEG, or iEEG\\nanalysis platform\\nhave you used for ERP plotting?\")+\n            theme( axis.text.y = element_text(color = rev(cbPalette2), face = \"bold\"),\n              plot.title = element_text(color = \"grey10\", size = 14, margin = margin(t = 15))), \n          \n          cit_plot + labs(title = \"Citations per year for\\nthe most popular EEG tools\") +\n            theme(plot.title = element_text(color = \"grey10\", face = \"bold\", size = 14, margin = margin(t = 15)))+\n            scale_x_continuous(limits = c(2003.8, 2023), breaks = seq(2004, 2023, by = 3)), \n          labels = c(\"A\", \"B\"), align = 'h')\nf7"
  },
  {
    "objectID": "src/figures.html#figure-8",
    "href": "src/figures.html#figure-8",
    "title": "All figures",
    "section": "Figure 8",
    "text": "Figure 8\n\n\nCode\nplot_features &lt;- c(\n  \"Combine with a custom plot created outside of the toolbox (as subplot or inset)\",\n  \"Flexible tweaking of plot attributes (colors, linewidths, margins etc.)\",\n  \"Speed of plotting\",\n  \"Presentation/publication ready figures\",\n  \"Reproducibility of interactively generated or modified plots\",\n  \"Zooming or panning within a plot\",\n  \"Interactive selection of time-ranges or electrodes e.g. via Sliders or Dropdown menus\",\n  \"Generating plots by clicking (GUI)\",\n  \"Generating plots by coding\"\n)\n\nfeature1 &lt;- data[52:60] %&gt;% rename_all(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %&gt;% str_sub(., 1, -2) ) %&gt;%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 ))) %&gt;% \n  pivot_longer(cols = everything(), names_to = \"name\", values_to = \"value\") %&gt;% \n  mutate(index = as.integer(factor(name))) %&gt;% \n  filter(!is.na(value))\n\ncomb_data &lt;- feature1 %&gt;%  mutate(name = case_when(\n  name == \"Combine with a custom plot created outside of the toolbox (as subplot or inset)\" ~ \"Inset\",\n  name == \"Flexible tweaking of plot attributes (colors, linewidths, margins etc.)\"~ \"Customizable\",\n  name == \"Speed of plotting\"~ \"Speed\",\n  name == \"Presentation/publication ready figures\"~ \"Publishable\",\n  name == \"Reproducibility of interactively generated or modified plots\"~ \"Reproducible\",\n  name == \"Zooming or panning within a plot\"~ \"Zooming\",\n  name == \"Interactive selection of time-ranges or electrodes e.g. via Sliders or Dropdown menus\"~ \"Interactive\",\n  name == \"Generating plots by clicking (GUI)\"~ \"GUI\",\n  name == \"Generating plots by coding\" ~ \"Coding\"\n  )) %&gt;% \n    mutate(gr = case_when(\n      grepl(\"\\\\b(Speed|Zooming|GUI|Interactive)\\\\b\", name) == TRUE ~ \"Moderate\",\n      grepl(\"\\\\b(Coding|Customizable|Reproducible|Publishable|Inset)\\\\b\", name) == TRUE ~ \"Favored\"))\n\ntest &lt;-  comb_data %&gt;% group_by(name, value) %&gt;% dplyr::summarise(n = n()) %&gt;% \n    mutate(gr = case_when(\n      grepl(\"\\\\b(Speed|Zooming|GUI|Interactive|Inset)\\\\b\", name) == TRUE ~ \"Moderate\",\n      grepl(\"\\\\b(Coding|Customizable|Reproducible|Publishable)\\\\b\", name) == TRUE ~ \"Favored\"))  %&gt;% \n  mutate(denymax = case_when(value == 2 ~ n, TRUE ~ NA))\n\n\n\n\nCode\ncbPalette_fe1 &lt;- c(\"#e3342f\", \"#6574cd\", \"#f6993f\",  \"#38c172\" )\ncbPalette_fe2 &lt;- c(\"#4dc0b5\", \"#3490dc\",\"#f1a20b\", \"#9561e2\", \"white\", \"#f66d9b\")\n\ncore &lt;- function(df){\n  g &lt;- ggplot(data = df, aes(x = value, y = n, label = name, color = name)) + \n  geom_line(bw = 0.5, size = 1) + \n  geom_point(shape = 21, fill = 'white', size=2, stroke=1)+ \n  labs(x = \"Values on the Likert scale\", y = \"Scores\")  +  geom_rangeframe(color = \"black\") +\n  theme(\n    panel.background = element_blank(), panel.border = element_blank(), \n    legend.position = \"none\", \n    text = element_text(family = \"Lato\"),\n    strip.background = element_blank(), \n    axis.text = element_text(color = \"grey40\"),\n    axis.ticks = element_line(color = \"grey40\", size = .5),\n    strip.text = element_text(size = 14),\n    axis.title = element_blank(),\n    plot.title = element_text(\n      color = \"grey10\", \n      size = 16, \n      face = \"bold\",\n      ),\n    plot.title.position = \"plot\",\n  )  +\n  coord_cartesian(xlim = c(1, 6.5), clip = \"off\") +\n  geom_text_repel(\n    aes(color = name, label = name, x = 5, y = denymax,),\n    family = \"Lato\",\n    fontface = \"bold\",\n    size = 4,\n    direction = \"y\",\n    xlim = c(5.5, NA),\n    hjust = 0,\n    segment.size = .7,\n    segment.alpha = .5,\n    segment.linetype = \"dotted\",\n    box.padding = .4,\n    segment.curvature = -0.1,\n    segment.ncp = 3,\n    segment.angle = 20\n  ) \n  return(g)\n} \n\ntest1 &lt;- test %&gt;% filter(gr == \"Favored\") %&gt;% mutate(value = value + 3) %&gt;% \n  core(.) +\n  scale_x_continuous(\n    expand = c(0.01, 0),\n    limits = c(0.9, 5), \n    breaks = seq(1, 5, by = 1)\n  ) +\n  scale_y_continuous(\n    expand = c(0.04, 0),\n    limits = c(0, NA),\n    breaks = seq(0, 150, by = 30)\n  ) +\n  scale_color_manual(values = cbPalette_fe1) + theme(axis.text.x=element_blank()) +\n  labs(title = \"When using an EEG, MEG, or iEEG visualization tool\\nwhich features are important to you?\")  \n\n\ntest2 &lt;- test %&gt;% filter(gr != \"Favored\") %&gt;% mutate(value = value + 3) %&gt;% ungroup() %&gt;% \n  tibble::add_row(name = \"void\", value = 1, n = 0, gr = \"a\", denymax=0) %&gt;% \n  # line above is just to extend yaxis to zero\n   core(.) +\n  scale_x_continuous(\n    expand = c(0.01, 0),\n    limits = c(0.9, 5), \n    breaks = seq(1, 5, by = 1),\n    \n    labels = c(\"Not important\", \"\", \"Neutral\", \"\", \"Very important\")\n  ) +\n  scale_y_continuous(\n    expand = c(0.04, 0),\n    limits = c(0, NA),\n    breaks = seq(0, 72, by = 15)\n  ) + \n  scale_color_manual(values = cbPalette_fe2) + theme(axis.text.x = element_text(color = \"black\"))\n\nfigure &lt;- ggarrange(test1, test2, align = 'v', nrow = 2) \nrequire(grid)\nf8 &lt;- annotate_figure(figure, left = textGrob(\"Number of responses\", rot = 90, vjust = 1, gp = gpar(cex = 1.3)))\nf8"
  },
  {
    "objectID": "src/figures.html#figure-9",
    "href": "src/figures.html#figure-9",
    "title": "All figures",
    "section": "Figure 9",
    "text": "Figure 9\n\n\nCode\nbl2 &lt;- table(abs(just[2] %&gt;% na.omit() %&gt;% rbind(data[77] %&gt;% dplyr::rename(num = !!names(.)[1]) , .))) %&gt;% data.frame() %&gt;%  dplyr::rename(baseline = !!names(.)[1]) %&gt;% \n  mutate(baseline = ifelse(Freq &gt; 2, paste0(\"-\", as.character(baseline)), \"Other\")) %&gt;%\n  dplyr::group_by(baseline) %&gt;% dplyr::summarise(Freq = sum(Freq)) %&gt;% \n  mutate(percent_score = round(Freq / sum(Freq), 2) *100) %&gt;% arrange(desc(baseline)) %&gt;% \n  mutate(baseline = factor(baseline, \n  levels = c(\"-500\", \"-300\", \"-250\", \"-200\", \"-100\", \"Other\")))\n\nitalised1 &lt;- c(\"-500\", \"-300\", \"-250\", \"-200\", \"-100\", expression(italic(\"Other\")))\n\nperiods_plot2 &lt;- bl2 %&gt;%\n    ggplot(data = ., aes(x = baseline, y = percent_score)) +\n    geom_bar(stat=\"identity\", fill =\"#6BAED6\", width = 0.6) + \n  labs(x = \"Recomended baseline duration\\n(msec)\", y = \"\") +  \n  scale_y_continuous(breaks=seq(0, 60, 5)) + theme_classic() +\n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5), text = element_text(family = \"Lato\")) +\n  geom_text(aes(label = paste0(percent_score, \"%\"), group = baseline), position = position_dodge(width = .9), vjust = -0.3)   +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text.y = element_blank(), axis.text = element_text(size = 10)) + \n  scale_x_discrete(labels = italised1)\n\ncv &lt;- data %&gt;% select(23, 24) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"measure\", \"analyse\")) %&gt;% \n  filter(measure &lt; 10000, analyse &lt; 500)  %&gt;% \n  mutate(rate = round(analyse / measure, 2)) %&gt;% \n  group_by(rate) %&gt;% dplyr::summarise(n = n()) %&gt;% \n  mutate(p = round(n / sum(n), 2))\n\nan_me_plot &lt;- cv %&gt;%  \n  ggplot(aes(x=rate, y = p)) + \n  geom_col(position = \"identity\", bins=300, fill =\"#6BAED6\") + \n  labs(x =\"Ratio of electrodes\\nanalysed / measured\", y = \"\") +\n  theme_classic() +\n  theme(legend.position=\"none\", plot.caption = element_text(hjust=0), text = element_text(family = \"Lato\"), axis.text = element_text(size = 10)) + \n  #ylim(0, 0.1) + \n  scale_x_continuous(labels = scales::percent)  + scale_y_continuous(labels = scales::percent, limits = c(0, 0.4)) +\n   labs(y = \"Percent of respondents\")\n\n\n\n\nCode\nf9 &lt;- ggarrange(periods_plot2 + labs(y = \"Percent of respondents\")+ theme(axis.title.y = element_text(margin = margin (r = 10))), \n          an_me_plot + theme(axis.title.y = element_text(margin = margin (r = 10))), labels = c(\"A\", \"B\")) \nf9"
  },
  {
    "objectID": "src/figures.html#figure-10",
    "href": "src/figures.html#figure-10",
    "title": "All figures",
    "section": "Figure 10",
    "text": "Figure 10\n\n\nCode\nt &lt;- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt &lt;- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\narea1 &lt;- data.frame(matrix(tt)) %&gt;% dplyr::rename(words = !!names(.)[1]) %&gt;%\n  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), \"affective neuroscience\", words)) %&gt;%  \n  mutate(words =ifelse(str_detect(.[[1]], 'memory'), \"memory\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), \"auditory\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|cognition|consciousness|meditation|cognitive control|self|executive functions'), \"attention\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), \"deep brain stimulation\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), \"decision making\", words)) %&gt;%\n  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), \"ageing\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'social'), \"social cognition\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), \"olfaction\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), \"language and speech\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'bci'), \"bci\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), \"sleep\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), \"time\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'perception'), \"perception\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'vis'), \"vision\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development|ageing'), \"development\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), \"motor control\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), \"mental disorders\", words)) %&gt;%   \n  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), \"dsp\", words))\n\narea &lt;- area1 %&gt;%\n  mutate(words = ifelse(str_detect(.[[1]], 'olfaction|vision|auditory|pain'), \"perception\", words))%&gt;%\n  mutate(words = ifelse(str_detect(.[[1]], 'dsp|computational neuroscience'), \"methodology\", words)) %&gt;% \n  mutate(words = ifelse(str_detect(.[[1]], 'mental disorders|deep brain stimulation'), \"clinical\", words))%&gt;% \n  mutate(words = ifelse(str_detect(.[[1]], 'social cognition'), \"affective neuroscience\", words))\n\ncolours = c(\"#f9a65a\", \"#599ad3\")\nud &lt;- table(data[79]) %&gt;% data.frame() %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %&gt;%\n  mutate(percent_score = round(scores / sum(scores) * 100)) \n\nas &lt;- cbind(unlist(area$words), unlist(data[[79]])) %&gt;% data.frame() %&gt;% \nfilter(.[[2]] != \"NANA\") %&gt;% dplyr::rename(area=X1, ud=X2) %&gt;%\ngroup_by(area) %&gt;%\nfilter(n() &gt; 2) %&gt;% group_by(area, ud) %&gt;% dplyr::summarise(n = n()) %&gt;% \n  group_by(area) %&gt;% dplyr::mutate(nn = sum(n)) %&gt;% filter(area != \"\")\n\nf10&lt;- as %&gt;% \n  ggplot(., aes(x = n, y = reorder(area, nn), fill = ud)) +\n  geom_col(stat = \"identity\", width = 0.7) +\n  labs(x = \"Percent of respondents\", y = \"\", fill =\"Positive:\", title = \"In ERP plot, should positive voltages\\nbe plotted upwards, or downwards?\") +\n  theme_classic()+\n  geom_text(aes(label = n, group = ud), \n            position = position_stack(vjust = 0.5), size = 4)  +\n  coord_cartesian(clip = \"off\") +\n  theme(axis.text = element_text(size = 12),\n        text = element_text(family = \"Lato\"),\n        axis.title = element_text(size = 12),\n        title = element_text(size = 14),\n        axis.title.y=element_blank(),\n        \n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.8, 0.2),\n        \n        plot.title.position = \"plot\",\n        plot.caption.position = \"plot\",\n        ) +  \n  scale_fill_manual(values=colours, limits = c(\"Up\", \"Down\")) \n\nf10"
  },
  {
    "objectID": "src/figures.html#figure-11",
    "href": "src/figures.html#figure-11",
    "title": "All figures",
    "section": "Figure 11",
    "text": "Figure 11\n\n\nCode\neb &lt;- table(data[74]) %&gt;% data.frame() %&gt;% rename_at(vars(colnames(.)), ~ c(\"Position\", \"Scores\")) %&gt;% \n  filter(Position != \"Never published this plot\") %&gt;% \n  mutate(percent_score = round(Scores / sum(Scores) * 100)) \n\neb_fig &lt;- eb %&gt;% \n    ggplot(., aes(y = Position, x = percent_score)) +\n    geom_bar(stat = \"identity\", width=0.5, position = \"dodge\", fill =\"#6BAED6\") + theme_classic() +\n  theme(axis.text.x = element_blank(),\n        axis.title.y = element_blank(),\n        legend.position=\"none\", \n        text = element_text(family = \"Lato\"),\n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = paste0(percent_score, \"%\"), group = Position), \n            hjust = -0.2) + \n  ggtitle(\"In your paper, have you published\\nan ERP plot with error bars?\")+\nscale_fill_manual(values=colours)  +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10)) + \n  xlim(0, 100) + labs(y = \"\")\n\nebd &lt;- data[75] %&gt;%  filter(!is.na(.)) %&gt;% table()  %&gt;% data.frame() %&gt;% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %&gt;% mutate(percent_score = round(scores / sum(scores) * 100)) %&gt;% filter(position != \"Other\") \n\nebd_fig &lt;- ebd %&gt;% \n    ggplot(., aes(y = position, x = percent_score)) + \n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5, fill =\"#6BAED6\") + \n    theme_classic() +\n    theme(axis.text.x = element_blank(), \n          text = element_text(family = \"Lato\"),\n          legend.position=\"none\", \n          axis.title.y = element_blank(),\n          plot.title = element_text(hjust = 0.5)) + \n     \n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position),  hjust = -0.2) + \n  ggtitle(\"In your figure, what\\ndid the error bars represent?\")+\n  scale_fill_manual(values=colours) + \n  scale_y_discrete(labels = c(\"Standard error\\nof the mean\", \"Confidence\\ninterval\")) +\n    theme(plot.caption = element_text(hjust=0), axis.text = element_text(size = 10)) + xlim(0, 100) \n\nf11 &lt;- ggarrange(eb_fig + labs(x = \"Percent of respondents\"), ebd_fig + labs(x = \"Percent of respondents\"),  \n          labels = c(\"A\", \"B\"),\n          ncol = 2, nrow = 2, align = 'h') \nf11"
  },
  {
    "objectID": "src/figures.html#sup-figure-2",
    "href": "src/figures.html#sup-figure-2",
    "title": "All figures",
    "section": "Sup figure 2",
    "text": "Sup figure 2\n\n\nCode\nmarg &lt;- data %&gt;% select(23, 24) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"Recorded\", \"Analysed\")) %&gt;% \n  filter(Recorded &lt; 10000, Analysed &lt; 500)   %&gt;%  \n  ggplot(., aes(y=Analysed, x = Recorded)) + geom_point() +\n      theme(legend.position=\"none\") + theme_classic() + labs(x = \"Electrodes recorded\", y = \"Electrodes aanlysed\") \nsf2 &lt;- ggMarginal(marg, type=\"histogram\") \nsf2"
  },
  {
    "objectID": "src/customs.html",
    "href": "src/customs.html",
    "title": "Visualisation customs",
    "section": "",
    "text": "Here we present researcher’s visualization customs and awareness about some methodological problems."
  },
  {
    "objectID": "src/customs.html#setup",
    "href": "src/customs.html#setup",
    "title": "Visualisation customs",
    "section": "Setup",
    "text": "Setup\n\n\nCode\ndata &lt;- read_excel(\"../data/results_survey.xlsx\") \n\ndata &lt;- data[1:121] %&gt;% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\n\nfont_add_google(\"Lato\")\nshowtext_opts(dpi = 200)\nshowtext_auto(enable = TRUE)"
  },
  {
    "objectID": "src/customs.html#familiarity-with-plots",
    "href": "src/customs.html#familiarity-with-plots",
    "title": "Visualisation customs",
    "section": "Familiarity with plots",
    "text": "Familiarity with plots\n\nRecognition\n\n\nCode\nvec &lt;- c(\"line\", \"butterfly\", \"topo\",  \"topo_map\", \"topo_array\", \"erp_image\", \"parallel\", \"channel_image\")\nfamiliar &lt;-  data[61:68] %&gt;% rename_at(vars(colnames(.)), ~ vec) %&gt;% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\nrec &lt;- data.frame(rowSums(t(familiar))) %&gt;%  tibble::rownames_to_column(., \"plot\") %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"plot\", \"sum_scores\"))  %&gt;% \n  arrange(., desc(sum_scores))\n\nrec %&gt;% \n  ggplot(data = ., aes(y = reorder(plot, sum_scores), x= sum_scores)) +\n  geom_col(stat=\"identity\", fill =\"lightblue1\", col=\"dodgerblue3\") + ylab(\"plot\") + theme_classic() + \n  geom_text(aes(label = sum_scores, group = plot), position = position_dodge(width = .9), hjust = -0.1) +\n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  labs(y = \"Plot types\", x = \"Scores\") + \n  ggtitle(\"Select plots you are familiar with\") +\n  labs(caption = sprintf(\"N of respondents - %d\",  nrow(familiar))) +\n  theme(legend.position=\"none\", plot.caption.position = \"plot\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10))\n\n\n\n\n\n\n\nNaming\nThose who proposed a name for a plot. Bad names are excluded.\n\n\nCode\nstat_preproc &lt;- function(vec){\n  #N = 70\n  tmp &lt;- vec %&gt;% filter(!is.na(.)) %&gt;% \n    dplyr::rename(words = !!names(.)[1]) %&gt;% mutate(words = tolower(words)) %&gt;% \n    mutate(words = ifelse(nchar(words) &lt; 3, paste(words, \"baddd\"), words)) %&gt;% \n    mutate(check = \n    ifelse(grepl(\"\\\\b(baddd|idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|unclear|ugly|don't|useless|nan|clear)\\\\b\", words), \"bad\", \"good\")) \n  return(tmp)\n}\n\n#stat_preproc(data[vec_named[7]]) %&gt;% View()\n\n\n\n\nCode\nvec_named &lt;- names(data[ , grepl( \"How would you \" , names(data))])\nplot_names &lt;- c(\"line\", \"butterfly\", \"topo\", \"topo_series\", \"erp_grid\", \"erp_img\", \"parallel\", \"channel_img\")\n\nna_table &lt;- function(data, vec_named, plot_names){\n    temp &lt;- data.frame(plot_names)\n    temp$n &lt;- NA\n    for (i in 1:8){\n      n_part &lt;- data[vec_named[i]] %&gt;%  stat_preproc(.) %&gt;% #View()\n      filter(check != \"bad\") %&gt;%  \n      dplyr::summarise(n = n())  \n      temp$n[i] &lt;- n_part$n\n    }\n    return(temp)\n}\n\nnum_named &lt;- na_table(data, vec_named, plot_names)\nnum_named  %&gt;% \n  ggplot(., aes(x = n, y = reorder(plot_names, n))) +\n  geom_col(stat=\"identity\",  fill =\"#6BAED6\") +\n    labs(x = \"Category\", y = \"Value\") +\n    theme_classic() + theme(axis.title.x=element_blank(), plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = n), position = position_dodge(width = .9), hjust = -0.1) +\n  ggtitle(\"Plot naming\") +\n  labs(caption = sprintf(\"N of respondents - %d\",  nrow(familiar))) +\n  theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10))\n\n\n\n\n\n\n\nCode\ntmp &lt;- data[vec_named]\ntmp$n &lt;- rowSums(!is.na(tmp)) \ntable(tmp$n)  %&gt;%  t() %&gt;% data.frame() %&gt;% select(-Var1) %&gt;% \n  mutate(percent_score = round(Freq / 213 * 100)) %&gt;% \n  ggplot(., aes(y = Var2, x = percent_score)) +\n  geom_col(stat=\"identity\", fill =\"#6BAED6\") +\n    labs(x = \"\", y = \"Number of named plots\", title = \"Number of plots named by EEG researchers\") + theme_classic() +\n    geom_text(aes(label = paste0(percent_score, \"%\")), \n              position = position_dodge(width = .9), hjust = -0.2, size = 4) + theme(\n      axis.text.y = element_text(size = 14),\n      legend.position=\"none\", plot.caption.position = \"plot\", \n      plot.caption = element_text(hjust=0), \n      text = element_text(family = \"Lato\"),\n      axis.text.x = element_blank(), axis.text = element_text(size = 10),  \n      plot.title = element_text(color = \"grey10\", size = 16, face = \"bold\"),\n      axis.title.y = element_blank(),\n      plot.title.position = \"plot\"\n      ) + xlim(0, 39) \n\n\n\n\n\n\n\nPlotting\n\n\nCode\nfamiliar &lt;-  data[61:68] %&gt;% rename_at(vars(colnames(.)), ~ plot_names) %&gt;% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %&gt;%\n  t() %&gt;% rowSums(.) %&gt;% data.frame(.) %&gt;%  tibble::rownames_to_column(., \"plot\") %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\"))\n\n\n\ncombined\n\n\nCode\nplot_vec &lt;- rev(c(\"Parallel\\nplot\", \"Channel\\nimage\", \"ERP image\", \"Butterfly\\nplot\", \"ERP grid\", \"Topoplot\\ntimeseries\", \"Topoplot\", \"ERP plot\"))\n\nvec_plotted &lt;- names(data[ , grepl( \"Have you ever plotted \" , names(data))]) \n\ndo_vec &lt;- function(vec_plotted, data, plot_names){\n  t1 &lt;- table(data[vec_plotted[1]])\n  for (i in 2:length(vec_plotted)) {\n    t &lt;- table(data[vec_plotted[i]])\n    t1 &lt;- rbind(t1, t)\n  }\n  rownames(t1) &lt;- plot_names \n  return(t1)\n}\n\ntab &lt;- do_vec(vec_plotted, data, plot_names) %&gt;%  data.frame() %&gt;% tibble::rownames_to_column(., \"plots\") %&gt;%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %&gt;% \n  filter(type == \"Yes\") %&gt;% dplyr::select(-type) \n\nnamed &lt;- num_named %&gt;% dplyr::rename(named = n, plots = plot_names)  \n\n\n\n\nCode\nmem_tab &lt;-  familiar %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %&gt;%\n  left_join(., named)  %&gt;% left_join(., tab)  \n\nmem_tab_fig &lt;- mem_tab %&gt;% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %&gt;% \n  ggplot(., aes(x = score, y = reorder(plots, -score), fill = reorder(type, score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(y = \"\", x = \"Number of users\", title = \"Level of familiarity with a plot\") +\n    theme_classic() + \n  geom_text(aes(label = score, group = reorder(type, score)), position = position_dodge(width = .9), hjust = -0.2, size = 3) +  \n  xlim(0, 210) + \n  scale_fill_brewer(palette = \"Blues\") +\n  guides(fill = guide_legend(reverse=T)) +\n  scale_y_discrete(labels = plot_vec) +\n  theme(plot.caption = element_text(hjust=0), \n        axis.text = element_text(size = 10), \n        text = element_text(family = \"Lato\"), \n        legend.title = element_blank(),\n        legend.position = c(0.8, 0.9),\n        plot.title = element_text(hjust = 0.5),\n        axis.title = element_text(size = 12),\n        plot.title.position = \"plot\") \n\nmem_tab_fig +\n  labs(caption = sprintf(\"N of respondents - %d\",  nrow(data[61:68])))"
  },
  {
    "objectID": "src/customs.html#important-features",
    "href": "src/customs.html#important-features",
    "title": "Visualisation customs",
    "section": "Important features",
    "text": "Important features\n\n\nCode\nfeature &lt;- data[52:60] %&gt;% rename_all(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %&gt;% str_sub(., 1, -2) ) %&gt;%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 )))\n\nfeature %&gt;% \n  colSums(., na.rm =T) %&gt;% data.frame(.) %&gt;%  tibble::rownames_to_column(., \"Feature\") %&gt;% \n  filter(!is.na(Feature)) %&gt;% \n  arrange(desc(.)) %&gt;% rename_at(vars(colnames(.)), ~ c(\"Feature\", \"sum_scores\")) %&gt;% group_by(Feature) %&gt;% \n  dplyr::mutate( mean = round(sum_scores / nrow(data), 2)) %&gt;%   kbl(escape = F, booktabs = T) %&gt;%\n  kable_styling(\"striped\", position = \"center\",) %&gt;% kable_classic(full_width = F, html_font = \"Arial\")\n\n\n\n\n\nFeature\nsum_scores\nmean\n\n\n\n\nFlexible tweaking of plot attributes (colors, linewidths, margins etc.)\n325\n1.53\n\n\nReproducibility of interactively generated or modified plots\n256\n1.20\n\n\nGenerating plots by coding\n253\n1.19\n\n\nPresentation/publication ready figures\n249\n1.17\n\n\nZooming or panning within a plot\n125\n0.59\n\n\nCombine with a custom plot created outside of the toolbox (as subplot or inset)\n121\n0.57\n\n\nSpeed of plotting\n96\n0.45\n\n\nInteractive selection of time-ranges or electrodes e.g. via Sliders or Dropdown menus\n81\n0.38\n\n\nGenerating plots by clicking (GUI)\n-72\n-0.34\n\n\n\n\n\n\n\n\n\nCode\nfeature1 &lt;- feature %&gt;% \n  pivot_longer(cols = everything(), names_to = \"name\", values_to = \"value\") %&gt;% \n  mutate(index = as.integer(factor(name))) %&gt;% \n  filter(!is.na(value))\n\n\n\n\nCode\nplot_features &lt;- c(\n  \"Combine with a custom plot created outside of the toolbox (as subplot or inset)\",\n  \"Flexible tweaking of plot attributes (colors, linewidths, margins etc.)\",\n  \"Speed of plotting\",\n  \"Presentation/publication ready figures\",\n  \"Reproducibility of interactively generated or modified plots\",\n  \"Zooming or panning within a plot\",\n  \"Interactive selection of time-ranges or electrodes e.g. via Sliders or Dropdown menus\",\n  \"Generating plots by clicking (GUI)\",\n  \"Generating plots by coding\"\n)\n\ncomb_data &lt;- feature1 %&gt;%  mutate(name = case_when(\n  name == \"Combine with a custom plot created outside of the toolbox (as subplot or inset)\" ~ \"Inset\",\n  name == \"Flexible tweaking of plot attributes (colors, linewidths, margins etc.)\"~ \"Customizable\",\n  name == \"Speed of plotting\"~ \"Speed\",\n  name == \"Presentation/publication ready figures\"~ \"Publishable\",\n  name == \"Reproducibility of interactively generated or modified plots\"~ \"Reproducible\",\n  name == \"Zooming or panning within a plot\"~ \"Zooming\",\n  name == \"Interactive selection of time-ranges or electrodes e.g. via Sliders or Dropdown menus\"~ \"Interactive\",\n  name == \"Generating plots by clicking (GUI)\"~ \"GUI\",\n  name == \"Generating plots by coding\" ~ \"Coding\"\n  )) %&gt;% \n    mutate(gr = case_when(\n      grepl(\"\\\\b(Speed|Zooming|GUI|Interactive)\\\\b\", name) == TRUE ~ \"Moderate\",\n      grepl(\"\\\\b(Coding|Customizable|Reproducible|Publishable|Inset)\\\\b\", name) == TRUE ~ \"Favored\"))\n\ntest &lt;-  comb_data %&gt;% group_by(name, value) %&gt;% dplyr::summarise(n = n()) %&gt;% \n    mutate(gr = case_when(\n      grepl(\"\\\\b(Speed|Zooming|GUI|Interactive|Inset)\\\\b\", name) == TRUE ~ \"Moderate\",\n      grepl(\"\\\\b(Coding|Customizable|Reproducible|Publishable)\\\\b\", name) == TRUE ~ \"Favored\"))  %&gt;% \n  mutate(denymax = case_when(value == 2 ~ n, TRUE ~ NA))\n\ncbPalette_fe &lt;- c(\"#e3342f\", \"#f6993f\", \"#f1a20b\", \"#38c172\", \"#3490dc\", \"#6574cd\", \"#9561e2\", \"#4dc0b5\", \"#f66d9b\")\n\n\n\n\nCode\ntest %&gt;%  \n  ggplot(aes(x = value, y = n, label = name, full = name)) + \n   geom_col(stat = \"identity\", bw = 0.5, size = 1) + facet_wrap(~name)\n\n\n\n\n\n\n\nCode\ntest  %&gt;% \n  ggplot(aes(x = value, y = n, label = name, color = name)) + \n   geom_smooth(aes(x = value, y = n),  size = 1) + #facet_wrap(~gr) +  \n  scale_color_manual(values=cbPalette_fe) + theme_classic()  +  \n  theme(legend.position = \"none\", \n  strip.background = element_blank(), \n  strip.text = element_text(size = 14),\n) + labs(x = \"Values on Likert scale\", y = \"Scores\") +\n  geom_text_repel(\n    aes(color = name, label = name, x = 2, y = denymax,),\n    family = \"Lato\",\n    fontface = \"bold\",\n    size = 4,\n    direction = \"y\",\n    xlim = c(3, NA),\n    hjust = 0,\n    segment.size = .7,\n    segment.alpha = .5,\n    segment.linetype = \"dotted\",\n    box.padding = .4,\n    segment.curvature = -0.1,\n    segment.ncp = 3,\n    segment.angle = 20\n  ) +\n  scale_x_continuous(\n    expand = c(0, 0),\n    limits = c(-2, 3), \n    breaks = seq(-2, 2, by = 1)\n  )\n\n\n\n\n\n\n\nCode\ntest  %&gt;% mutate(value = value + 3) %&gt;% \n  ggplot(aes(x = value, y = n, label = name, color = name)) + \n  geom_line(bw = 0.5, size = 1) + \n  geom_point(shape = 21, fill = 'white', size=2, stroke=1) + \n  facet_grid(gr~ ., scales = \"free_y\") +  \n  scale_color_manual(values = cbPalette_fe) + \n  labs(x = \"Values on the Likert scale\", y = \"Scores\")  +  geom_rangeframe(color = \"black\") +\n  theme(\n    panel.background = element_blank(), panel.border = element_blank(), \n    legend.position = \"none\", \n    text = element_text(family = \"Lato\"),\n    strip.background = element_blank(), \n    #axis.line.x =  element_blank(),\n    axis.text = element_text(color = \"grey40\"),\n    axis.ticks = element_line(color = \"grey40\", size = .5),\n    strip.text = element_text(size = 14),\n    axis.title = element_blank(),\n    plot.title = element_text(\n      color = \"grey10\", \n      size = 16, \n      face = \"bold\",\n      #margin = margin(t = 15)\n      ),\n    plot.title.position = \"plot\",\n  )  + \n  scale_x_continuous(\n    expand = c(0.01, 0),\n    limits = c(0.9, 5), \n    breaks = seq(1, 5, by = 1),\n    labels = c(\"Not important\", \"\", \"Neutral\", \"\", \"Very important\")\n  ) +\n  scale_y_continuous(\n    expand = c(0.04, 0),\n    limits = c(0, NA),\n    breaks = seq(0, 150, by = 20)\n  ) +\n  labs(title = \"When using an EEG, MEG, or iEEG visualization tool\\nwhich features are important to you?\")   +\n  coord_cartesian(xlim = c(1, 6.5), clip = \"off\") +\n  geom_text_repel(\n    aes(color = name, label = name, x = 5, y = denymax,),\n    family = \"Lato\",\n    fontface = \"bold\",\n    size = 4,\n    direction = \"y\",\n    xlim = c(5.5, NA),\n    hjust = 0,\n    segment.size = .7,\n    segment.alpha = .5,\n    segment.linetype = \"dotted\",\n    box.padding = .4,\n    segment.curvature = -0.1,\n    segment.ncp = 3,\n    segment.angle = 20\n  )\n\n\n\n\n\n\n\nCode\ncbPalette_fe1 &lt;- c(\"#e3342f\", \"#6574cd\", \"#f6993f\",  \"#38c172\" )\n\ncbPalette_fe2 &lt;- c(\"#4dc0b5\", \"#3490dc\",\"#f1a20b\", \"#9561e2\", \"white\", \"#f66d9b\")\ncore &lt;- function(df){\n  g &lt;- ggplot(data = df, aes(x = value, y = n, label = name, color = name)) + \n  geom_line(bw = 0.5, size = 1) + \n  geom_point(shape = 21, fill = 'white', size=2, stroke=1)+ \n  labs(x = \"Values on the Likert scale\", y = \"Scores\")  +  geom_rangeframe(color = \"black\") +\n  theme(\n    panel.background = element_blank(), panel.border = element_blank(), \n    legend.position = \"none\", \n    text = element_text(family = \"Lato\"),\n    strip.background = element_blank(), \n    axis.text = element_text(color = \"grey40\"),\n    axis.ticks = element_line(color = \"grey40\", size = .5),\n    strip.text = element_text(size = 14),\n    axis.title = element_blank(),\n    plot.title = element_text(\n      color = \"grey10\", \n      size = 16, \n      face = \"bold\",\n      ),\n    plot.title.position = \"plot\",\n  )  +\n  coord_cartesian(xlim = c(1, 6.5), clip = \"off\") +\n  geom_text_repel(\n    aes(color = name, label = name, x = 5, y = denymax,),\n    family = \"Lato\",\n    fontface = \"bold\",\n    size = 4,\n    direction = \"y\",\n    xlim = c(5.5, NA),\n    hjust = 0,\n    segment.size = .7,\n    segment.alpha = .5,\n    segment.linetype = \"dotted\",\n    box.padding = .4,\n    segment.curvature = -0.1,\n    segment.ncp = 3,\n    segment.angle = 20\n  ) \n  return(g)\n} \n\ntest1 &lt;- test %&gt;% filter(gr == \"Favored\") %&gt;% mutate(value = value + 3) %&gt;% \n  core(.) +\n  scale_x_continuous(\n    expand = c(0.01, 0),\n    limits = c(0.9, 5), \n    breaks = seq(1, 5, by = 1)\n  ) +\n  scale_y_continuous(\n    expand = c(0.04, 0),\n    limits = c(0, NA),\n    breaks = seq(0, 150, by = 30)\n  ) +\n  scale_color_manual(values = cbPalette_fe1) + theme(axis.text.x=element_blank()) +\n  labs(title = \"When using an EEG, MEG, or iEEG visualization tool\\nwhich features are important to you?\")  \n\n\ntest2 &lt;- test %&gt;% filter(gr != \"Favored\") %&gt;% mutate(value = value + 3) %&gt;% ungroup() %&gt;% \n  tibble::add_row(name = \"void\", value = 1, n = 0, gr = \"a\", denymax=0) %&gt;% \n  # line above is just to extend yaxis to zero\n   core(.) +\n  scale_x_continuous(\n    expand = c(0.01, 0),\n    limits = c(0.9, 5), \n    breaks = seq(1, 5, by = 1),\n    \n    labels = c(\"Not important\", \"\", \"Neutral\", \"\", \"Very important\")\n  ) +\n  scale_y_continuous(\n    expand = c(0.04, 0),\n    limits = c(0, NA),\n    breaks = seq(0, 72, by = 15)\n  ) + \n  scale_color_manual(values = cbPalette_fe2) + theme(axis.text.x = element_text(color = \"black\"))\n\nfigure &lt;- ggarrange(test1, test2, align = 'v', nrow = 2) \nrequire(grid)\nannotate_figure(figure, left = textGrob(\"Number of responses\", rot = 90, vjust = 1, gp = gpar(cex = 1.3)))"
  },
  {
    "objectID": "src/customs.html#controversies",
    "href": "src/customs.html#controversies",
    "title": "Visualisation customs",
    "section": "Controversies",
    "text": "Controversies\n\nChannels\nHow many channels do you typically analyse and measure?\n\n\nCode\ncv &lt;- data %&gt;% select(23, 24) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"measure\", \"analyse\")) %&gt;% \n  filter(measure &lt; 10000, analyse &lt; 500)  %&gt;% \n  mutate(rate = round(analyse / measure, 2)) %&gt;% \n  group_by(rate) %&gt;% dplyr::summarise(n = n()) %&gt;% \n  mutate(p = round(n / sum(n), 2))\n\nan_me_plot &lt;- cv %&gt;%  \n  ggplot(aes(x=rate, y = p)) + \n  geom_col(position = \"identity\", bins=300, fill =\"#6BAED6\") + \n  labs(x =\"Ratio of electrodes\\nanalysed / measured\", y = \"\") +\n  theme_classic() +\n  theme(legend.position=\"none\", plot.caption = element_text(hjust=0), text = element_text(family = \"Lato\"), axis.text = element_text(size = 10)) + \n  #ylim(0, 0.1) + \n  scale_x_continuous(labels = scales::percent)  + scale_y_continuous(labels = scales::percent, limits = c(0, 0.4)) +\n   labs(y = \"Percent of respondents\")\n\nan_me_plot +\n  labs(caption = sprintf(\"N of respondents - %d\",  sum(cv$n))) \n\n\n\n\n\n\n\nCode\nmarg &lt;- data %&gt;% select(23, 24) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"Recorded\", \"Analysed\")) %&gt;% \n  filter(Recorded &lt; 10000, Analysed &lt; 500)   %&gt;%  \n  ggplot(., aes(y=Analysed, x = Recorded)) + geom_point() +\n      theme(legend.position=\"none\") + theme_classic() + labs(x = \"Electrodes recorded\", y = \"Electrodes aanlysed\")\nggMarginal(marg, type=\"histogram\")\n\n\n\n\n\n\n\nUp or down\n\n\nCode\nt &lt;- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt &lt;- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\narea1 &lt;- data.frame(matrix(tt)) %&gt;% dplyr::rename(words = !!names(.)[1]) %&gt;%\n  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), \"affective neuroscience\", words)) %&gt;%  \n  mutate(words =ifelse(str_detect(.[[1]], 'memory'), \"memory\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), \"auditory\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|cognition|consciousness|meditation|cognitive control|self|executive functions'), \"attention\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), \"deep brain stimulation\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), \"decision making\", words)) %&gt;%\n  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), \"ageing\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'social'), \"social cognition\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), \"olfaction\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), \"language and speech\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'bci'), \"bci\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), \"sleep\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), \"time\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'perception'), \"perception\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'vis'), \"vision\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development|ageing'), \"development\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), \"motor control\", words)) %&gt;% \n  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), \"mental disorders\", words)) %&gt;%   \n  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), \"dsp\", words))\n\narea &lt;- area1 %&gt;%\n  mutate(words = ifelse(str_detect(.[[1]], 'olfaction|vision|auditory|pain'), \"perception\", words))%&gt;%\n  mutate(words = ifelse(str_detect(.[[1]], 'dsp|computational neuroscience'), \"methodology\", words)) %&gt;% \n  mutate(words = ifelse(str_detect(.[[1]], 'mental disorders|deep brain stimulation'), \"clinical\", words))%&gt;% \n  mutate(words = ifelse(str_detect(.[[1]], 'social cognition'), \"affective neuroscience\", words))\n\n\n\n\nCode\ncolours = c(\"#f9a65a\", \"#599ad3\")\nud &lt;- table(data[79]) %&gt;% data.frame() %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %&gt;%\n  mutate(percent_score = round(scores / sum(scores) * 100)) \n\npol_not_plot1 &lt;- ud %&gt;% \n    ggplot(., aes(y = position, x = percent_score)) + #, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5, fill =\"lightblue1\", colour =\"dodgerblue3\") + \n    theme_classic() +\n    theme(axis.title=element_blank(), \n          legend.position=\"none\", axis.text.x = element_blank(),\n          axis.text = element_text(size = 12),\n          plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position), hjust = -0.2) +\n  ggtitle(\"In ERP plot, should positive voltages be plotted upwards, or downwards?\") +\n  scale_fill_manual(values=colours) + xlim(0, 83) +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10))  \n\npol_not_plot1 +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(ud$scores))) \n\n\n\n\n\n\n\nCode\nas &lt;- cbind(unlist(area$words), unlist(data[[79]])) %&gt;% data.frame() %&gt;% \nfilter(.[[2]] != \"NANA\") %&gt;% dplyr::rename(area=X1, ud=X2) %&gt;%\ngroup_by(area) %&gt;%\nfilter(n() &gt; 2) %&gt;% group_by(area, ud) %&gt;% dplyr::summarise(n = n()) %&gt;% \n  group_by(area) %&gt;% dplyr::mutate(nn = sum(n)) %&gt;% filter(area != \"\")\n\npol_not_plot2 &lt;- as %&gt;% \n  ggplot(., aes(x = n, y = reorder(area, nn), fill = ud)) +\n  geom_col(stat = \"identity\", width = 0.7) +\n  labs(x = \"Percent of respondents\", y = \"\", fill =\"Positive:\", title = \"In ERP plot, should positive voltages\\nbe plotted upwards, or downwards?\") +\n  theme_classic()+\n  geom_text(aes(label = n, group = ud), \n            position = position_stack(vjust = 0.5), size = 4)  +\n  coord_cartesian(clip = \"off\") +\n  theme(axis.text = element_text(size = 12),\n        text = element_text(family = \"Lato\"),\n        axis.title = element_text(size = 12),\n        title = element_text(size = 14),\n        axis.title.y=element_blank(),\n        \n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.8, 0.2),\n        \n        plot.title.position = \"plot\",\n        plot.caption.position = \"plot\",\n        ) +  \n  scale_fill_manual(values=colours, limits = c(\"Up\", \"Down\")) \n\npol_not_plot2 +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(as$n)))\n\n\n\n\n\n\n\nCode\narea_short &lt;- area %&gt;% \n  mutate(words = ifelse(str_detect(.[[1]], 'language and speech|attention'), \n                        \"language, speech,\n                        attention\", \n                        \"affective neuroscience,\\nbci, clinical, decision making,\\ndevelopment, memory,\\nmethodology, motor control,\\nperception, sleep, time\")) \n\nas2 &lt;- cbind(unlist(area_short$words), unlist(data[[79]])) %&gt;% data.frame() %&gt;% \nfilter(.[[2]] != \"NANA\") %&gt;% dplyr::rename(area=X1, ud=X2) %&gt;%\ngroup_by(area) %&gt;%\nfilter(n() &gt; 2) %&gt;% group_by(area, ud) %&gt;% dplyr::summarise(n = n()) %&gt;% \n  group_by(area) %&gt;% dplyr::mutate(nn = sum(n)) %&gt;% filter(area != \"\")\n\npol_not_plot3 &lt;- as2 %&gt;% \n  ggplot(., aes(x = n, y = reorder(area, nn), fill = ud)) +\n  geom_col(stat = \"identity\", width = 0.7) +\n  labs(x = \"Percent of respondents\", y = \"\", fill =\"Positive:\", title = \"In ERP plot, should positive voltages\\nbe plotted upwards, or downwards?\") +\n  theme_classic()+\n  geom_text(aes(label = n, group = ud), \n            position = position_stack(vjust = 0.5), size = 4)  +\n  coord_cartesian(clip = \"off\") +\n  theme(axis.text = element_text(size = 12),\n        text = element_text(family = \"Lato\"),\n        axis.title = element_text(size = 12),\n        title = element_text(size = 14),\n        axis.title.y=element_blank(),\n        \n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.8, 0.2),\n        \n        plot.title.position = \"plot\",\n        plot.caption.position = \"plot\",\n        ) +  \n  scale_fill_manual(values=colours, limits = c(\"Up\", \"Down\")) \n\npol_not_plot3 +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(as$n)))\n\n\n\n\n\n\n\nBaseline\nThink about the baseline period (the time before the stimulus onset). How many milliseconds would you recommend to plot? Help: Please, provide the baseline duration for the plot, not the duration for the baseline-correction\n\njustification\n\n\nCode\n# If you don't want to provide a number on previous question, please, provide a justification\nj &lt;- data %&gt;%    \n  dplyr::rename(q = !!names(.)[78]) %&gt;% filter(!is.na(q)) %&gt;% dplyr::select(q) %&gt;% \n  mutate(q = tolower(q)) %&gt;% mutate(q = gsub('depends in|depending on', 'depends on', q),\n         dependson = ifelse(grepl(\"depends|depend\", q), q, NA)) %&gt;% \n  separate(dependson, into = c(\"a\",\"b\"), sep = \"depends on |depend on \") %&gt;% \n  dplyr::select(-a) %&gt;% \n  dplyr::rename(dependson = b) #%&gt;% \nj %&gt;% filter(!is.na(dependson)) %&gt;% select(dependson)\n\n\n# A tibble: 37 × 1\n   dependson                                                                    \n   &lt;chr&gt;                                                                        \n 1 \"the design of course\"                                                       \n 2 \"the topic\"                                                                  \n 3 \"the study. if you have interstimulus interval of 1 second and you expect to…\n 4 \"the experiment and research question\"                                       \n 5 \"the rest period between the measured evoked responses. e.g. it can be very …\n 6 \"the analysis\"                                                               \n 7 \"paradigm, 100-300 ms range preferable\"                                      \n 8 \"the task design\"                                                            \n 9 \"the type of response (eg for mrcps response is seen before actual movement …\n10 \"the task design, paradigm and signal of interest.\"                          \n# ℹ 27 more rows\n\n\nCode\nj %&gt;% filter(is.na(dependson))  %&gt;% select(-dependson)\n\n\n# A tibble: 21 × 1\n   q                                                                            \n   &lt;chr&gt;                                                                        \n 1 minimum 200ms for erps and theta or beta power                               \n 2 should match the duration of baseline-correction                             \n 3 as a rule of thumb, i would plot at least 1/3 of the duration (post-stimulus…\n 4 half of the illustrated task interval                                        \n 5 in general i would always try to plot the full baseline period used for base…\n 6 the same duration as the one used for baseline correction                    \n 7 at least 300, preferably more                                                \n 8 put down 100, but that's just what i typically use, might be diff for differ…\n 9 at least the baseline window used for the baseline correction?               \n10 in this case it has sense as the -100 : 0 ms is not flat                     \n# ℹ 11 more rows\n\n\nCode\n#j %&gt;% write.csv(., \"../data/justification.csv\")\n\njust &lt;- read.csv(\"../data/justification.csv\") %&gt;% dplyr::select(group, num)\n\njust2 &lt;- just %&gt;% filter(is.na(num)) %&gt;% group_by(group) %&gt;% dplyr::summarise(n = n())\n\n\n\n\nperiods\n\n\nCode\nbl &lt;- table(abs(just[2] %&gt;% na.omit() %&gt;% rbind(data[77] %&gt;% dplyr::rename(num = !!names(.)[1]) , .))) %&gt;% data.frame() %&gt;%  dplyr::rename(baseline = !!names(.)[1]) %&gt;% \n  mutate(percent_score = round(Freq / sum(Freq), 2) *100)\n\nperiods_plot &lt;- bl %&gt;%\n    ggplot(data = ., aes(x = baseline, y = percent_score)) +\n    geom_bar(stat=\"identity\", fill =\"lightblue1\", colour =\"dodgerblue3\") + \n  labs(x = \"Recomended baseline duration in msec\", y = \"\") +  \n  scale_y_continuous(breaks=seq(0, 60, 5)) + theme_classic() +\n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5), text = element_text(family = \"Lato\")) +\n  geom_text(aes(label = paste0(percent_score, \"%\"), group = baseline), position = position_dodge(width = .9), vjust = -0.3)   +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text.y = element_blank(), axis.text = element_text(size = 10))\n\nperiods_plot +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(bl$Freq)))\n\n\n\n\n\n\n\nCode\nbl2 &lt;- table(abs(just[2] %&gt;% na.omit() %&gt;% rbind(data[77] %&gt;% dplyr::rename(num = !!names(.)[1]) , .))) %&gt;% data.frame() %&gt;%  dplyr::rename(baseline = !!names(.)[1]) %&gt;% \n  mutate(baseline = ifelse(Freq &gt; 2, paste0(\"-\", as.character(baseline)), \"Other\")) %&gt;%\n  dplyr::group_by(baseline) %&gt;% dplyr::summarise(Freq = sum(Freq)) %&gt;% \n  mutate(percent_score = round(Freq / sum(Freq), 2) *100) %&gt;% arrange(desc(baseline)) %&gt;% \n  mutate(baseline = factor(baseline, \n  levels = c(\"-500\", \"-300\", \"-250\", \"-200\", \"-100\", \"Other\")))\n\nitalised1 &lt;- c(\"-500\", \"-300\", \"-250\", \"-200\", \"-100\", expression(italic(\"Other\")))\n\nperiods_plot2 &lt;- bl2 %&gt;%\n    ggplot(data = ., aes(x = baseline, y = percent_score)) +\n    geom_bar(stat=\"identity\", fill =\"#6BAED6\", width = 0.6) + \n  labs(x = \"Recomended baseline duration\\n(msec)\", y = \"\") +  \n  scale_y_continuous(breaks=seq(0, 60, 5)) + theme_classic() +\n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5), text = element_text(family = \"Lato\")) +\n  geom_text(aes(label = paste0(percent_score, \"%\"), group = baseline), position = position_dodge(width = .9), vjust = -0.3)   +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text.y = element_blank(), axis.text = element_text(size = 10)) + \n  scale_x_discrete(labels = italised1)\n\nperiods_plot2 +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(bl$Freq)))\n\n\n\n\n\n\n\n\nTopoplot timeseries interpretation\n\n\nCode\ntti_data &lt;- data[95] %&gt;% rename_at(vars(colnames(.)), ~ c(\"toposeries_int\")) %&gt;% filter(!is.na(.), toposeries_int != \"Other\") %&gt;%\n  group_by(toposeries_int) %&gt;% dplyr::summarise(n = n()) %&gt;% mutate(toposeries_int = case_when(\n  toposeries_int == \"The instantaneous time slices (single time points)\" ~ \"Time point\",\n  toposeries_int == \"The mean value of time bin, centered around the labelled time (average over multiple time points)\"~ \"Average over\\ntime points\"\n  )) %&gt;% mutate(p = round(n / sum(n) * 100)) \n\ntti &lt;-  tti_data %&gt;% ggplot(., aes(y = toposeries_int, x = p)) + \n    geom_bar(stat = \"identity\", width=0.5, position = \"dodge\", fill =\"#6BAED6\") + theme_classic() +\n    theme(\n      text = element_text(family = \"Lato\"),\n      legend.position=\"none\", \n      strip.background = element_blank(), \n      axis.ticks = element_line(color = \"grey40\", size = .5),\n      axis.text.x = element_blank(),\n      axis.text.y =  element_text(color = \"grey10\", size = 16),\n      axis.title.x=element_blank(), \n      plot.title = element_text(color = \"grey10\", size = 18, face = \"bold\", margin = margin(t = 15)),\n      plot.title.position = \"plot\",\n      plot.caption = element_text(hjust=0), \n    ) +\n  geom_text(aes(label = paste0(p, \"%\"), group = toposeries_int), hjust = -0.2, size = 5, family = \"Lato\") + \n  labs(title = \"How do you interpret time in topoplot timeseries?\", subtitle = \"\", y = \"\")+\n  scale_fill_manual(values=colours)  +\n  xlim(0, 100)\n\ntti  +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(tti_data$n))) # change\n\n\n\n\n\n\n\nCombined\n\n\nCode\nggarrange(periods_plot2 + labs(y = \"Percent of respondents\")+ theme(axis.title.y = element_text(margin = margin (r = 10))), \n          an_me_plot + theme(axis.title.y = element_text(margin = margin (r = 10))), labels = c(\"A\", \"B\")) \n\n\n\n\n\n\n\nCode\nggarrange(pol_not_plot2, tti, labels = c(\"A\", \"B\"))"
  },
  {
    "objectID": "src/customs.html#awareness",
    "href": "src/customs.html#awareness",
    "title": "Visualisation customs",
    "section": "Awareness",
    "text": "Awareness\n\nError bars\n\n\nCode\ntable(data[74]) %&gt;% data.frame() %&gt;% rename_at(vars(colnames(.)), ~ c(\"position\", \"Scores\"))  %&gt;% \n  filter(position != \"Never published this plot\") %&gt;% mutate(sum = sum(Scores)) \n\n\n  position Scores sum\n1       No     63 157\n2      Yes     94 157\n\n\nCode\ntable(data[74]) %&gt;% data.frame() %&gt;% rename_at(vars(colnames(.)), ~ c(\"position\", \"Scores\"))   %&gt;%  mutate(percent_score = round(Scores / sum(Scores) * 100)) %&gt;% \n\n    ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) +\n      \n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position),  position = position_stack(vjust = 0.5), size = 6) + \n  ggtitle(\"In your paper, did you published ERP plot with error bars?\")\n\n\n\n\n\n\n\nCode\neb &lt;- table(data[74]) %&gt;% data.frame() %&gt;% rename_at(vars(colnames(.)), ~ c(\"Position\", \"Scores\")) %&gt;% \n  filter(Position != \"Never published this plot\") %&gt;% \n  mutate(percent_score = round(Scores / sum(Scores) * 100)) \n\neb_fig &lt;- eb %&gt;% \n    ggplot(., aes(y = Position, x = percent_score)) + \n    geom_bar(stat = \"identity\", width=0.5, position = \"dodge\", fill =\"#6BAED6\") + theme_classic() +\n  theme(axis.text.x = element_blank(),\n        axis.title.y = element_blank(),\n        legend.position=\"none\", \n        text = element_text(family = \"Lato\"),\n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = paste0(percent_score, \"%\"), group = Position),  #position = position_stack(vjust = 0.5), \n            hjust = -0.2) + \n  ggtitle(\"In your paper, have you published\\nan ERP plot with error bars?\")+\nscale_fill_manual(values=colours)  +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10)) + \n  xlim(0, 100) + labs(y = \"\")\n\neb_fig  +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(eb$Scores)))\n\n\n\n\n\n\n\nCode\nebd &lt;- data[75] %&gt;%  filter(!is.na(.)) %&gt;% table()  %&gt;% data.frame() %&gt;% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %&gt;% mutate(percent_score = round(scores / sum(scores) * 100)) %&gt;% filter(position != \"Other\") \n\nebd_fig &lt;- ebd %&gt;% \n    ggplot(., aes(y = position, x = percent_score)) + \n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5, fill =\"#6BAED6\") + \n    theme_classic() +\n    theme(axis.text.x = element_blank(), \n          text = element_text(family = \"Lato\"),\n          legend.position=\"none\", \n          axis.title.y = element_blank(),\n          plot.title = element_text(hjust = 0.5)) + \n     \n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position),  hjust = -0.2) + \n  ggtitle(\"In your figure, what\\ndid the error bars represent?\")+\n    scale_fill_manual(values=colours) + scale_y_discrete(labels = c(\"Standard error\\nof the mean\", \"Confidence\\ninterval\")) +\n    theme(plot.caption = element_text(hjust=0), axis.text = element_text(size = 10)) + xlim(0, 100) \n\nebd_fig +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(ebd$scores))) \n\n\n\n\n\n\nCombined\n\n\nCode\nggarrange(eb_fig + labs(x = \"Percent of respondents\"), ebd_fig + labs(x = \"Percent of respondents\"),  \n          labels = c(\"A\", \"B\"),\n          ncol = 2, nrow = 2, align = 'h')  \n\n\n\n\n\n\n\nCode\ndata[76] %&gt;%  filter(!is.na(.)) %&gt;% table()\n\n\nG03Q15[other]. What did the error bars depict in your figure? [Other]\n                                            - \n                                            1 \n68% CI, which is close to SEM under normality \n                                            1 \n                    95% ci over channel means \n                                            1 \n          i'm not sure but i think it was sem \n                                            1 \n                             I don't remember \n                                            1 \n        median absolute deviaton or quantiles \n                                            1 \n                                           NA \n                                            1 \n                                           Sd \n                                            1 \n SEM, corrected for within-participant design \n                                            1 \n\n\n\n\n\nColormaps\n\n\nCode\ncb &lt;- table(data[117]) %&gt;% data.frame() %&gt;% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) \ncb  %&gt;% \n  mutate(percent_score = round(scores / sum(scores) * 100)) %&gt;% \n    ggplot(., aes(y = position, x = percent_score)) + #, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5, fill =\"#6BAED6\") + \n    theme_classic() +\n    theme(\n      text = element_text(family = \"Lato\"),\n      legend.position=\"none\", \n      strip.background = element_blank(), \n      axis.title.y = element_blank(),\n      axis.text.x = element_blank(),\n      axis.text.y = element_text(color = \"grey10\", size = 16),\n      axis.title.x = element_text(color = \"grey10\", size = 16),\n      plot.title = element_text(color = \"grey10\", size = 18, face = \"bold\", margin = margin(t = 15)),\n      plot.title.position = \"plot\",\n      plot.caption = element_text(hjust=0), \n    ) + xlab(\"Percent of respondents\") +\n\n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position),  hjust = -0.2, size = 7) + \n  ggtitle(\"Are you aware about\\nperceptual controvercies of colormaps?\")+\n    scale_fill_manual(values=colours) +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0)) + xlim(0, 65) #+\n\n\n\n\n\nCode\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(cb$scores)))  \n\n\n$caption\n[1] \"N of respondents - 213\"\n\nattr(,\"class\")\n[1] \"labels\"\n\n\n\n\nColorbars\n\n\nCode\nrbind(table(data[117]) %&gt;% data.frame() %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"answer\", \"scores\")) %&gt;% \n  mutate(questions = \"Awareness about\\ncontrovercies of\\ncolorbars\")%&gt;%\n  mutate(percent_score = round(scores / sum(scores) * 100)),\n\ntable(data[118]) %&gt;% data.frame() %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"answer\", \"scores\")) %&gt;% \n  mutate(questions = \"Awareness about\\n2D colorbars\") %&gt;%\n  mutate(percent_score = round(scores / sum(scores) * 100))\n) %&gt;% \n  \n  ggplot(., aes(x = percent_score, y = questions, fill = answer)) +\n  geom_col(stat = \"identity\", width = 0.5) +\n   geom_text(aes(label = paste0(percent_score, \"%\", \"\\n(\", answer, \")\")), \n            position = position_stack(vjust = 0.5), size = 4) + \n    theme_classic()+ \n  theme(plot.title = element_text(hjust = 0.5),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"none\",\n        legend.title = element_blank(),\n        axis.title.y=element_blank()\n        ) +\n  scale_color_manual(values = c(\"#FF6666\", \"#66CC66\")) +\n  scale_fill_manual(values = c(\"#FF6666\", \"#66CC66\"))  +\n  labs(x=\"Percent score\") +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(cb$scores))) +\n    theme(legend.position=\"none\", plot.caption.position = \"plot\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10)) \n\n\n\n\n\n\n\nCode\ntdc &lt;- table(data[119])  %&gt;% data.frame() %&gt;% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %&gt;%\n  mutate(percent_score = round(scores / sum(scores) * 100)) \n\ntdc %&gt;% \n  ggplot(., aes(y = position, x = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(stat = \"identity\", width=0.5)  + theme_classic() +\n     theme(axis.title.y=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) + labs(x = \"Scores\") +\n  geom_text(aes(label = paste0(percent_score, \"%\") , \n                group = position), position = position_stack(vjust = 0.5), size = 5) + \n  ggtitle(\"Would you like to use a two-dimensional colorbar\\nin your publications, if it was easily available?\") +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(tdc$scores))) +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10))"
  },
  {
    "objectID": "src/sample_bio.html",
    "href": "src/sample_bio.html",
    "title": "Sample bio",
    "section": "",
    "text": "Here we show a statistics about our study sample: biographical and experience data"
  },
  {
    "objectID": "src/sample_bio.html#setup",
    "href": "src/sample_bio.html#setup",
    "title": "Sample bio",
    "section": "Setup",
    "text": "Setup\n\n\nCode\ndata &lt;- read_excel(\"../data/results_survey.xlsx\")\ndata &lt;- data[1:121] %&gt;% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\n\nfont_add_google(\"Lato\")\nshowtext_opts(dpi = 200)\nshowtext_auto(enable = TRUE)"
  },
  {
    "objectID": "src/sample_bio.html#sample-overview",
    "href": "src/sample_bio.html#sample-overview",
    "title": "Sample bio",
    "section": "Sample overview",
    "text": "Sample overview\n\nCountry\n\n\nCode\ncountry &lt;- data.frame(table(data[8]))  %&gt;% dplyr::rename(country_work = !!names(.)[1]) %&gt;%\n  mutate(country_work = ifelse(Freq &gt;= 6, as.character(country_work), \"Other\")) %&gt;% group_by(country_work) %&gt;% \n  mutate(country_work = case_when(\n    country_work == \"United Kingdom\" ~ \"UK\",\n    TRUE ~ as.character(country_work)  \n  )) %&gt;% \n  dplyr::summarise(Freq = sum(Freq)) %&gt;% \n  dplyr::mutate(percent_score = round(Freq / sum(Freq) * 100)) %&gt;% \n  mutate(country_work = factor(country_work, levels = country_work[rev(order(percent_score))]))\n\nitalised1 &lt;- rev(c(\"Germany\", expression(italic(\"Other\")), \"USA\", \"UK\", \"France\", \"Netherlands\", \"Switzerland\", \"Spain\", \"Italy\", \"Russia\", \"Belgium\", \"Australia\"))\n\n\ncountry_fig &lt;- country %&gt;%\n  ggplot(data = ., aes(y = reorder(country_work, percent_score),  x= percent_score)) +#, fill = country_work)) +\n  geom_col(stat = \"identity\", width = 0.8) + \n  labs(x = \"Percent\", y=\"\", title = \"Country of work\") +\n  geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.1,\n  size = 4)  + theme_classic()   +\n  theme(legend.position=\"none\", \n        plot.caption.position = \"plot\", \n        plot.caption = element_text(hjust=0), \n        axis.text.y = element_text(size = 12),\n        text = element_text(family = \"Lato\"),\n        ) + coord_cartesian(clip = \"off\") +\n    scale_y_discrete(labels = italised1)\n\ncountry_fig + \n  labs(caption = sprintf(\"N of respondents = %d\", sum(country$Freq))) \n\n\n\n\n\n\n\nCode\ndata.frame(table(data[8]))  %&gt;% dplyr::rename(country_work = !!names(.)[1]) %&gt;%\n  #mutate(country_work = ifelse(Freq &gt;= 6, as.character(country_work), \"Others\")) %&gt;%\n  group_by(country_work) %&gt;% \n  mutate(country_work = case_when(\n    country_work == \"United Kingdom\" ~ \"UK\",\n    TRUE ~ as.character(country_work)  \n  )) %&gt;% \n  dplyr::summarise(Freq = sum(Freq)) %&gt;% \n  dplyr::mutate(percent_score = round(Freq / sum(Freq) * 100)) %&gt;% \n  mutate(country_work = factor(country_work, levels = country_work[rev(order(percent_score))])) %&gt;% \n  arrange(desc(Freq))\n\n\n# A tibble: 30 × 3\n   country_work  Freq percent_score\n   &lt;fct&gt;        &lt;int&gt;         &lt;dbl&gt;\n 1 Germany         53            25\n 2 USA             26            12\n 3 France          22            10\n 4 UK              22            10\n 5 Netherlands     12             6\n 6 Switzerland     10             5\n 7 Spain            9             4\n 8 Italy            8             4\n 9 Russia           7             3\n10 Australia        6             3\n# ℹ 20 more rows\n\n\n\n\nCode\nc_df &lt;- data.frame(table(data[8]))  %&gt;% dplyr::rename(country_work = !!names(.)[1]) \nc_df$continent &lt;- countrycode(sourcevar = c_df[, \"country_work\"],\n                            origin = \"country.name\",\n                            destination = \"region23\")\nc_df %&gt;% group_by(continent) %&gt;% dplyr::summarise(Freq = sum(Freq)) %&gt;%  ungroup() %&gt;% \n  mutate(Per = round(Freq/ sum(Freq), 2) * 100) %&gt;% \n  arrange(desc(Freq))\n\n\n# A tibble: 14 × 3\n   continent                  Freq   Per\n   &lt;chr&gt;                     &lt;int&gt; &lt;dbl&gt;\n 1 Western Europe              105    49\n 2 Northern Europe              30    14\n 3 Northern America             28    13\n 4 Southern Europe              17     8\n 5 Eastern Europe               11     5\n 6 Australia and New Zealand     6     3\n 7 Western Asia                  5     2\n 8 Southern Asia                 3     1\n 9 South America                 2     1\n10 South-Eastern Asia            2     1\n11 Central America               1     0\n12 Central Asia                  1     0\n13 Eastern Asia                  1     0\n14 Western Africa                1     0\n\n\n\n\nField\n\n\nCode\nfield &lt;- as.data.frame(table(data[9])) %&gt;% arrange(desc(Freq)) %&gt;% head(3)\nfield$Freq[1] &lt;- field$Freq[1] + 1 # from Others\nfield$Freq[2] &lt;- field$Freq[2] + 1\nfield$Freq[3] &lt;- field$Freq[3] + 1\n\nfieldplot &lt;- field %&gt;% dplyr::rename(area = !!names(.)[1]) %&gt;%\n  mutate(percent_score = round(Freq / sum(Freq) * 100)) %&gt;% \n    ggplot(data = ., aes(y = reorder(area, percent_score),  x = percent_score)) +\n    geom_col(stat=\"identity\", width = 0.7) + labs(y = \"\", title=\"Field of research\", x =\"Percent\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.1)  + \n  theme_classic()  +\n    theme(legend.position=\"none\", \n          plot.caption = element_text(hjust=0), \n          text = element_text(family = \"Lato\"),\n          axis.text.y = element_text(size = 12)) + scale_y_discrete(labels=c(\"Applied\", \"Clinical\", \"Fundamental\")) + \n  coord_cartesian(clip = \"off\") #+ scale_fill_grey(start = .9, end = 0)\nfieldplot + \n    labs(caption = sprintf(\"N of respondents = %d\", sum(field$Freq)))\n\n\n\n\n\n\n\nPosition\n\n\n\n\n\n\n\nMethods\n\n\nCode\nmethod &lt;- data[14:17]\ncolnames(method) &lt;- names(method) %&gt;%  str_split_i(., \"\\\\? \\\\[\", 2)  %&gt;%  str_sub(., 1, -2)\n\nmethods &lt;- data.frame(rowSums(t(data.frame(foreach(i = colnames(method)) %do% ifelse(method[i]==\"Yes\", 1, 0))))) %&gt;% \n  tibble::rownames_to_column(., \"plots\") %&gt;% \n    dplyr::rename(method = !!names(.)[1], sum_scores = !!names(.)[2])  %&gt;%  \n    mutate(percent_score = round(sum_scores / sum(sum_scores) * 100)) %&gt;% \n  \n    ggplot(., aes(y = reorder(method, percent_score), x = percent_score)) + \n    geom_col(stat = \"identity\", width = 0.7) + labs(y = \"\", x = \"Percent\", title = \"Method\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.1)+\n    theme_classic() + \n    theme(legend.position=\"none\", text = element_text(family = \"Lato\"), \n          plot.caption = element_text(hjust=0), axis.text.y = element_text(size = 14)) +\n    scale_y_discrete(labels=c(\"OPMs MEG\", \"Intracranial EEG\", \"SQUID MEG\", \"Scalp EEG\")) +\n    coord_cartesian(clip = \"off\") + xlim(0, 75)\n\nmethods + \n    labs(caption = sprintf(\"N of respondents = %d\", nrow(method)))\n\n\n\n\n\n\n\nTopic\n\n\nCode\nt &lt;- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt &lt;- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\narea &lt;- data.frame(matrix(tt)) %&gt;% dplyr::rename(words = !!names(.)[1]) %&gt;%\n   mutate(words2 = case_when(\n    grepl(\"\\\\bmemory\\\\b\", words) == TRUE ~ \"memory\", \n    grepl(\"\\\\b(empathy|emot\\\\w*|affective|social)\\\\b\", words) == TRUE ~ \"affective neuroscience\", \n    grepl(\"\\\\b(cognitive load|selective attention|attention|cognition|consciousness|meditation|cognitive control|self|executive functions)\\\\b\", words) == TRUE ~ \"cognitive control and attention\", \n    grepl(\"\\\\b(hearing|audi\\\\w*)\\\\b\", words) == TRUE ~ \"auditory\",\n    grepl(\"\\\\b(decision|reward)\\\\b\", words) == TRUE ~ \"decision making\",\n    grepl(\"\\\\b(ageing|aging)\\\\b\", words) == TRUE ~ \"ageing\",\n    grepl('\\\\bolfac\\\\w*', words) ~ 'olfaction',\n    grepl('\\\\b(communication|language|speech|biling\\\\w*|english)\\\\b', words) ~ 'language and speech',\n    grepl('\\\\bbci\\\\b', words) ~ 'bci',\n    grepl('\\\\bsleep\\\\b', words) ~ 'sleep',\n    grepl('\\\\b(timing|time|temporal)\\\\b', words) ~ 'time',\n    grepl('\\\\bperception\\\\b', words) ~ 'perception',\n    grepl('\\\\bvis\\\\w*', words) ~ 'vision',\n    grepl('\\\\b(development\\\\w*|ageing)\\\\b', words) ~ 'development',\n    grepl('\\\\b(spatial|brain body|motor|motion)\\\\b', words) ~ 'motor control',\n    grepl('\\\\b(diagnostics|disorder(s)?|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology|pain|dbs|stimulation)\\\\b', words) ~ 'mental disorders',\n    grepl('\\\\b(signal|potentials|method\\\\w*|sdf|ieeg|computational)\\\\b', words) ~ 'methodology',\n    grepl('\\\\b(olfaction|vision|auditory)\\\\b', words) ~ 'development',\n    ))\n   \narea %&gt;% group_by(words2) %&gt;% dplyr::summarise(Freq = n()) %&gt;% \n  data.frame(.)  %&gt;% mutate(words2 = as.character(words2)) %&gt;%  #arrange(desc(Freq)) %&gt;% \n    ggplot(data = ., aes(y = reorder(words2, Freq),  x= Freq)) +\n    geom_bar(stat=\"identity\") + labs(x=\"Topic of research\", y=\"Frequency\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2) + theme_classic() +\n    labs(caption = sprintf(\"N of respondents = %d\", nrow(area))) +\n    theme(legend.position=\"none\", plot.caption.position = \"plot\", plot.caption = element_text(hjust=0), axis.text.y = element_text(size = 11))"
  },
  {
    "objectID": "src/sample_bio.html#experience",
    "href": "src/sample_bio.html#experience",
    "title": "Sample bio",
    "section": "Experience",
    "text": "Experience\n\nYears\n\n\nCode\nyear &lt;- data %&gt;% dplyr::rename(years = !!names(.)[20]) %&gt;% filter(.[[20]] &lt; 50) %&gt;% select(years)\n\nyears &lt;- year %&gt;% group_by(years) %&gt;% \n  dplyr::summarise(n = n()) %&gt;% \n  mutate(p = round(n / sum(n), 2))  %&gt;% ggplot(data = ., aes(x=years, y = p)) +\n  geom_col(position = \"identity\", col=\"grey\") +  scale_x_continuous(breaks=seq(0, 30, 5)) +\n  labs(x =\"Years of experience with EEG, MEG, or iEEG analysis\", y=\"\") +\n  theme_classic() + theme(legend.position=\"none\", text = element_text(family = \"Lato\"),\n                          axis.text = element_text(size = 10)) +\n  theme(legend.position=\"none\", plot.caption = element_text(hjust=0), \n        axis.text = element_text(size = 10)) + \n  geom_vline(xintercept = median(year$years),        # Add line for mean\n             col = \"brown1\", lty='dashed',\n             lwd = 1) +\n  geom_text(aes(label = paste0(\"median = \", median(year$years)), col = \"brown1\",\n                x = median(year$years)*2.2, family = \"Lato\",\n                y  = 0.11)) + scale_y_continuous(labels = scales::percent)\n\nyears + labs(caption = sprintf(\"N of respondents - %d, median - %d\", nrow(year), median(year$years)))  \n\n\n\n\n\n\n\nPapers\n\n\nCode\ntmp_med &lt;- data[19] %&gt;% dplyr::rename(papers = !!names(.)[1]) %&gt;% \n  filter(papers &lt; 100) %&gt;% summarise(median_paper = median(papers)) %&gt;% as.numeric()\n\npapers &lt;- data[19] %&gt;% dplyr::rename(papers = !!names(.)[1]) \n\npapers_fig &lt;- papers %&gt;% \n  filter(papers &lt; 100) %&gt;% group_by(papers) %&gt;% \n  dplyr::summarise(n = n()) %&gt;% \n  mutate(p = round(n / sum(n), 2)) %&gt;% \n\nggplot(., aes(x = papers, y = p)) +\n  geom_col(position = \"identity\", bins = 45, col=\"grey\") +\n  labs(x =\"The number of published papers/preprints with EEG, MEG or iEEG analysis\", y = \"\") + theme_classic()  +\n  theme(legend.position=\"none\", plot.caption = element_text(hjust=0), text = element_text(family = \"Lato\"),\n        axis.text = element_text(size = 10)) + \n  geom_vline(xintercept = tmp_med - 1,        # Add line for mean, -1 because starts from zero\n             col = \"brown1\", lty='dashed',\n             lwd = 1) +\n  geom_text(aes(label = paste0(\"median = \", tmp_med), \n                x = tmp_med*7, col = \"brown1\", family = \"Lato\",\n                y  = 0.15)) + scale_y_continuous(labels = scales::percent)\npapers_fig +\n  labs(caption = sprintf(\"N of respondents - %d, median - %s\", nrow(papers), as.character(tmp_med)))\n\n\n\n\n\n\n\nSelf-assessed level\n\n\nCode\ncolorsal &lt;- c(\"#f9a65a\", \"#599ad3\", \"#8dc63f\")\nsal &lt;- table(data[21]) %&gt;% data.frame() %&gt;% dplyr::rename(level = !!names(.)[1]) %&gt;%\n    mutate(percent_score = round(Freq / sum(Freq) * 100)) %&gt;% \n    mutate(level = factor(level, levels = rev(c(\"Beginner\", \"Intermediate\", \"Expert\"))))\n\nsall &lt;- sal %&gt;% \n    ggplot(data = ., aes(y = level, x = percent_score)) +  \n    geom_col(stat=\"identity\",  width = 0.5) + labs(x = \"Percent\", y = \"\", title=\"Self-assessed level\") +\n    geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.2)  + theme_classic() +\n    theme(legend.position=\"none\", axis.text.x = element_text(size = 12), text = element_text(family = \"Lato\"),\n          plot.caption = element_text(hjust=0), axis.text = element_text(size = 10))\nsall +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(sal$Freq))) + xlim(0, 50)\n\n\n\n\n\n\n\nCode contribution\n\n\nCode\ncc &lt;- table(data[22])  %&gt;% data.frame()%&gt;% dplyr::rename(level = !!names(.)[1]) %&gt;%\n    mutate(percent_score = round(Freq / sum(Freq) * 100)) %&gt;% \n    ggplot(data = ., aes(y = reorder(level, Freq),  x = percent_score))  +\n    geom_col(stat=\"identity\", width = 0.5) + \n    geom_text(aes(label = paste0(percent_score, \"%\")), hjust = -0.2)  +\n  theme_classic() +\n  theme(legend.position=\"none\", axis.text.x = element_text(size = 12), text = element_text(family = \"Lato\")) +\n  labs(title = \"Code contribution\", x=\"Percent\", y=\"\")  +\n    theme(legend.position=\"none\", plot.caption = element_text(hjust=0), axis.text = element_text(size = 10)) + xlim(0, 64)\ncc +\n    labs(caption = sprintf(\"N of respondents - %d\",  sum(sal$Freq)))"
  },
  {
    "objectID": "src/sample_bio.html#combined-plots",
    "href": "src/sample_bio.html#combined-plots",
    "title": "Sample bio",
    "section": "Combined plots",
    "text": "Combined plots\n\n\nCode\nggarrange(country_fig + geom_col(stat = \"identity\", width = 0.8, fill =\"#6BAED6\") + \n            theme(axis.text.y = element_text(size = 10), axis.text.x = element_blank()) + xlim(0, 100) + labs(x= \"Percent of respondents\"), \n          position + xlim(0, 100) + geom_col(stat = \"identity\", fill =\"#6BAED6\") + \n            theme(axis.text.y = element_text(size = 10), axis.text.x = element_blank()) + labs(x = \"Percent of respondents\"),   \n          fieldplot + xlim(0, 100) + geom_col(stat = \"identity\", width = 0.7, fill =\"#6BAED6\") + \n            theme(axis.text.y = element_text(size = 10), axis.text.x = element_blank()) + labs(x = \"Percent of respondents\"), \n          methods  + geom_col(stat = \"identity\", width = 0.7, fill =\"#6BAED6\") +  \n            scale_y_discrete(labels=c(\"OPMs\", \"iEEG\", \"MEG\", \"Scalp EEG\")) + xlim(0, 100) +  \n            theme(axis.text.y = element_text(size = 10), axis.text.x = element_blank()) + labs(x = \"Percent of respondents\"),\n          labels = c(\"A\", \"B\", \"C\", \"D\"),\n          ncol = 2, nrow = 2, align = 'hv')  \n\n\n\n\n\n\n\nCode\n #RColorBrewer::brewer.pal(8, \"Reds\")\n#\"#FFF5F0\" \"#FEE0D2\" \"#FCBBA1\" \"#FC9272\" \"#FB6A4A\" \"#EF3B2C\" \"#CB181D\" \"#99000D\"\n\nggarrange(years +  geom_col(position = \"identity\", bins = 45, fill =\"#6BAED6\") + \n  geom_vline(xintercept = median(year$years),        # Add line for mean\n             col = \"#FC9272\", lty='dashed',\n             lwd = 1) + labs(title =\"Years of experience\", y= \"Percent of\\nrespondents\", x=\"\") ,\n  \n          papers_fig + geom_col(position = \"identity\", bins = 45, fill =\"#6BAED6\") + \n  geom_vline(xintercept = tmp_med - 1,        # Add line for mean\n             col = \"#FC9272\", lty='dashed',\n             lwd = 1) + labs(title =\"Number of papers published\", y= \"Percent of\\nrespondents\", x=\"\"), \n  \n          cc +  geom_col(stat = \"identity\",  width = 0.5, fill =\"#6BAED6\") + xlim(0, 100) + theme(axis.text.y = element_text(size = 10), axis.text.x = element_blank()) +  \n    labs(x =\"Percent of respondents\") , \n  \n          sall + geom_col(stat = \"identity\",  width = 0.5, fill =\"#6BAED6\") + xlim(0, 100) + theme(axis.text.y = element_text(size = 10), axis.text.x = element_blank()) +  \n    labs(x =\"Percent of respondents\"), \n          labels = c(\"A\", \"B\", \"C\", \"D\"),\n          ncol = 2, nrow = 2)"
  },
  {
    "objectID": "src/sample_bio.html#time-of-finishing-survey-in-minutes",
    "href": "src/sample_bio.html#time-of-finishing-survey-in-minutes",
    "title": "Sample bio",
    "section": "Time of finishing survey in minutes",
    "text": "Time of finishing survey in minutes\n\n\nCode\nmedian(as.numeric(as.matrix(data[121]))) / 60\n\n\n[1] 13.86367"
  },
  {
    "objectID": "src/proficiency.html",
    "href": "src/proficiency.html",
    "title": "Proficiency",
    "section": "",
    "text": "Here we assess how proficiency in EEG affects researcher’s awareness, preferences and choices."
  },
  {
    "objectID": "src/proficiency.html#setup",
    "href": "src/proficiency.html#setup",
    "title": "Proficiency",
    "section": "Setup",
    "text": "Setup\n\n\nCode\ndata &lt;- read_excel(\"../data/results_survey.xlsx\")\ndata &lt;- data[1:121] %&gt;% \n  filter(.[[18]] !='Yes', .[[20]] &lt; 80) # not analysed any EEG method"
  },
  {
    "objectID": "src/proficiency.html#proficiency-factor",
    "href": "src/proficiency.html#proficiency-factor",
    "title": "Proficiency",
    "section": "Proficiency factor",
    "text": "Proficiency factor\n\n\nCode\nm = FAMD(exp_data[1:5], ncp=2, axes=c(1,2))\n\n\n\n\n\n\ntest\nProxy Proficiency should definitely correlate with years of experience\n\n\nCode\nfactor_scores &lt;- as.data.frame(m$ind$coord)\nhead(factor_scores)\n\n\n       Dim.1      Dim.2\n1 -1.3787967 -0.4011946\n2 -1.1019372 -0.7171748\n3 -0.2238351 -1.4057025\n4  0.5125602 -0.7813393\n5  0.3645902  0.5355694\n6  1.3044242 -0.6310768\n\n\nCode\ncbind(data[20], factor_scores[1])  %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"years\", \"proxy\")) %&gt;% \n  with(cor.test( proxy, years)) %&gt;% \n  broom::tidy() %&gt;% dplyr::select(estimate, p.value)\n\n\n# A tibble: 1 × 2\n  estimate  p.value\n     &lt;dbl&gt;    &lt;dbl&gt;\n1    0.895 5.52e-75"
  },
  {
    "objectID": "src/proficiency.html#tiles",
    "href": "src/proficiency.html#tiles",
    "title": "Proficiency",
    "section": "Tiles",
    "text": "Tiles\n\ncontrovercies\nHere we cor.tests\n\nn_soft - number of software used\nrate - rate of electrodes recorded to electrodes analysed\n\n\n\nCode\nvec &lt;- names(data[25:50]) %&gt;% str_split_i(., \"\\\\? \\\\[\", 2) %&gt;%  str_sub(., 1, -2)\n\ncor_fun &lt;- function(df){\n  p.value &lt;- cor.test(df$proxy, df$score, method = \"spearman\")$p.value\n  mod &lt;- spearman.ci(df$proxy, df$score) %&gt;% tidy() %&gt;% cbind(p.value) \n  }\n\nn_soft &lt;- data[25:50] %&gt;%\n  rename_at(vars(colnames(.)), ~ vec) %&gt;% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))%&gt;%\n  rowSums() %&gt;% tibble()\n\ncbind(factor_scores[1], data[23]) %&gt;% cbind(., data[24]) %&gt;%  cbind(., n_soft) %&gt;%\n  rename_at(vars(colnames(.)), ~ c(\"proxy\", \"measure\", \"analyse\", \"n_soft\")) %&gt;%\n  dplyr::filter(analyse &lt; 500) %&gt;% tibble() %&gt;% \n  mutate(rate = analyse / measure) %&gt;% \n  dplyr::select(-analyse, -measure) %&gt;% \n  gather(type, score, rate:n_soft) %&gt;% \n  dplyr::group_by(., type) %&gt;% nest() %&gt;% \n  dplyr::mutate(., model = map(data, cor_fun)) %&gt;% unnest() %&gt;% \n  dplyr::select(type, estimate, method, conf.low.Inf, conf.high.Sup, p.value) %&gt;%\n  dplyr::group_by(type) %&gt;%  slice(1) %&gt;% mutate(estimate = round(as.numeric(estimate), 3),\n                                                 CI = paste0('(' , round(conf.low.Inf, 3), ', ', round(conf.high.Sup, 3), ')'),\n                                                             p.value = round(as.numeric(p.value), 2)) %&gt;% \n  mutate(p.value = cell_spec(p.value, bold = ifelse(p.value &lt; 0.05, TRUE, FALSE))) %&gt;% \n  mutate(type = case_when(\n    type == \"n_soft\" ~ \"Number of softwares used\",\n    type == \"rate\" ~ \"Rate of electrodes recorded to analysed\"\n  )) %&gt;% select(-conf.low.Inf, -conf.high.Sup) %&gt;% \n  kable(escape = F, booktabs = T) %&gt;% \n  kable_minimal(full_width = F,  html_font = \"Source Sans Pro\")\n\n\n\n\n\ntype\nestimate\nmethod\np.value\nCI\n\n\n\n\nNumber of softwares used\n0.307\nSpearman's rank correlation\n0\n(0.165, 0.43)\n\n\nRate of electrodes recorded to analysed\n0.262\nSpearman's rank correlation\n0\n(0.124, 0.387)\n\n\n\n\n\n\n\n\n\nattitudes\nAttitudes on 8 features of ERP visualization tools Here we use cor.tests\n\n\nCode\nfeature &lt;- data[52:60] %&gt;% rename_all(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %&gt;% str_sub(., 1, -2) ) %&gt;%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 )))  %&gt;% \n  cbind(., factor_scores[1]) %&gt;%  \n  rename_at(vars(colnames(.)), ~ c(\"subplot\", \"attributes\", \"speed\", \"publicable\", \"reproducable\", \"zooming\", \"interactive\", \"gui\", \"coding\", \"proxy\")) \n\nfeature %&gt;% \n  gather(type, score, subplot:coding) %&gt;% \n  dplyr::group_by(., type) %&gt;% nest() %&gt;% \n  dplyr::mutate(., model = map(data, cor_fun)) %&gt;% unnest() %&gt;% \n  dplyr::select(type, estimate, conf.low.Inf, conf.high.Sup, p.value) %&gt;% # , method\n  dplyr::group_by(type) %&gt;%  slice(1) %&gt;% mutate(estimate = round(as.numeric(estimate), 2),\n                                                 CI = paste0('(' , round(conf.low.Inf, 3), ', ', round(conf.high.Sup, 3), ')' ),\n                                                             p.value = round(as.numeric(p.value), 2)) %&gt;% \n  mutate(p.value = cell_spec(p.value, bold = ifelse(p.value &lt; 0.05, TRUE, FALSE))) %&gt;% \n  dplyr::rename(`Software feature` = type, `Spearman rho` = estimate) %&gt;% \n  select(-conf.low.Inf, -conf.high.Sup) %&gt;% \n  kable(escape = F, booktabs = T) %&gt;% \n  kable_minimal(full_width = F,  html_font = \"Source Sans Pro\") \n\n\n\n\n\nSoftware feature\nSpearman rho\np.value\nCI\n\n\n\n\nattributes\n-0.07\n0.32\n(-0.223, 0.074)\n\n\ncoding\n0.17\n0.01\n(0.03, 0.301)\n\n\ngui\n-0.13\n0.07\n(-0.264, 0.018)\n\n\ninteractive\n-0.07\n0.34\n(-0.209, 0.06)\n\n\npublicable\n-0.11\n0.11\n(-0.243, 0.025)\n\n\nreproducable\n0.07\n0.33\n(-0.072, 0.199)\n\n\nspeed\n0.02\n0.82\n(-0.121, 0.151)\n\n\nsubplot\n0.12\n0.08\n(-0.024, 0.248)\n\n\nzooming\n-0.01\n0.92\n(-0.141, 0.122)\n\n\n\n\n\n\n\n\n\nawareness\n\n\nCode\nlog_fun &lt;- function(df){\n  mod &lt;- glm(df$score ~ df$proxy, family = \"binomial\") \n  ci1 &lt;- confint(mod)[2]\n  ci2 &lt;- confint(mod)[4]\n  mod %&gt;% tidy() %&gt;% slice(-1) %&gt;% cbind(ci1) %&gt;% cbind(ci2)\n}\n\n\n\n\nCode\ncbind(factor_scores[1], data[79]) %&gt;% cbind(., data[117]) %&gt;% \n  cbind(., data[118]) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"proxy\", \"ud\", \"jet_aware\", \"twod_aware\")) %&gt;%\n  mutate(ud = ifelse(ud==\"Up\", 1, 0), \n         jet_aware = ifelse(jet_aware ==\"Yes\", 1, 0),\n         twod_aware = ifelse(twod_aware ==\"Yes\", 1, 0)) %&gt;% \n  gather(type, score, ud:twod_aware) %&gt;% \n  dplyr::group_by(., type) %&gt;% nest() %&gt;% \n  dplyr::mutate(., model = map(data, log_fun)) %&gt;% unnest() %&gt;% \n  dplyr::select(type, estimate, std.error, p.value, ci1, ci2) %&gt;%\n  dplyr::group_by(type) %&gt;%  slice(1) %&gt;% mutate(p.value = round(as.numeric(p.value), 3),\n                                                 estimate = round(as.numeric(estimate), 3),\n                                                 std.error = round(as.numeric(std.error), 3),\n                                                CI = paste0('(' , round(ci1, 3), ', ', round(ci2, 2), ')' )) %&gt;%\n  dplyr::select(-ci1, -ci2) %&gt;%\n  mutate(p.value = cell_spec(p.value, bold = ifelse(p.value &lt; 0.05, TRUE, FALSE))) %&gt;% \n  mutate(type = case_when(\n    type == \"ud\" ~ \"Polaritiy convention: up\",\n    type == \"jet_aware\" ~ \"Awareness about colorbar perceptual controvercies: yes\",\n    type == \"twod_aware\" ~ \"Awareness about 2D colobars: yes\"\n  )) %&gt;% \n  dplyr::rename(`Visualisation customs` = type) %&gt;% \n  kable(escape = F, booktabs = T) %&gt;% \n  kable_minimal(full_width = F,  html_font = \"Source Sans Pro\")\n\n\n\n\n\nVisualisation customs\nestimate\nstd.error\np.value\nCI\n\n\n\n\nAwareness about colorbar perceptual controvercies: yes\n0.335\n0.095\n0\n(0.156, 0.53)\n\n\nAwareness about 2D colobars: yes\n0.112\n0.090\n0.213\n(-0.061, 0.29)\n\n\nPolaritiy convention: up\n-0.022\n0.111\n0.843\n(-0.236, 0.2)\n\n\n\n\n\n\n\n\n\ntools\n\n\nCode\nvec &lt;- names(data[25:51]) %&gt;% str_split_i(., \"\\\\? \\\\[\", 2) %&gt;%  str_sub(., 1, -2)\n\ndata[25:51] %&gt;%\n  rename_at(vars(colnames(.)), ~ vec) %&gt;% \n  dplyr::select(-Other) %&gt;% \n  mutate_at(vars(vec[1:26]), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %&gt;%\n  select_if(colSums(.) &gt; 10) %&gt;% \n  cbind(factor_scores[1], .) %&gt;% dplyr::rename(proxy = !!names(.)[1]) %&gt;% \n  gather(type, score, BESA:`Custom scripts`) %&gt;% \n   dplyr::group_by(., type) %&gt;% nest() %&gt;% \n  dplyr::mutate(., model = map(data, log_fun)) %&gt;% unnest() %&gt;% \n  dplyr::select(type, estimate, std.error, p.value, ci1, ci2) %&gt;%\n  dplyr::group_by(type) %&gt;%  slice(1) %&gt;% mutate(p.value = round(as.numeric(p.value), 2), \n                                                 estimate = round(as.numeric(estimate), 2),\n                                                 std.error = round(as.numeric(std.error), 2), \n                                                 CI = paste0('(' , round(ci1, 3), ', ', round(ci2, 3), ')' )) %&gt;%\n  dplyr::select(-ci1, -ci2) %&gt;%\n  mutate(p.value = cell_spec(p.value, bold = ifelse(p.value &lt; 0.05, TRUE, FALSE))) %&gt;% \n  dplyr::rename(`Analytical software` = type) %&gt;% \n  kable(escape = F, booktabs = T) %&gt;% \n  kable_minimal(full_width = F,  html_font = \"Source Sans Pro\")\n\n\n\n\n\nAnalytical software\nestimate\nstd.error\np.value\nCI\n\n\n\n\nBESA\n0.18\n0.16\n0.26\n(-0.143, 0.482)\n\n\nBrain Vision Analyser\n0.02\n0.10\n0.81\n(-0.172, 0.212)\n\n\nBrainstorm\n0.15\n0.10\n0.16\n(-0.063, 0.35)\n\n\nCustom scripts\n0.13\n0.08\n0.13\n(-0.036, 0.294)\n\n\nEEGLAB\n0.25\n0.09\n0.01\n(0.079, 0.443)\n\n\nERPLAB\n0.19\n0.10\n0.04\n(0.006, 0.384)\n\n\nFieldTrip\n0.19\n0.08\n0.02\n(0.028, 0.357)\n\n\nLIMO\n0.34\n0.15\n0.02\n(0.049, 0.627)\n\n\nMNE-Python\n-0.05\n0.08\n0.52\n(-0.219, 0.108)\n\n\nSPM\n0.09\n0.14\n0.53\n(-0.197, 0.356)\n\n\nUnfold\n0.08\n0.16\n0.61\n(-0.254, 0.391)"
  },
  {
    "objectID": "src/proficiency.html#proficiency-and",
    "href": "src/proficiency.html#proficiency-and",
    "title": "Proficiency",
    "section": "Proficiency and …",
    "text": "Proficiency and …\n\nTools\n\n\nCode\ncbind(factor_scores[1], data[31]) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"proxy\", \"EEGLAB\")) %&gt;%\n  mutate(EEGLAB = ifelse(EEGLAB ==\"Yes\", 1, 0)) %&gt;% \n  ggplot(., aes(x=as.factor(EEGLAB), y = proxy)) + \n  geom_boxplot() + labs(x = \"EEGLAB\", y = \"Experience\") +  \n  theme_classic()\n\n\n\n\n\nCode\ncbind(factor_scores[1], data[35]) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"proxy\", \"ERPLAB\")) %&gt;%\n  mutate(ERPLAB = ifelse(ERPLAB ==\"Yes\", 1, 0)) %&gt;% \n  ggplot(., aes(x=as.factor(ERPLAB), y = proxy)) + \n  geom_boxplot() + labs(x = \"ERPLAB\", y = \"Experience\") +  \n  theme_classic()\n\n\n\n\n\nCode\ncbind(factor_scores[1], data[41]) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"proxy\", \"Fieldtrip\")) %&gt;%\n  mutate(Fieldtrip = ifelse(Fieldtrip ==\"Yes\", 1, 0)) %&gt;% \n  ggplot(., aes(x=as.factor(Fieldtrip), y = proxy)) + \n  geom_boxplot() + labs(x = \"Fieldtrip\", y = \"Experience\") +  \n  theme_classic()\n\n\n\n\n\nCode\ncbind(factor_scores[1], data[43]) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"proxy\", \"LIMO\")) %&gt;%\n  mutate(LIMO = ifelse(LIMO ==\"Yes\", 1, 0)) %&gt;% \n  ggplot(., aes(x=as.factor(LIMO), y = proxy)) + \n  geom_boxplot() + labs(x = \"LIMO\", y = \"Experience\") +  \n  theme_classic()\n\n\n\n\n\n\n\nNumber of used software\n\n\nCode\nvec &lt;- names(data[25:50]) %&gt;% str_split_i(., \"\\\\? \\\\[\", 2) %&gt;%  str_sub(., 1, -2)\n\nsoftware &lt;- data[25:50] %&gt;%\n    rename_at(vars(colnames(.)), ~ vec) %&gt;% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %&gt;% rowSums() %&gt;% tibble()\n\n\n\n\nCode\ncbind(data.frame(rowSums(software)), factor_scores[1])  %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"n_soft\", \"experience\")) %&gt;% \n  filter(n_soft &gt; 0) %&gt;% \n  ggplot(., aes(x=n_soft, y=experience)) + geom_jitter() + geom_smooth()\n\n\n\n\n\n\n\nCode\ncbind(data.frame(rowSums(software)), factor_scores[1])  %&gt;% \n   rename_at(vars(colnames(.)), ~ c(\"n_soft\", \"experience\")) %&gt;% \n  filter(n_soft &gt; 0) %&gt;% \n  lm(data=., n_soft ~ experience) %&gt;% summary(.)\n\n\n\nCall:\nlm(formula = n_soft ~ experience, data = .)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.6473 -1.2372 -0.3383  0.9372  7.1416 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  3.02985    0.11864  25.539  &lt; 2e-16 ***\nexperience   0.34813    0.07065   4.927 1.71e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.711 on 206 degrees of freedom\nMultiple R-squared:  0.1054,    Adjusted R-squared:  0.1011 \nF-statistic: 24.28 on 1 and 206 DF,  p-value: 1.709e-06\n\n\n\n\nChannels\n\n\nCode\ndata %&gt;% select(23, 24) %&gt;% \n  cbind(., factor_scores[1]) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"measure\", \"analyse\", \"experience\")) %&gt;% \n  filter(analyse &lt; 500) %&gt;% \n  mutate(rate = analyse / measure) %&gt;% \n  ggplot(., aes(x=rate, y=experience)) + \n  geom_point() +                                      \n  stat_smooth(method = \"lm\",\n              formula = y ~ x,\n              geom = \"smooth\") +\n  labs(x =\"analyse / measure\") +\n  theme_classic()\n\n\n\n\n\n\n\nCode\ndata %&gt;% select(23, 24) %&gt;% \n  cbind(., factor_scores[1]) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"measure\", \"analyse\", \"experience\")) %&gt;% \n  filter(analyse &lt; 500) %&gt;% \n  mutate(rate = analyse / measure) %&gt;%\n  lm(rate ~ experience, .) %&gt;% summary()\n\n\n\nCall:\nlm(formula = rate ~ experience, data = .)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.7854 -0.3809  0.0336  0.3843  0.5565 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  0.57967    0.02740  21.156  &lt; 2e-16 ***\nexperience   0.05554    0.01615   3.439 0.000708 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3942 on 205 degrees of freedom\nMultiple R-squared:  0.05454,   Adjusted R-squared:  0.04992 \nF-statistic: 11.82 on 1 and 205 DF,  p-value: 0.0007079\n\n\n\n\nn_plot\n\n\nCode\nn_soft &lt;- data[25:50] %&gt;%\n    rename_at(vars(colnames(.)), ~ vec) %&gt;% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0))) %&gt;% rowSums() %&gt;% tibble()\n\ncbind(n_soft, factor_scores[1]) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"n_soft\", \"experience\")) %&gt;% \n  ggplot(., aes(x=n_soft, y=experience)) + \n  geom_point() +                                      \n  stat_smooth(method = \"lm\",\n              formula = y ~ x,\n              geom = \"smooth\") +\n  labs(x =\"n_soft\") +\n  theme_classic()\n\n\n\n\n\n\n\njet awareness\n\n\nCode\ncbind(factor_scores[1], data[117]) %&gt;% \n  rename_at(vars(colnames(.)), ~ c(\"proxy\", \"jet_aware\")) %&gt;%\n  mutate(jet_aware = ifelse(jet_aware ==\"Yes\", 1, 0)) %&gt;% \n  ggplot(., aes(x=as.factor(jet_aware), y = proxy)) + \n  geom_boxplot() + labs(x = \"Aware or not abour colorbar controvercies\", y = \"Experience\") +  \n  theme_classic()"
  }
]
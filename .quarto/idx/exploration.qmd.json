{"title":"exploration","markdown":{"yaml":{"title":"exploration","format":{"html":{"toc":true,"html-math-method":"katex","css":"styles.css"}},"editor":"visual"},"headingText":"Setup","containsRefs":false,"markdown":"\n\n\n```{r, message= FALSE, warning=FALSE}\n# upload to the git\nlibrary(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\n\n\n```\n\n```{r, message= FALSE, warning=FALSE}\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\n```\n\n## Bio stats\n\nCountry\n\n```{r}\ndata.frame(table(data[8])) %>% arrange(desc(Freq)) %>% dplyr::rename(country_work = !!names(.)[1]) %>%\n    ggplot(data = ., aes(y = reorder(country_work, Freq),  x= Freq)) +\n    geom_bar(stat=\"identity\") + ylab(\"Country of work for participant\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2)+ theme(legend.position=\"none\")\n\n```\n\nField\n\n```{r}\nfield <- as.data.frame(table(data[9])) %>% arrange(desc(Freq)) %>% head(3)\nfield$Freq[1] <- field$Freq[1] + 1 # from Others\nfield$Freq[2] <- field$Freq[2] + 1\nfield$Freq[3] <- field$Freq[3] + 1\nfield %>% dplyr::rename(area = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = reorder(area, Freq),  y= Freq, fill = area)) +\n    geom_bar(stat=\"identity\") + xlab(\"Area of research\") +\n    geom_text(aes(label = Freq), \n    vjust = -0.2)+ theme(legend.position=\"none\")\n```\n\n```{r, include=FALSE}\nas.data.frame(na.omit(data[10])) \n# recode!!! \n```\n\n### Area\n\n```{r}\nt <- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt <- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\n\narea <- data.frame(matrix(tt)) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), \"affective neuroscience\", words)) %>%  \n  #mutate(words =ifelse(str_detect(.[[1]], 'spatial'), \"spatial\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'memory'), \"memory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), \"auditory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognition|consciousness|meditation|cognitive control|self|executive functions'), \"cognitive control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), \"deep brain stimulation\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), \"decision making\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), \"ageing\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'social'), \"social cognition\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), \"olfaction\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), \"language and speech\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'bci'), \"bci\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), \"sleep\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), \"time\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|perception'), \"attention and perception\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'vis'), \"vision\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development'), \"development\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), \"motor control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), \"mental disorders\", words)) %>%   \n  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), \"dsp\", words))\n\n   \narea %>% group_by(words) %>% dplyr::summarise(Freq = n()) %>% \n  data.frame(.)  %>% mutate(words = as.character(words)) %>%  #arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(words, Freq),  x= Freq)) +\n    geom_bar(stat=\"identity\") + ylab(\"Words\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2)\n\n```\n\n### Method\n\n```{r}\nmethod <- data[14:17]\nch <- colnames(method)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\[\", 2) \ncolnames(method) <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd <- data.frame(rowSums(t(data.frame(foreach(i = colnames(method)) %do% ifelse(method[i]==\"Yes\", 1, 0))))) \nd <- tibble::rownames_to_column(d, \"plots\") \ncolnames(d) <- c(\"method\", \"sum_scores\")\nd %>% arrange(desc(sum_scores)) %>% \n    ggplot(., aes(x = reorder(method, sum_scores), y = sum_scores, fill = method)) +\n    geom_col(stat = \"identity\") + labs(x = \"Method\", y = \"Value\", fill = \"Method\") +\n    theme_classic() + theme(legend.position=\"none\")\n```\n\n### Experience\n\nPapers\n\n```{r}\ndata[19] %>% dplyr::rename(papers = !!names(.)[1]) %>% filter(papers < 100) %>%  ggplot(data = ., aes(papers)) +\n  geom_histogram() +\n  labs(x =\"How many published papers/preprints do you have, where you used EEG, MEG or iEEG analysis?\")\n# PCA for clustering it \n```\n\nPosition\n\n```{r}\n#na.omit(data[13]) # recode Others\nas.data.frame(table(na.omit(data[12]))) %>% dplyr::rename(position = !!names(.)[1]) %>%\n  arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(position, Freq),  x= Freq, fill = position)) +\n    geom_bar(stat=\"identity\") + ylab(\"Position\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2)+ theme(legend.position=\"none\")\n```\n\nYears\n\n```{r}\ndata %>% filter(.[[20]] < 50) %>% ggplot(data = ., aes_(as.name(names(data)[20]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 30, 5)) +\n    labs(x =\"Years of experience with EEG, MEG, or iEEG analysis\")\n```\n\nSelf-assessed level\n\n```{r}\ntable(data[21]) %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = level, y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Self-assessed level\") +\n    geom_text(aes(label = Freq), vjust = -0.2) + theme(legend.position=\"none\") +\n    scale_x_discrete(limits = c(\"Beginner\", \"Intermediate\", \"Expert\"))\n\n```\n\nCode contribution\n\n```{r}\ntable(data[22])  %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = reorder(level, Freq),  y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Code contribution\") +\n    geom_text(aes(label = Freq), vjust = -0.2) + theme(legend.position=\"none\")\n```\n\n### Channels\n\nHow many channels do you typically measure?\n\n```{r}\ndata %>% ggplot(data = ., aes_(as.name(names(data)[23]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30)) +\n    labs(x =\"How many channels do you typically measure?\")\n```\n\nHow many channels do you typically measure?\n\n```{r}\ndata %>% filter(.[[24]] < 500) %>% ggplot(data = ., aes_(as.name(names(data)[24]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30))+\n    labs(x =\"How many channels of those you measured do you typically analyse?\")\n\n# plots should be combined\n```\n\n## Software usage\n\n#### frequency\n\n```{r}\nvec <- names(data[25:49]) %>% str_split_i(., \"\\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:49] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\n\nd <- data.frame(rowSums(t(software))) %>%  tibble::rownames_to_column(., \"soft\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))  %>% arrange(., desc(sum_scores)) \nd \n# piechart and cooccuerence plot \n```\n```{r}\n# how many items were choosen\ntable(data.frame(rowSums(software)))\n```\n\n```{r}\nna.omit(data[51])\n```\n\n#### cooccurence\n\n```{r}\n# how to order by diagonal matrix \nsoftware <- data[25:49]\nch <- colnames(software)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\[\", 2) \nch1 <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd1 <- foreach(i = colnames(software)) %do% ifelse(software[i]==\"Yes\", 1, 0)\nd <- crossprod(matrix(unlist(d1), ncol = 25))\nrownames(d) <- ch1\n#d <- data.frame(d) \n#d$diag <- rowSums(d)\n#d <- d[order(d$diag),] %>% dplyr::select(-diag)\ncolnames(d) <- rownames(d)\n#d <- as.matrix(d)\n\nmelt(d) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n                      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=-0.2))\n\n\n```\n\n## Important features\n\n```{r}\nfeatures <- data[52:60]\nch <- colnames(features)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\[\", 2) \ncolnames(features) <- foreach(i = ch1) %do% str_sub(i, 1, -2)\n\nfeatures <- features %>%  mutate_at(c(colnames(features)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 ))) %>% \n  colSums(., na.rm =T) %>% data.frame(.) %>%  tibble::rownames_to_column(., \"Feature\") %>% \n  arrange(desc(.))\ncolnames(features) <- c(\"Feature\", \"sum_scores\")\nfeatures\n# divide by number of people \n# individual plots\n# correlation with experience factor\n```\n\n## Familiarity with plots\n\n```{r}\nvec <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_image\", \"parallel\", \"channel_image\")\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plot\", \"sum_scores\"))  %>% \n  arrange(., desc(sum_scores)) %>% \n  ggplot(data = ., aes(y = reorder(plot, sum_scores), x= sum_scores)) +\n  geom_bar(stat=\"identity\") + ylab(\"plot\")\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plot\", \"Yes\")) %>% mutate(No = nrow(data) - Yes) \n\n# #  two bars knowing and using\n```\n\n## Have you ever plotted this king of figure\n\n```{r}\nvec <- names(data[ , grepl( \"Have you ever\" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nvec\n```\n\n```{r}\n\ndo_vec <- function(vec, data){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., answer, score, `N.A`:`Yes`, factor_key=TRUE) %>% \n  mutate(answer = str_replace(answer, 'N.A', \"No\"))\n\ntab %>% \n  ggplot(., aes(x = plots, y = score, fill = answer)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic()\n\n\n```\n\n## Familiar and plotted\n\n```{r}\nvec <- names(data[ , grepl( \"Have you ever\" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_img\", \"parallel\", \"channel_img\")\n\ndo_vec <- function(vec, data, plot_names){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec[2:length(vec)], data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>% merge(., tab)  %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of familiarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2)\n```\n\n## Up or down\n\n```{r}\ntable(data[79])\n```\n\n## Error bars\n\n```{r}\ntable(data[74])\n```\n\n```{r}\ndata[75] %>%  filter(!is.na(.)) %>% table()\n```\n\n```{r}\ndata[76] %>%  filter(!is.na(.)) %>% table()\n```\n\n## Baseline\n\n### periods\n\n```{r}\ntable(abs(data[77])) %>% data.frame() %>%  dplyr::rename(baseline = !!names(.)[1]) %>%\n    ggplot(data = ., aes(y = baseline, x= Freq)) +\n    geom_bar(stat=\"identity\") + ylab(\"baseline\")+  scale_x_continuous(breaks=seq(0, 60, 5))\n```\n\n### justification\n\n```{r}\n# depends on what??\n# manual categorization of depending\nj <- data %>%    \n  dplyr::rename(q = !!names(.)[78]) %>% filter(!is.na(q)) %>% dplyr::select(q) %>% \n  mutate(q = tolower(q), \n         q = gsub('.*depends in*.', 'depends on ', q),\n         dependson = ifelse(grepl(\"depends\", q), q, NA)) %>% \n  separate(dependson, into = c(\"a\",\"b\"), sep = \"on \") %>% \n  dplyr::select(-a) %>% \n  dplyr::rename(dependson = b) #%>% \nj\n  #View()\n```\n\n## Colorbars\n\n```{r}\ntable(data[117])\ntable(data[118])\ntable(data[119])\n\n```\n\n## Feedback\n\n```{r}\nd <- data[120] %>% dplyr::rename(feed = !!names(.)[1]) %>%  filter(!is.na(feed), feed != \"-\") #%>% View()\n```\n\n```{r, eval = FALSE, echo = FALSE}\ncorpus <- VCorpus(VectorSource(d))\ncorpus <- corpus %>%\n  tm_map(removeNumbers) %>%\n  tm_map(removePunctuation) %>%\n  tm_map(stripWhitespace) %>%\n  tm_map(content_transformer(tolower)) %>%\n  tm_map(removeWords, stopwords(\"english\")) %>%\n  tm_map(stemDocument)\n\ncorpus[[1]][[1]][1]\n  \ndtm <- DocumentTermMatrix(corpus)\nlda <- LDA(dtm, k = 10)\nterms(lda, 10)\n\n\n\n```\n\n## Time in minutes\n\n```{r}\nmedian(as.numeric(data$`Total time`)) / 60\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"html-math-method":"katex","output-file":"exploration.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","editor":"visual","theme":"cosmo","title":"exploration"},"extensions":{"book":{"multiFile":true}}}}}
{"title":"exploration","markdown":{"yaml":{"title":"exploration","format":{"html":{"toc":true,"html-math-method":"katex","css":"styles.css"}},"editor":"visual"},"headingText":"Setup","containsRefs":false,"markdown":"\n\n\n```{r, message= FALSE, warning=FALSE}\n# upload to the git\nlibrary(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\nlibrary(kableExtra)\nlibrary(stringr)\n\n```\n\n```{r, message= FALSE, warning=FALSE}\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\n```\n\n\n## Channels\n\nHow many channels do you typically measure?\n\n```{r, warning=FALSE, message=FALSE}\ndata %>% ggplot(data = ., aes_(as.name(names(data)[23]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30)) +\n    labs(x =\"How many channels do you typically measure?\") + theme_classic()\n```\n\nHow many channels do you typically measure?\n\n```{r, warning=FALSE, message=FALSE}\ndata %>% filter(.[[24]] < 500) %>% ggplot(data = ., aes_(as.name(names(data)[24]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30))+\n    labs(x =\"How many channels of those you measured do you typically analyse?\") + theme_classic()\n\n# plots should be combined\n```\n\n## Software usage\n\n#### frequency\n\n```{r}\nna.omit(data[51]) %>% nrow()\n \n\nother <- c(rep(\"Custom scripts\",each=9), \"4DBTi\", rep(\"letswave\", 3), \"mTRF\", \"RAGU\", \"IGOR Pro\", \"EEGProcessor\", \"ELAN\", \"WinEEG\") %>% table(.) %>% data.frame(.) %>% rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))\n```\n\n```{r, warning=FALSE}\nvec <- names(data[25:50]) %>% str_split_i(., \"\\\\? \\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:50] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\n\nd <- data.frame(rowSums(t(software))) %>%  tibble::rownames_to_column(., \"soft\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))   %>% \n  rbind(., other) %>% dplyr::group_by(soft) %>% dplyr::summarise(sum_scores = sum(sum_scores)) %>% \n  arrange(., desc(sum_scores))\n\nd  %>% filter(sum_scores >= 1) %>% mutate(soft = ifelse(sum_scores >= 3, as.character(soft), \"_Others\")) %>% group_by(soft) %>% \n  dplyr::summarise(sum_scores = sum(sum_scores)) %>% \n    ggplot(data = ., aes(y = reorder(soft, sum_scores),  x= sum_scores, fill = soft)) +\n    geom_bar(stat=\"identity\") + labs(x= \"Scores\", y=\"Soft\") +\n    geom_text(aes(label = sum_scores), \n    hjust = -0.2) + theme_classic() + theme(legend.position=\"none\",\n                                            axis.text.y = element_text(size = 14))\n\n```\n\n\n#### cooccurrence\n\n```{r, warning=FALSE}\n# how to order by diagonal matrix \n# how to add others\nsoftware <- data[25:50]\nch <- colnames(software)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\? \\\\[\", 2) \nch1 <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd1 <- foreach(i = colnames(software)) %do% ifelse(software[i]==\"Yes\", 1, 0)\nc <- crossprod(matrix(unlist(d1), ncol = 26))\nrownames(c) <- ch1\ncolnames(c) <- rownames(c)\n\ndiag.order <- order(diag(c), decreasing = FALSE)\nmat_reordered <- c[diag.order, diag.order]\n\nmelt(mat_reordered) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) \n\n```\n\n```{r}\n\nzero_rows <- rowSums(mat_reordered) == 0\nzero_cols <- colSums(mat_reordered) == 0\n\n# Create a new matrix array without the rows and columns consisting only of zeroes\nnew_matrix <- mat_reordered[!zero_rows, !zero_cols]\nmelt(new_matrix) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) \n```\n\n## Important features\n\n```{r, warning=FALSE}\n\ndata[52:60] %>% rename_with(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %>% \n                                        str_sub(., 1, -2) ) %>%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 ))) %>% \n  colSums(., na.rm =T) %>% data.frame(.) %>%  tibble::rownames_to_column(., \"Feature\") %>% \n  filter(!is.na(Feature)) %>% \n  arrange(desc(.)) %>% rename_at(vars(colnames(.)), ~ c(\"Feature\", \"sum_scores\")) %>% group_by(Feature) %>% \n  dplyr::mutate( mean = round(sum_scores / nrow(data), 2)) %>%   kbl(escape = F, booktabs = T) %>%\n  kable_styling(\"striped\", position = \"center\",) %>% kable_classic(full_width = F, html_font = \"Arial\")\n\n```\n\n\n```{r, warning=FALSE}\nfeature <- data[52:60] %>% rename_all(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %>% \n                                        str_sub(., 1, -2) ) %>%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 ))) %>% \n  pivot_longer(cols = everything(), names_to = \"name\", values_to = \"value\") %>% \n  mutate(index = as.integer(factor(name)))\n\n#feature  %>% distinct(., index, name) %>% arrange(., index)\n\nfeature %>% #filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  geom_density(aes(x = value, fill = str_wrap(name)), bw = 0.5) + \n  labs(x = \"score\", fill=\"Features\")  + theme_classic()  +\n  theme(legend.position = \"none\", legend.key.height=unit(2, \"cm\")) + facet_wrap(~str_wrap(name, 20))\n\n```\n```{r}\nfeature %>% filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  geom_density(aes(x = value, color = str_wrap(name, 20)), bw = 0.5) + \n  labs(x = \"score\", color = \"Features\")  + theme_classic() +\n  theme(legend.position = \"none\", \n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14)) + \n  facet_wrap(~str_wrap(name, 20)) + labs(x=\"Scores on Likert scale\", y=\"Density\") \n```\n```{r}\nfeature %>% filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  geom_density(aes(x = value, color = str_wrap(name, 20)), bw = 0.5) + \n  labs(x = \"score\", color = \"Features\")  + theme_classic() +\n  theme(\n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14))  + \n  labs(x=\"Scores on Likert scale\", y=\"Density\") \n```\n\n```{r}\nfeature %>% filter(index %in% c(8, 9)) %>% \n  ggplot() + \n  geom_density(aes(x = value, color = str_wrap(name, 20)), bw = 0.5) + \n  labs(x = \"score\", color =\"Features\")  + theme_classic() +\n  theme(\n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14))  + \n    labs(x=\"Scores on Likert scale\", y=\"Density\") \n```\n\n```{r}\nfeature %>% filter(index %in% c(1, 3, 5)) %>% \n  ggplot() + \n  geom_density(aes(x = value, color = str_wrap(name, 20)), bw = 0.5) + \n  labs(x = \"score\", color =\"Features\") + theme_classic() +\n  theme(\n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14))  + \n    labs(x=\"Scores on Likert scale\", y=\"Density\") \n```\n\n\n## Familiarity with plots\n#### Recognition\n\n```{r, warning=FALSE}\nvec <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_image\", \"parallel\", \"channel_image\")\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plot\", \"sum_scores\"))  %>% \n  arrange(., desc(sum_scores)) %>% \n  ggplot(data = ., aes(y = reorder(plot, sum_scores), x= sum_scores, fill=plot)) +\n  geom_bar(stat=\"identity\") + ylab(\"plot\") + theme_classic() + \n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Select ERP plot you are familiar with\") \n\n```\n\n#### Plotting\n\n```{r}\nvec <- names(data[ , grepl( \"Have you ever plotted\" , names(data))])\n```\n\n```{r}\n\ndo_vec <- function(vec, data){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., answer, score, `N.A`:`Yes`, factor_key=TRUE) %>% \n  mutate(answer = str_replace(answer, 'N.A', \"No\"))\n\ntab %>% \n  ggplot(., aes(x = plots, y = score, fill = answer)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic() +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Have you ever plotted this kind of figure?\")\n\n\n\n```\n\n#### Recognition and plotting\n\n```{r, warning=FALSE}\nvec <- names(data[ , grepl( \"Have you ever plotted \" , names(data))]) #%>% str_split_i(., \"\\\\.....\", 2) \nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_img\", \"parallel\", \"channel_img\")\n\ndo_vec <- function(vec, data, plot_names){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>% merge(., tab)  %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of familiarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2) +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Familiarity with plots\")\n```\n\n## Up or down\n\n```{r}\ntable(data[79]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n    ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"In ERP plot, should positive voltages be plotted upwards, or downwards?\")\n```\n\n## Error bars\n\n```{r}\ntable(data[74]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"Scores\")) %>% \n    ggplot(., aes(x = position, y = Scores, fill = as.factor(Scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) +\n      \n  geom_text(aes(label = Scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"In your paper, did you published ERP plot with error bars?\")\n```\n\n```{r}\ndata[75] %>%  filter(!is.na(.)) %>% table()  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n    ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n   theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) + ylab(\"Scores\") +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"In your figure, what did error bars depicted?\")\n```\n\n```{r}\ndata[76] %>%  filter(!is.na(.)) %>% table()\n```\n\n## Baseline\n\n#### periods\n\n```{r}\ntable(abs(data[77])) %>% data.frame() %>%  dplyr::rename(baseline = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = baseline, y= Freq)) +\n    geom_bar(stat=\"identity\") + xlab(\"Recomended baseline in msec\") +  \n  scale_y_continuous(breaks=seq(0, 60, 5)) + theme_classic() +\n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = Freq, group = baseline), position = position_dodge(width = .9), vjust = -0.2)\n```\n\n#### justification\n\n```{r}\n# If you don't want to provide a number on previous question, please, provide a justification\n# depends on what??\n# manual categorization of depending\nj <- data %>%    \n  dplyr::rename(q = !!names(.)[78]) %>% filter(!is.na(q)) %>% dplyr::select(q) %>% \n  mutate(q = tolower(q)) %>% mutate(q = gsub('depends in|depending on', 'depends on', q),\n         dependson = ifelse(grepl(\"depends|depend\", q), q, NA)) %>% \n  separate(dependson, into = c(\"a\",\"b\"), sep = \"depends on |depend on \") %>% \n  dplyr::select(-a) %>% \n  dplyr::rename(dependson = b) #%>% \nj %>% filter(is.na(dependson))  %>% select(-dependson)\nj %>% filter(!is.na(dependson)) %>% select(dependson)\n  #View()\n```\n\n## Colorbars\n\n```{r}\ntable(data[117]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Are you aware of perceptual controvericies of colorbars?\")\n```\n\n```{r}\ntable(data[118]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Do you know about two-dimensional colorbars?\")\n```\n\n```{r}\nrbind(table(data[117]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"answer\", \"scores\")) %>% \n  mutate(questions = \"Awareness about\\ncontrovercies of\\ncolorbars\")%>%\n  mutate(percent_score = round(scores / sum(scores) * 100)),\n\ntable(data[118]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"answer\", \"scores\")) %>% \n  mutate(questions = \"Awareness about\\n2d colorbars\") %>%\n  mutate(percent_score = round(scores / sum(scores) * 100))\n) %>% \n  \n  ggplot(., aes(x = percent_score, y = questions, fill = answer)) +\n  geom_col(stat = \"identity\", width = 0.5) +\n   geom_text(aes(label = paste0(percent_score, \"%\", \"\\n(\", answer, \")\")), \n            position = position_stack(vjust = 0.5), size = 4) + \n    theme_classic()+ \n  theme(plot.title = element_text(hjust = 0.5),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"none\",\n        legend.title = element_blank(),\n        axis.title.y=element_blank()\n        ) +\n  scale_color_manual(values = c(\"#FF6666\", \"#66CC66\")) +\n  scale_fill_manual(values = c(\"#FF6666\", \"#66CC66\"))  +\n  labs(x=\"Percent score\")\n```  \n\n\n```{r}\ntable(data[119])  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(stat = \"identity\", width=0.5)  + theme_classic() +\n     theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) + ylab(\"Scores\") +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Would you like to use a two-dimensional colorbar\\nin your publications, if it was easily available?\")\n```\n\n## Feedback\n\n```{r}\nfeed <- data[120] %>% dplyr::rename(feed = !!names(.)[1]) %>%  filter(!is.na(feed), feed != \"-\") #%>% View()\nfeed  %>%\n  filter(!row_number() %in% c(3, 14, 17, 32, 37, 41))# just appreciation\n```\n\n```{r, eval = FALSE, echo = FALSE}\ncorpus <- VCorpus(VectorSource(d))\ncorpus <- corpus %>%\n  tm_map(removeNumbers) %>%\n  tm_map(removePunctuation) %>%\n  tm_map(stripWhitespace) %>%\n  tm_map(content_transformer(tolower)) %>%\n  tm_map(removeWords, stopwords(\"english\")) %>%\n  tm_map(stemDocument)\n\ncorpus[[1]][[1]][1]\n  \ndtm <- DocumentTermMatrix(corpus)\nlda <- LDA(dtm, k = 10)\nterms(lda, 10)\n\n\n\n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"html-math-method":"katex","output-file":"exploration.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","editor":"visual","theme":"cosmo","title":"exploration"},"extensions":{"book":{"multiFile":true}}}}}
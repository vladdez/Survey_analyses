{"title":"3.plot_breakdown","markdown":{"yaml":{"title":"3.plot_breakdown","format":"html","editor":"visual"},"headingText":"Setup","containsRefs":false,"markdown":"\n\n\n```{r, message= FALSE, warning=FALSE}\n# upload to the git\nlibrary(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\nlibrary(kableExtra)\nlibrary(stringi)\n```\n\n```{r, message= FALSE, warning=FALSE}\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\nvec <- names(data[ , grepl( \"How would you \" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nvec\n```\n\n\n```{r}\nword_preproc <- function(data, N){\n  #N = 69\n  tmp <- data %>% filter(!is.na(.[[N]])) %>% select(., N) %>% dplyr::rename(words = !!names(.)[1]) %>% mutate(words = tolower(words)) %>% \n    #mutate(words = gsub(\" \\\\(or.*\", \"\", words)) %>% mutate(words = gsub(\", or.*\", \"\", words)) %>% \n    mutate(words = stri_replace_all_regex(words,\n                                  pattern=c(\" \\\\(.*\", \", or.*\", \" across\", \" with\", \" at\", \" by\", \" over\", \" of\", \" per\", \"at\", \" across\", \" accross\"),\n                                  replacement=c(''),\n                                  vectorize=FALSE))\n     \n  t <- foreach(i = 1:nrow(tmp)) %do% tokenize_words(tmp$words)\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"like\", \"s\")\n  t2 <- foreach(i = 1:length(t)) %do% t[[1]][[i]][!(t[[1]][[i]] %in% stop_list)]\n  #t21 <- foreach(i = 1:length(t2)) %do% map(t2[i][[1]], singularize)\n  t3 <- foreach(i = 1:length(t2)) %do% paste(sort(unlist(t2[i])), collapse = ' ') \n  t4 <- data.frame(matrix(t3)) %>% dplyr::rename(words = !!names(.)[1])\n  return(t4)\n}\n\n```\n\n## Plot naming\n\nThose who named a plot somehow and those who failed to do that\n\n```{r, warning=FALSE}\nna_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|why'), \"NA\", as.character(words))) %>%\n      mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n      table(.) %>% \n      data.frame(.) %>% filter(words != \"NA\") %>% \n      summarise(n = sum(Freq))  \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- c(\"line plot\",\"butterfly\",\"topoplot\",\"topoarray\",\"topomap\",\"ERP image\",\"parallel\", \"channel image\")\n    return(temp)\n}\n\nnum_named <- na_table(data, vec)\nslice(num_named, 1)  %>% \n  gather(., plots, succeeded, `line plot`:`channel image`, factor_key=TRUE) %>% \n  mutate(failed = nrow(data) - succeeded) %>% \n  gather(., res, score, succeeded:failed, factor_key=TRUE) %>% \n\n  ggplot(., aes(x = plots, y = score, fill = res)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic() + theme(axis.title.x=element_blank(), plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = score, group = res), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Plot naming\")\n\n\n```\n\n#### Top 10 plot names \n\n\n```{r}\n# does it work?????\nfreq_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n     # i = 112\n      \n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|know|why|remember'), \"NA\", as.character(words)),\n      words = ifelse(nchar(words)==0, NA, words),\n      words = ifelse(str_detect(words, 'erps|ep|erp plot|event related potential'), \"erp_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words)),\n      words = str_replace(words, 'responses', \"response\"),  \n      words =  gsub('channels|chanel', 'channel', words) ,\n      \n      words = ifelse(str_detect(words, '.*grand average.*'), \"grand_average_erp_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'classic'), \"classic_erp_plot\", as.character(words)),\n      words =  gsub('mean|averaged', 'average', words),\n      words =  gsub('course time', 'timecourse', words),\n      words =  gsub('.*timecourse.*', 'time_course_plot', words),\n      words =  gsub('.*erp waveform.*', 'erp_waveform', words),\n      words =  gsub('average condition.*', 'average_condition_erp', words),\n      words =  gsub('electrode', 'channel', words),\n      words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'spaghetti'), \"spaghetti_plot\", as.character(words)),\n      words = ifelse(str_detect(words, 'all channels'), \"all_channels_erp\", as.character(words)),\n      words = ifelse(str_detect(words, 'single channel erp|single erp|erp of single channels'), \"single_channel_erp\", as.character(words)),\n      words = ifelse(str_detect(words, '.*channel erp.*'), \"channel_erp\", as.character(words)),\n      words = ifelse(str_detect(words, 'amplitude'), \"amplitude\", as.character(words)),\n      words =  gsub('x |multi |muti |multeple ', 'multiple ', words),\n      words =  gsub('several|each|multeple', 'multiple', words),\n              words =  gsub('erpimage', 'erp image', words),\n      words =  gsub('heat map', 'heatmap', words),\n      words =  gsub('topomaps', 'topomap', words),\n      words =  gsub('topoplots', 'topoplot', words),\n      words =  gsub('epochs', 'epoch', words),\n      words =  gsub('trials', 'trial', words),\n      words =  gsub('topographical', 'topographic', words)\n      ) %>% \n      table(.) %>% \n      data.frame(.) %>%  mutate(n = lengths(gregexpr(\"\\\\W+\", words)) + 1) %>% \n        filter(n < 10) %>% dplyr::select(-n) %>% filter(words != \"\") %>% \n      arrange(desc(Freq))  %>%  head(10) %>% \n      unite(word_freq, c(\"words\", \"Freq\")) %>%  filter(!grepl(\"NA\", word_freq))\n      if (length(temp1) < 10){\n        na_frame <- as.data.frame(matrix(NA, nrow = 10, ncol = 1))\n        names(na_frame) <- names(temp1)\n        temp1 <- rbind(temp1, na_frame)  %>%  head(10)\n      }\n      \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- c(\"line plot\",\"butterfly plot\",\"topoplot\",\"topoplot array\",\"topographic map\",\"ERP image\",\"parallel plot\",\"channel image\")\n    return(temp)\n}\n\ntop10 <- freq_table(data, vec)\ntop10 %>% \n  kbl() \n\n# cut after prepositions\n# remove those with 1 voice\n#is sorting is really needed? \n\n \n```\n<details>\n  <summary>For each case separately</summary>\n  \n#### 1\n\n```{r}\n# or - slipt and take first one\nword_preproc(data, 69)  %>%\n  mutate(words = ifelse(str_detect(words, 'sure|confus|aware|do not'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, '.*grand average.*'), \"grand_average_erp_plot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'average erp|averaged erp'), \"average_erp_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'erps|ep|erp plot|event related potential'), \"erp_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'classic'), \"classic_erp_plot\", as.character(words))) %>%\n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('mean|averaged', 'average', words)) %>% \n  mutate(words =  gsub('.*time course.*', 'time_course_plot', words)) %>% \n  mutate(words =  gsub('.*erp waveform.*', 'erp_waveform', words)) %>%\n  mutate(words =  gsub('average condition.*', 'average_condition_erp', words)) %>%\n   \n  table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) #%>%   View()\n```\n\n\n#### 2\n\n```{r}\nword_preproc(data, 80)  %>% \n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'terfly|butte'), \"butterfly_plot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'spaghetti'), \"spaghetti_plot\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'sure|confus|aware|do not'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'all channels'), \"all_channels_erp\", as.character(words))) %>%\n   mutate(words = ifelse(str_detect(words, 'multiple channel erp|multi channel erp'), \"multiple_channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'single channel erp|single erp|erp of single channels'), \"single_channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, '.*channel erp.*'), \"channel_erp\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'amplitude'), \"amplitude\", as.character(words))) %>%\n  mutate(words =  gsub('several|each|x |multi |muti |multeple ', 'multiple', words)) %>% \n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('.*time course.*', 'time_course_plot', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n\n```\n\n#### 3\n\n```{r}\nword_preproc(data, 85) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|unclear'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n\n```\n\n#### 4\n\n```{r}\nword_preproc(data, 90) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>% \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|unclear'), \"NA\", as.character(words))) %>%\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n\n```\n\n#### 5\n\n```{r}\nword_preproc(data, 97)  %>% \n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ep', 'erp', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly'), \"NA\", as.character(words))) %>%\n  \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n\n```\n\n#### 6\n\n```{r}\nword_preproc(data, 102)  %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ersp', 'erp', words)) %>% \n  mutate(words =  gsub('erpimage', 'erp image', words)) %>% \n  mutate(words =  gsub('heat map', 'heatmap', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words =  gsub('epochs', 'epoch', words)) %>% \n  mutate(words =  gsub('trials', 'trial', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good'), \"NA\", as.character(words))) %>%\n  \n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n\n```\n\n#### 7\n\n```{r}\nword_preproc(data, 105)  %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words =  gsub('electrode', 'channel', words)) %>% \n  mutate(words =  gsub('several', 'multiple', words)) %>% \n  mutate(words =  gsub('each', 'multiple', words)) %>% \n  mutate(words =  gsub('multi ', 'multiple ', words)) %>% \n  mutate(words =  gsub('muti ', 'multiple ', words)) %>%\n  mutate(words =  gsub('multeple chanel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('multichannel', 'multiple channel', words)) %>%\n  mutate(words =  gsub('event related potential', 'erp', words)) %>% \n  mutate(words =  gsub('timecourse', 'time course', words)) %>%\n  mutate(words =  gsub('channelplot', 'channel plot', words)) %>%\n  \n  mutate(words =  gsub('erps|ersp', 'erp', words)) %>% \n  mutate(words =  gsub('erpimage', 'erp image', words)) %>% \n  mutate(words =  gsub('heat map', 'heatmap', words)) %>% \n  mutate(words =  gsub('responses', 'response', words)) %>% \n  mutate(words =  gsub('channels', 'channel', words)) %>% \n  mutate(words =  gsub('averaged', 'average', words)) %>% \n  mutate(words =  gsub('topomaps', 'topomap', words)) %>% \n  mutate(words =  gsub('topoplots', 'topoplot', words)) %>% \n  mutate(words =  gsub('epochs', 'epoch', words)) %>% \n  mutate(words =  gsub('trials', 'trial', words)) %>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good'), \"NA\", as.character(words))) %>%\n table(.) %>% \n  data.frame(.) %>% filter(words != \"NA\") %>%  #View()\n  arrange(desc(Freq)) %>%  head(10)\n\n\n```\n\n#### 8\n\n```{r}\nword_preproc(data, 112)  %>%\n\n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'don|sure|useless|not|ugly|x|good|remember|idea|nan'), \"NA\", as.character(words))) %>%\n  \n # filter(words != \"NA\") %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq)) #%>% View()\n```\n\n</details> \n\n## Frequency of tool usage\n\n```{r}\nvec <- names(data[ , grepl( \".*Which plotting\" , names(data))]) %>% str_split_i(., \"\\\\]\", 2) %>% \n  str_split_i(., \"\\\\...\", 2) %>% as.numeric()\nvec\n```\n\n```{r}\nword_preproc_tool <- function(data, N, lim){\n  N = 71\n  #lim = 10\n  tmp <- data %>% dplyr::select(N) %>% filter(!is.na(.)) %>% dplyr::rename(words = !!names(.)[1]) %>% \n    mutate(words = ifelse(str_detect(words, 'own|costum'), \"custom\", as.character(words))) %>% \n  mutate(n = lengths(gregexpr(\"\\\\W+\", words)) + 1) %>% arrange(desc(n))\n  rest <- tmp %>% filter(n >= lim) %>% dplyr::select(words)\n  tmp <- tmp %>% filter(n < lim) %>% dplyr::select(words)\n  \n  t <- foreach(i = 1:nrow(tmp)) %do% strsplit(tmp[[1]][i], \",|/|\\\\|+| and |&| or |\\\\n|\\\\r|;\")\n  tul <- foreach(i = 1:nrow(tmp)) %do% unlist(t[[i]])\n  tul1 <- unlist(tul)\n  tul2 <- tul1[tul1!=\"\"]\n  tul2[tul2==\"-\"] <- NA\n  tul2 <- na.omit(tul2)\n  \n  #t <- foreach(i = 1:nrow(tmp)) %do% tokenize_words(as.character(tmp[i, N]), strip_punct = FALSE)\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"by\", \"over\", \"of\", \"per\", \"for\", \"like\", \"s\", \"at\", \"code\", \"script\", \"recently\", \"my\", \"in\", \"written\", \"using\", \"built\", \"function\", \"plot\", \"with\",  \"itself\", \"scripting\", \"scrip\", \"scripts\", \"basic\")#, \"custom\")\n  t1 <- foreach(i = 1:length(tul2)) %do% tokenize_words(as.character(tul2[i]))\n  \n  \n  t2 <- foreach(i = 1:length(t1)) %do% map(t1[i][[1]], singularize)\n  t21 <- foreach(i = 1:length(t2)) %do% tokenize_words(as.character(t2[i][[1]]))\n  t22 <- foreach(i = 1:length(t21)) %do% t21[i][[1]][[1]][!(t21[i][[1]][[1]] %in% stop_list)]\n  t3 <- foreach(i = 1:length(t22)) %do% paste((unlist(t22[i])), collapse = ' ') \n  t4 <- data.frame(matrix(t3)) #%>% dplyr::rename(words = !!names(.)[1])\n  return(c(t4, rest))\n}\n```\n\n#### 1\n\n```{r}\ntest <- word_preproc_tool(data, 71, 10) \nrest <- test[[2]]\nfromrest <- data.frame(words = c(\"fieldtrip\",\"r\", \"matlab\", \"fieldtrip\", \"adobe illustrator\", \"custom matlab\", \"custom matlab\", \"mne\" ))\n\nbase <- data.frame(matrix(test[[1]]))%>% dplyr::rename(words = !!names(.)[1])%>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'brain vision'), \"brain vision analyser\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'mne'), \"mne\", as.character(words))) %>%  rbind(., fromrest) %>% \n  mutate(words = ifelse(str_detect(words, 'ggplot'), \"ggplot\", as.character(words))) \n\nwords <- base %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq)) \n\nnarrow1 <- base %>% \n  mutate(words = ifelse(str_detect(words, 'matlab|bar.m|boundedline'), \"custom matlab\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'fieldtrip'), \"fieldtrip\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'eeglab'), \"EEGLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'erplab'), \"ERPLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'python|seaborn|matplotlib|plotly'), \"custom python\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'mne'), \"MNE\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'ggplot|\\\\br\\\\b'), \"custom r\", as.character(words))) %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq))\nnarrow1 %>% head()\n```\n\n#### 2\n\n\n```{r}\ntest <- word_preproc_tool(data, 82, 10) \nrest <- test[[2]]\nfromrest <- data.frame(words = c(\"fieldtrip\",\"r\", \"matlab\", \"fieldtrip\", \"adobe illustrator\", \"custom matlab\", \"custom matlab\", \"mne\" ))\n\nbase <- data.frame(matrix(test[[1]]))%>% dplyr::rename(words = !!names(.)[1])%>% \n  mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n  mutate(words = ifelse(str_detect(words, 'brain vision'), \"brain vision analyser\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'mne'), \"MNE\", as.character(words))) %>%  rbind(., fromrest) %>% \n  mutate(words = ifelse(str_detect(words, 'ggplot'), \"ggplot\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'own|cusom'), \"custom\", as.character(words))) \n\nwords <- base %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq)) \n\nnarrow2 <- base %>% \n  mutate(words = ifelse(str_detect(words, 'matlab|bar.m|boundedline'), \"custom matlab\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'fieldtrip|fieldteip|field trip'), \"fieldtrip\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'eeglab'), \"EEGLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'erplab'), \"ERPLAB\", as.character(words))) %>% \n  mutate(words = ifelse(str_detect(words, 'python|seaborn|matplotlib|plotly'), \"custom python\", as.character(words))) %>%\n  mutate(words = ifelse(str_detect(words, 'ggplot|\\\\br\\\\b'), \"custom r\", as.character(words))) %>% \n   mutate(words = ifelse(str_detect(words, 'cartool'), \"cartool\", as.character(words))) %>% \n  table(.) %>% \n  data.frame(.) %>%  arrange(desc(Freq))\nnarrow2 %>% head()\n\n```\n\n## Struggles with plots\n```{r}\nvec <- names(data[ , grepl( \".*Which parts of*.\" , names(data))]) %>% str_split_i(., \"\\\\]\", 2) %>% \n  str_split_i(., \"\\\\...\", 2) %>% as.numeric()\nvec\n```\n\n####1\n\n```{r, warning=FALSE}\nword_preproc_tool_2 <- function(data, N, lim){\n  #lim = 10\n  tmp <- data %>% dplyr::select(N, N+1, N+2) %>% dplyr::rename(soft = !!names(.)[1], parts = !!names(.)[2], new_feature = !!names(.)[3]) %>% \n    filter(!is.na(soft)) %>% \n    mutate_at(vars(colnames(.)), funs(tolower(.))) %>% \n    mutate(soft = str_replace(soft, 'own', \"custom\"), \n           soft = str_replace(soft, '(matlab)', \"matlab\"), \n           soft = case_when(\n      str_detect(soft, 'brain vision') ~ \"brain vision analyser\",\n      #str_detect(soft, 'matlab|bar.m|boundedline') ~ \"custom matlab\",\n      str_detect(soft, 'mne') ~ \"mne\",\n      TRUE ~ as.character(soft)\n    ), \n    parts = case_when(\n      str_detect(parts, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(parts)\n    ),\n    new_feature = case_when(\n      str_detect(new_feature, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(new_feature)\n    )) %>% \n  \n    filter_at(vars(parts, new_feature), all_vars(!is.na(.))) %>% mutate(n = lengths(gregexpr(\"\\\\W+\", soft)) + 1) %>% \n    filter(parts != \"-\" | new_feature != \"-\", n < lim) %>%  dplyr::select(-4) %>% arrange(soft)\n  return(tmp)\n}\n```\n\n```{r}\nstruggle1 <- word_preproc_tool_2(data, 71, 10) \n\nstruggle1 %>% filter( parts != \"-\") %>% dplyr::select(parts) \n\n```\n\n## New features\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"plot_breakdown.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","editor":"visual","theme":"cosmo","title":"3.plot_breakdown"},"extensions":{"book":{"multiFile":true}}}}}
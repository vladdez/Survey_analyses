{
  "hash": "bd903d167d7d413074756c4da85b3f4e",
  "result": {
    "markdown": "---\ntitle: \"exploration\"\nformat:\n  html:\n    toc: true\n    html-math-method: katex\n    css: styles.css\neditor: visual\n---\n\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# upload to the git\nlibrary(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\n```\n:::\n\n\n## Bio stats\n\nCountry\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(table(data[8])) %>% arrange(desc(Freq)) %>% dplyr::rename(country_work = !!names(.)[1]) %>%\n    ggplot(data = ., aes(y = reorder(country_work, Freq),  x= Freq)) +\n    geom_bar(stat=\"identity\") + ylab(\"Country of work for participant\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2)+ theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nField\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfield <- as.data.frame(table(data[9])) %>% arrange(desc(Freq)) %>% head(3)\nfield$Freq[1] <- field$Freq[1] + 1 # from Others\nfield$Freq[2] <- field$Freq[2] + 1\nfield$Freq[3] <- field$Freq[3] + 1\nfield %>% dplyr::rename(area = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = reorder(area, Freq),  y= Freq, fill = area)) +\n    geom_bar(stat=\"identity\") + xlab(\"Area of research\") +\n    geom_text(aes(label = Freq), \n    vjust = -0.2)+ theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n### Area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt <- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt <- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\n\narea <- data.frame(matrix(tt)) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), \"affective neuroscience\", words)) %>%  \n  #mutate(words =ifelse(str_detect(.[[1]], 'spatial'), \"spatial\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'memory'), \"memory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), \"auditory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognition|consciousness|meditation|cognitive control|self|executive functions'), \"cognitive control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), \"deep brain stimulation\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), \"decision making\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), \"ageing\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'social'), \"social cognition\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), \"olfaction\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), \"language and speech\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'bci'), \"bci\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), \"sleep\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), \"time\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|perception'), \"attention and perception\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'vis'), \"vision\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development'), \"development\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), \"motor control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), \"mental disorders\", words)) %>%   \n  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), \"dsp\", words))\n\n   \narea %>% group_by(words) %>% dplyr::summarise(Freq = n()) %>% \n  data.frame(.)  %>% mutate(words = as.character(words)) %>%  #arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(words, Freq),  x= Freq)) +\n    geom_bar(stat=\"identity\") + ylab(\"Words\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2)\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmethod <- data[14:17]\nch <- colnames(method)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\[\", 2) \ncolnames(method) <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd <- data.frame(rowSums(t(data.frame(foreach(i = colnames(method)) %do% ifelse(method[i]==\"Yes\", 1, 0))))) \nd <- tibble::rownames_to_column(d, \"plots\") \ncolnames(d) <- c(\"method\", \"sum_scores\")\nd %>% arrange(desc(sum_scores)) %>% \n    ggplot(., aes(x = reorder(method, sum_scores), y = sum_scores, fill = method)) +\n    geom_col(stat = \"identity\") + labs(x = \"Method\", y = \"Value\", fill = \"Method\") +\n    theme_classic() + theme(legend.position=\"none\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in geom_col(stat = \"identity\"): Ignoring unknown parameters: `stat`\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Experience\n\nPapers\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[19] %>% dplyr::rename(papers = !!names(.)[1]) %>% filter(papers < 100) %>%  ggplot(data = ., aes(papers)) +\n  geom_histogram() +\n  labs(x =\"How many published papers/preprints do you have, where you used EEG, MEG or iEEG analysis?\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# PCA for clustering it \n```\n:::\n\n\nPosition\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#na.omit(data[13]) # recode Others\nas.data.frame(table(na.omit(data[12]))) %>% dplyr::rename(position = !!names(.)[1]) %>%\n  arrange(desc(Freq)) %>% \n    ggplot(data = ., aes(y = reorder(position, Freq),  x= Freq, fill = position)) +\n    geom_bar(stat=\"identity\") + ylab(\"Position\") +\n    geom_text(aes(label = Freq), \n    hjust = -0.2)+ theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nYears\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% filter(.[[20]] < 50) %>% ggplot(data = ., aes_(as.name(names(data)[20]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 30, 5)) +\n    labs(x =\"Years of experience with EEG, MEG, or iEEG analysis\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `aes_()` was deprecated in ggplot2 3.0.0.\nâ„¹ Please use tidy evaluation idioms with `aes()`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nSelf-assessed level\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data[21]) %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = level, y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Self-assessed level\") +\n    geom_text(aes(label = Freq), vjust = -0.2) + theme(legend.position=\"none\") +\n    scale_x_discrete(limits = c(\"Beginner\", \"Intermediate\", \"Expert\"))\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nCode contribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data[22])  %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = reorder(level, Freq),  y= Freq, fill = level)) +\n    geom_bar(stat=\"identity\") + xlab(\"Code contribution\") +\n    geom_text(aes(label = Freq), vjust = -0.2) + theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Channels\n\nHow many channels do you typically measure?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% ggplot(data = ., aes_(as.name(names(data)[23]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30)) +\n    labs(x =\"How many channels do you typically measure?\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nHow many channels do you typically measure?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% filter(.[[24]] < 500) %>% ggplot(data = ., aes_(as.name(names(data)[24]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30))+\n    labs(x =\"How many channels of those you measured do you typically analyse?\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# plots should be combined\n```\n:::\n\n\n## Software usage\n\n#### frequency\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- names(data[25:49]) %>% str_split_i(., \"\\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:49] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nâ„¹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(vec)\n\n  # Now:\n  data %>% select(all_of(vec))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n\n```{.r .cell-code}\nd <- data.frame(rowSums(t(software))) %>%  tibble::rownames_to_column(., \"soft\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))  %>% arrange(., desc(sum_scores)) \nd \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 soft sum_scores\n1              EEGLAB        112\n2           FieldTrip         85\n3          MNE-Python         72\n4  Brain Vision An..          41\n5              ERPLAB         37\n6          Brainstorm         31\n7                 SPM         18\n8                LIMO         14\n9                BESA         12\n10              Curry          9\n11    EGI Net Station          8\n12            Cartool          7\n13             mnelab          7\n14             Unfold          6\n15            EEProbe          4\n16               Scan          4\n17           EEGUtils          3\n18                ASA          2\n19             EEGKit          1\n20            fitgrid          1\n21         ephyviewer          0\n22          ERPsystem          0\n23               eVox          0\n24             InstEP          0\n25               MMVT          0\n```\n:::\n\n```{.r .cell-code}\n# piechart and cooccuerence plot \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# how many items were choosen\ntable(data.frame(rowSums(software)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrowSums.software.\n 0  1  2  3  4  5  6  7  8  9 10 \n 4 46 53 37 23  9  4  2  1  2  1 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nna.omit(data[51])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 Ã— 1\n   `Which EEG, MEG,..  [Other]`                         \n   <chr>                                                \n 1 R                                                    \n 2 R                                                    \n 3 bti 4D neuroimaging                                  \n 4 Letswave (matlab)                                    \n 5 Ggplot                                               \n 6 Matlab, Python                                       \n 7 Almost never don't plot ERP, my field is oscillations\n 8 ggplot2                                              \n 9 Matlab                                               \n10 mTRF                                                 \n11 IGOR Pro                                             \n12 EEGProcessor                                         \n13 basic Matlab                                         \n14 letswave                                             \n15 RAGU                                                 \n16 ELAN                                                 \n17 letswave                                             \n18 WinEEG                                               \n19 Matlab                                               \n20 own developments                                     \n```\n:::\n:::\n\n\n#### cooccurence\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how to order by diagonal matrix \nsoftware <- data[25:49]\nch <- colnames(software)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\[\", 2) \nch1 <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd1 <- foreach(i = colnames(software)) %do% ifelse(software[i]==\"Yes\", 1, 0)\nd <- crossprod(matrix(unlist(d1), ncol = 25))\nrownames(d) <- ch1\n#d <- data.frame(d) \n#d$diag <- rowSums(d)\n#d <- d[order(d$diag),] %>% dplyr::select(-diag)\ncolnames(d) <- rownames(d)\n#d <- as.matrix(d)\n\nmelt(d) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n                      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=-0.2))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in melt(d): The melt generic in data.table has been passed a matrix\nand will attempt to redirect to the relevant reshape2 method; please note that\nreshape2 is deprecated, and this redirection is now deprecated as well. To\ncontinue using melt methods from reshape2 while both libraries are attached,\ne.g. melt.list, you can prepend the namespace like reshape2::melt(d). In the\nnext version, this warning will become an error.\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Important features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeatures <- data[52:60]\nch <- colnames(features)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\[\", 2) \ncolnames(features) <- foreach(i = ch1) %do% str_sub(i, 1, -2)\n\nfeatures <- features %>%  mutate_at(c(colnames(features)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 ))) %>% \n  colSums(., na.rm =T) %>% data.frame(.) %>%  tibble::rownames_to_column(., \"Feature\") %>% \n  arrange(desc(.))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nâ„¹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unreplaced values treated as NA as `.x` is not compatible.\nUnreplaced values treated as NA as `.x` is not compatible.\nUnreplaced values treated as NA as `.x` is not compatible.\nUnreplaced values treated as NA as `.x` is not compatible.\nUnreplaced values treated as NA as `.x` is not compatible.\nUnreplaced values treated as NA as `.x` is not compatible.\nUnreplaced values treated as NA as `.x` is not compatible.\nUnreplaced values treated as NA as `.x` is not compatible.\nUnreplaced values treated as NA as `.x` is not compatible.\nPlease specify replacements exhaustively or supply `.default`.\n```\n:::\n\n```{.r .cell-code}\ncolnames(features) <- c(\"Feature\", \"sum_scores\")\nfeatures\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  Feature sum_scores\n1      Flexible tweaki..         284\n2      Presentation/pu..         222\n3      Reproducibility..         215\n4 Generating plot.. ]...6        213\n5      Combine with a ..         115\n6      Zooming or pann..         104\n7       Speed of plotting         77\n8      Interactive sel..          68\n9 Generating plot.. ]...5        -68\n```\n:::\n\n```{.r .cell-code}\n# divide by number of people \n# individual plots\n# correlation with experience factor\n```\n:::\n\n\n## Familiarity with plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_image\", \"parallel\", \"channel_image\")\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plot\", \"sum_scores\"))  %>% \n  arrange(., desc(sum_scores)) %>% \n  ggplot(data = ., aes(y = reorder(plot, sum_scores), x= sum_scores)) +\n  geom_bar(stat=\"identity\") + ylab(\"plot\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plot\", \"Yes\")) %>% mutate(No = nrow(data) - Yes) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           plot Yes  No\n1          line 169  13\n2     butterfly 142  40\n3          topo 163  19\n4    topo_array 166  16\n5      topo_map 160  22\n6     erp_image 113  69\n7      parallel   7 175\n8 channel_image 104  78\n```\n:::\n\n```{.r .cell-code}\n# #  two bars knowing and using\n```\n:::\n\n\n## Have you ever plotted this king of figure\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- names(data[ , grepl( \"Have you ever\" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  22  70  81  86  91  98 103 108 113\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_vec <- function(vec, data){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., answer, score, `N.A`:`Yes`, factor_key=TRUE) %>% \n  mutate(answer = str_replace(answer, 'N.A', \"No\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in rbind(t1, t): number of columns of result is not a multiple of vector\nlength (arg 1)\n```\n:::\n\n```{.r .cell-code}\ntab %>% \n  ggplot(., aes(x = plots, y = score, fill = answer)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic()\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## Familiar and plotted\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- names(data[ , grepl( \"Have you ever\" , names(data))]) %>% str_split_i(., \"\\\\.....\", 2) %>% as.numeric()\nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_img\", \"parallel\", \"channel_img\")\n\ndo_vec <- function(vec, data, plot_names){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec[2:length(vec)], data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nâ„¹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(plot_names)\n\n  # Now:\n  data %>% select(all_of(plot_names))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n\n```{.r .cell-code}\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>% merge(., tab)  %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of familiarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2)\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Up or down\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data[79])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIn this plot, s..\nDown   Up \n  31  138 \n```\n:::\n:::\n\n\n## Error bars\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data[74])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThink about you..\nNever published this plot                        No                       Yes \n                       22                        57                        79 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[75] %>%  filter(!is.na(.)) %>% table()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWhat did the er..\n      Confidence intervals                      Other \n                        17                          5 \nStandart error of the mean \n                        57 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[76] %>%  filter(!is.na(.)) %>% table()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWhat did the er..  [Other]\n68% CI, which is close to SEM under normality \n                                            1 \n                    95% ci over channel means \n                                            1 \n          i'm not sure but i think it was sem \n                                            1 \n        median absolute deviaton or quantiles \n                                            1 \n                                           Sd \n                                            1 \n```\n:::\n:::\n\n\n## Baseline\n\n### periods\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(abs(data[77])) %>% data.frame() %>%  dplyr::rename(baseline = !!names(.)[1]) %>%\n    ggplot(data = ., aes(y = baseline, x= Freq)) +\n    geom_bar(stat=\"identity\") + ylab(\"baseline\")+  scale_x_continuous(breaks=seq(0, 60, 5))\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n### justification\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# depends on what??\n# manual categorization of depending\nj <- data %>%    \n  dplyr::rename(q = !!names(.)[78]) %>% filter(!is.na(q)) %>% dplyr::select(q) %>% \n  mutate(q = tolower(q), \n         q = gsub('.*depends in*.', 'depends on ', q),\n         dependson = ifelse(grepl(\"depends\", q), q, NA)) %>% \n  separate(dependson, into = c(\"a\",\"b\"), sep = \"on \") %>% \n  dplyr::select(-a) %>% \n  dplyr::rename(dependson = b) #%>% \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Additional pieces discarded in 2 rows [23, 27].\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [11].\n```\n:::\n\n```{.r .cell-code}\nj\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 49 Ã— 2\n   q                                                                     depenâ€¦Â¹\n   <chr>                                                                 <chr>  \n 1 \"minimum 200ms for erps and theta or beta power\"                       <NA>  \n 2 \"depends on the design of course\"                                     \"the dâ€¦\n 3 \"depend on the topic\"                                                  <NA>  \n 4 \"i think that there can be no one correct answer.       it depends oâ€¦ \"the sâ€¦\n 5 \"depends on the experiment and research question\"                     \"the eâ€¦\n 6 \"should match the duration of baseline-correction\"                     <NA>  \n 7 \"as a rule of thumb, i would plot at least 1/3 of the duration (postâ€¦  <NA>  \n 8 \"half of the illustrated task interval\"                                <NA>  \n 9 \"in general i would always try to plot the full baseline period usedâ€¦  <NA>  \n10 \"depends on the rest period between the measured evoked responses. eâ€¦ \"the râ€¦\n# â€¦ with 39 more rows, and abbreviated variable name Â¹â€‹dependson\n```\n:::\n\n```{.r .cell-code}\n  #View()\n```\n:::\n\n\n## Colorbars\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data[117])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAre you aware o..\n No Yes \n 73 109 \n```\n:::\n\n```{.r .cell-code}\ntable(data[118])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDo you know abo..\n No Yes \n 55 127 \n```\n:::\n\n```{.r .cell-code}\ntable(data[119])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWould you like ..\nMaybe    No   Yes \n   23     6    98 \n```\n:::\n:::\n\n\n## Feedback\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- data[120] %>% dplyr::rename(feed = !!names(.)[1]) %>%  filter(!is.na(feed), feed != \"-\") #%>% View()\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Time in minutes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(as.numeric(data$`Total time`)) / 60\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14.0435\n```\n:::\n:::\n",
    "supporting": [
      "exploration_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
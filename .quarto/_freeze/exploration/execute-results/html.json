{
  "hash": "5c875ce0484a09e1cc22177c522e64bb",
  "result": {
    "markdown": "---\ntitle: \"exploration\"\nformat:\n  html:\n    toc: true\n    html-math-method: katex\n    css: styles.css\neditor: visual\n---\n\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# upload to the git\nlibrary(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\nlibrary(kableExtra)\nlibrary(stringr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\n```\n:::\n\n\n\n## Channels\n\nHow many channels do you typically measure?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% ggplot(data = ., aes_(as.name(names(data)[23]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30)) +\n    labs(x =\"How many channels do you typically measure?\") + theme_classic()\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nHow many channels do you typically measure?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% filter(.[[24]] < 500) %>% ggplot(data = ., aes_(as.name(names(data)[24]))) +\n  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30))+\n    labs(x =\"How many channels of those you measured do you typically analyse?\") + theme_classic()\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# plots should be combined\n```\n:::\n\n\n## Software usage\n\n#### frequency\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna.omit(data[51]) %>% nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21\n```\n:::\n\n```{.r .cell-code}\nother <- c(rep(\"Custom scripts\",each=9), \"4DBTi\", rep(\"letswave\", 3), \"mTRF\", \"RAGU\", \"IGOR Pro\", \"EEGProcessor\", \"ELAN\", \"WinEEG\") %>% table(.) %>% data.frame(.) %>% rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- names(data[25:50]) %>% str_split_i(., \"\\\\? \\\\[\", 2) %>%  str_sub(., 1, -2)\n\nsoftware <- data[25:50] %>%\n    rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\n\nd <- data.frame(rowSums(t(software))) %>%  tibble::rownames_to_column(., \"soft\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"soft\", \"sum_scores\"))   %>% \n  rbind(., other) %>% dplyr::group_by(soft) %>% dplyr::summarise(sum_scores = sum(sum_scores)) %>% \n  arrange(., desc(sum_scores))\n\nd  %>% filter(sum_scores >= 1) %>% mutate(soft = ifelse(sum_scores >= 3, as.character(soft), \"_Others\")) %>% group_by(soft) %>% \n  dplyr::summarise(sum_scores = sum(sum_scores)) %>% \n    ggplot(data = ., aes(y = reorder(soft, sum_scores),  x= sum_scores, fill = soft)) +\n    geom_bar(stat=\"identity\") + labs(x= \"Scores\", y=\"Soft\") +\n    geom_text(aes(label = sum_scores), \n    hjust = -0.2) + theme_classic() + theme(legend.position=\"none\",\n                                            axis.text.y = element_text(size = 14))\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n#### cooccurrence\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how to order by diagonal matrix \n# how to add others\nsoftware <- data[25:50]\nch <- colnames(software)\nch1 <- foreach(i = ch) %do% str_split_i(i, \"\\\\? \\\\[\", 2) \nch1 <- foreach(i = ch1) %do% str_sub(i, 1, -2)\nd1 <- foreach(i = colnames(software)) %do% ifelse(software[i]==\"Yes\", 1, 0)\nc <- crossprod(matrix(unlist(d1), ncol = 26))\nrownames(c) <- ch1\ncolnames(c) <- rownames(c)\n\ndiag.order <- order(diag(c), decreasing = FALSE)\nmat_reordered <- c[diag.order, diag.order]\n\nmelt(mat_reordered) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) \n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nzero_rows <- rowSums(mat_reordered) == 0\nzero_cols <- colSums(mat_reordered) == 0\n\n# Create a new matrix array without the rows and columns consisting only of zeroes\nnew_matrix <- mat_reordered[!zero_rows, !zero_cols]\nmelt(new_matrix) %>% ggplot(., aes(x=Var1, y=Var2)) + \n  geom_tile(aes(fill = value)) + \n  geom_text(aes(label = value)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme(legend.title = element_blank(),\n        axis.title=element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in melt(new_matrix): The melt generic in data.table has been passed a\nmatrix and will attempt to redirect to the relevant reshape2 method; please note\nthat reshape2 is deprecated, and this redirection is now deprecated as well.\nTo continue using melt methods from reshape2 while both libraries are attached,\ne.g. melt.list, you can prepend the namespace like reshape2::melt(new_matrix).\nIn the next version, this warning will become an error.\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Important features\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[52:60] %>% rename_with(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %>% \n                                        str_sub(., 1, -2) ) %>%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 ))) %>% \n  colSums(., na.rm =T) %>% data.frame(.) %>%  tibble::rownames_to_column(., \"Feature\") %>% \n  filter(!is.na(Feature)) %>% \n  arrange(desc(.)) %>% rename_at(vars(colnames(.)), ~ c(\"Feature\", \"sum_scores\")) %>% group_by(Feature) %>% \n  dplyr::mutate( mean = round(sum_scores / nrow(data), 2)) %>%   kbl(escape = F, booktabs = T) %>%\n  kable_styling(\"striped\", position = \"center\",) %>% kable_classic(full_width = F, html_font = \"Arial\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped lightable-classic\" style=\"margin-left: auto; margin-right: auto; font-family: Arial; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Feature </th>\n   <th style=\"text-align:right;\"> sum_scores </th>\n   <th style=\"text-align:right;\"> mean </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Flexible tweaking of plot attributes (colors, linewidths, margins etc.) </td>\n   <td style=\"text-align:right;\"> 292 </td>\n   <td style=\"text-align:right;\"> 1.56 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Presentation/publication ready figures </td>\n   <td style=\"text-align:right;\"> 226 </td>\n   <td style=\"text-align:right;\"> 1.21 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Reproducibility of interactively generated or modified plots </td>\n   <td style=\"text-align:right;\"> 223 </td>\n   <td style=\"text-align:right;\"> 1.19 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Generating plots by coding </td>\n   <td style=\"text-align:right;\"> 221 </td>\n   <td style=\"text-align:right;\"> 1.18 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Combine with a custom plot created outside of the toolbox (as subplot or inset) </td>\n   <td style=\"text-align:right;\"> 116 </td>\n   <td style=\"text-align:right;\"> 0.62 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Zooming or panning within a plot </td>\n   <td style=\"text-align:right;\"> 109 </td>\n   <td style=\"text-align:right;\"> 0.58 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Speed of plotting </td>\n   <td style=\"text-align:right;\"> 80 </td>\n   <td style=\"text-align:right;\"> 0.43 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Interactive selection of time-ranges or electrodes e.g. via Sliders or Dropdown menus </td>\n   <td style=\"text-align:right;\"> 72 </td>\n   <td style=\"text-align:right;\"> 0.39 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Generating plots by clicking (GUI) </td>\n   <td style=\"text-align:right;\"> -68 </td>\n   <td style=\"text-align:right;\"> -0.36 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfeature <- data[52:60] %>% rename_all(., ~str_split_i(colnames(data[52:60]), \"\\\\? \\\\[\", 2) %>% \n                                        str_sub(., 1, -2) ) %>%  \n  mutate_at(c(colnames(.)), \n        funs(recode(.,\n        \"Very important\"= 2, \"Important\"= 1, \"Neutral\"= 0,\n        \"Low importance\"= -1, \"Not at all important\" = -2 ))) %>% \n  pivot_longer(cols = everything(), names_to = \"name\", values_to = \"value\") %>% \n  mutate(index = as.integer(factor(name)))\n\n#feature  %>% distinct(., index, name) %>% arrange(., index)\n\nfeature %>% #filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  geom_density(aes(x = value, fill = str_wrap(name)), bw = 0.5) + \n  labs(x = \"score\", fill=\"Features\")  + theme_classic()  +\n  theme(legend.position = \"none\", legend.key.height=unit(2, \"cm\")) + facet_wrap(~str_wrap(name, 20))\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfeature %>% filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  geom_density(aes(x = value, color = str_wrap(name, 20)), bw = 0.5) + \n  labs(x = \"score\", color = \"Features\")  + theme_classic() +\n  theme(legend.position = \"none\", \n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14)) + \n  facet_wrap(~str_wrap(name, 20)) + labs(x=\"Scores on Likert scale\", y=\"Density\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 18 rows containing non-finite values (`stat_density()`).\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfeature %>% filter(index %in% c(2, 6, 7, 4)) %>% \n  ggplot() + \n  geom_density(aes(x = value, color = str_wrap(name, 20)), bw = 0.5) + \n  labs(x = \"score\", color = \"Features\")  + theme_classic() +\n  theme(\n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14))  + \n  labs(x=\"Scores on Likert scale\", y=\"Density\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 18 rows containing non-finite values (`stat_density()`).\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfeature %>% filter(index %in% c(8, 9)) %>% \n  ggplot() + \n  geom_density(aes(x = value, color = str_wrap(name, 20)), bw = 0.5) + \n  labs(x = \"score\", color =\"Features\")  + theme_classic() +\n  theme(\n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14))  + \n    labs(x=\"Scores on Likert scale\", y=\"Density\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 7 rows containing non-finite values (`stat_density()`).\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfeature %>% filter(index %in% c(1, 3, 5)) %>% \n  ggplot() + \n  geom_density(aes(x = value, color = str_wrap(name, 20)), bw = 0.5) + \n  labs(x = \"score\", color =\"Features\") + theme_classic() +\n  theme(\n        legend.key.height=unit(2, \"cm\"), \n        axis.text.x = element_text(size = 12),\n        strip.text = element_text(size = 14))  + \n    labs(x=\"Scores on Likert scale\", y=\"Density\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 13 rows containing non-finite values (`stat_density()`).\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## Familiarity with plots\n#### Recognition\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_image\", \"parallel\", \"channel_image\")\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ vec) %>% \n  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plot\", \"sum_scores\"))  %>% \n  arrange(., desc(sum_scores)) %>% \n  ggplot(data = ., aes(y = reorder(plot, sum_scores), x= sum_scores, fill=plot)) +\n  geom_bar(stat=\"identity\") + ylab(\"plot\") + theme_classic() + \n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Select ERP plot you are familiar with\") \n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n#### Plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- names(data[ , grepl( \"Have you ever plotted\" , names(data))])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_vec <- function(vec, data){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., answer, score, `N.A`:`Yes`, factor_key=TRUE) %>% \n  mutate(answer = str_replace(answer, 'N.A', \"No\"))\n\ntab %>% \n  ggplot(., aes(x = plots, y = score, fill = answer)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic() +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Have you ever plotted this kind of figure?\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n#### Recognition and plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- names(data[ , grepl( \"Have you ever plotted \" , names(data))]) #%>% str_split_i(., \"\\\\.....\", 2) \nplot_names <- c(\"line\", \"butterfly\", \"topo\", \"topo_array\", \"topo_map\", \"erp_img\", \"parallel\", \"channel_img\")\n\ndo_vec <- function(vec, data, plot_names){\n  t1 <- table(data[vec[1]])\n  for (i in 2:length(vec)) {\n    t <- table(data[vec[i]])\n    t1 <- rbind(t1, t)\n  }\n  rownames(t1) <- plot_names #array(paste0(\"t_\", 1:length(vec)))\n  return(t1)\n}\ntab <- do_vec(vec, data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., \"plots\") %>%  \n  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% \n  filter(type == \"Yes\") %>% dplyr::select(-type) \n\nfamiliar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% \n  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.==\"Yes\", 1, 0)))\n\ndata.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., \"plot\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"plots\", \"recognized\")) %>% merge(., tab)  %>% \n  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% \n  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Plot type\", y = \"Number of users\", fill = \"Level of familiarity\\nwith plot\") +\n    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2) +  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Familiarity with plots\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Up or down\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt <- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))\ntt <- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') \n\narea1 <- data.frame(matrix(tt)) %>% dplyr::rename(words = !!names(.)[1]) %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), \"affective neuroscience\", words)) %>%  \n  mutate(words =ifelse(str_detect(.[[1]], 'memory'), \"memory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), \"auditory\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|cognition|consciousness|meditation|cognitive control|self|executive functions'), \"cognitive control and attention\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), \"deep brain stimulation\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), \"decision making\", words)) %>%\n  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), \"ageing\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'social'), \"social cognition\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), \"olfaction\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), \"language and speech\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'bci'), \"bci\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), \"sleep\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), \"time\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'perception'), \"perception\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'vis'), \"vision\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development|ageing'), \"development\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), \"motor control\", words)) %>% \n  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), \"mental disorders\", words)) %>%   \n  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), \"dsp\", words))\n\narea <- area1 %>%\n  mutate(words = ifelse(str_detect(.[[1]], 'olfaction|vision|auditory|pain'), \"perception\", words))%>%\n  mutate(words = ifelse(str_detect(.[[1]], 'dsp|computational neuroscience'), \"methodology\", words)) %>% \n  mutate(words = ifelse(str_detect(.[[1]], 'mental disorders|deep brain stimulation'), \"clinical\", words))%>% \n  mutate(words = ifelse(str_detect(.[[1]], 'social cognition'), \"affective neuroscience\", words))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data[79]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>%\n  mutate(percent_score = round(scores / sum(scores) * 100)) %>% \n    ggplot(., aes(x = position, y = percent_score, fill = as.factor(percent_score))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + \n    theme_classic() +\n    theme(axis.title.x=element_blank(), \n          legend.position=\"none\", \n          axis.text = element_text(size = 12),\n          plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = paste0(percent_score, \"%\"), group = position), \n            position = position_stack(vjust = 0.5)) +\n  ggtitle(\"In ERP plot, should positive voltages be plotted upwards, or downwards?\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncbind(unlist(area$words), unlist(data[[79]])) %>% data.frame() %>% \nfilter(.[[2]] != \"NANA\") %>% dplyr::rename(area=X1, ud=X2) %>%\ngroup_by(area) %>%\nfilter(n() > 2) %>% group_by(area, ud) %>% dplyr::summarise(n = n()) %>% \n  group_by(area) %>% dplyr::mutate(nn = sum(n)) %>% \n  ggplot(., aes(x = n, y = reorder(area, nn), fill = ud)) +\n   geom_col(stat = \"identity\", width = 0.5) +\n  labs(x = \"Count\",  fill =\"Positive:\") +\n  geom_text(aes(label = n, #paste0(n, \"%\"), \n                group = ud), \n            position = position_stack(vjust = 0.5)) +\n   theme(plot.title = element_text(hjust = 0.5),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.title = element_blank(),\n        axis.title.y=element_blank()\n        ) +  \n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'area'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n## Error bars\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data[74]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"Scores\")) %>% \n    ggplot(., aes(x = position, y = Scores, fill = as.factor(Scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) +\n      \n  geom_text(aes(label = Scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"In your paper, did you published ERP plot with error bars?\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[75] %>%  filter(!is.na(.)) %>% table()  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n    ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n   theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) + ylab(\"Scores\") +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"In your figure, what did error bars depicted?\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[76] %>%  filter(!is.na(.)) %>% table()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nG03Q15[other]. What did the error bars depict in your figure? [Other]\n68% CI, which is close to SEM under normality \n                                            1 \n                    95% ci over channel means \n                                            1 \n          i'm not sure but i think it was sem \n                                            1 \n        median absolute deviaton or quantiles \n                                            1 \n                                           Sd \n                                            1 \n SEM, corrected for within-participant design \n                                            1 \n```\n:::\n:::\n\n\n## Baseline\n\n#### periods\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(abs(data[77])) %>% data.frame() %>%  dplyr::rename(baseline = !!names(.)[1]) %>%\n    ggplot(data = ., aes(x = baseline, y= Freq)) +\n    geom_bar(stat=\"identity\") + xlab(\"Recomended baseline in msec\") +  \n  scale_y_continuous(breaks=seq(0, 60, 5)) + theme_classic() +\n  theme(legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = Freq, group = baseline), position = position_dodge(width = .9), vjust = -0.2)\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n#### justification\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If you don't want to provide a number on previous question, please, provide a justification\n# depends on what??\n# manual categorization of depending\nj <- data %>%    \n  dplyr::rename(q = !!names(.)[78]) %>% filter(!is.na(q)) %>% dplyr::select(q) %>% \n  mutate(q = tolower(q)) %>% mutate(q = gsub('depends in|depending on', 'depends on', q),\n         dependson = ifelse(grepl(\"depends|depend\", q), q, NA)) %>% \n  separate(dependson, into = c(\"a\",\"b\"), sep = \"depends on |depend on \") %>% \n  dplyr::select(-a) %>% \n  dplyr::rename(dependson = b) #%>% \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [50].\n```\n:::\n\n```{.r .cell-code}\nj %>% filter(is.na(dependson))  %>% select(-dependson)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 1\n   q                                                                            \n   <chr>                                                                        \n 1 minimum 200ms for erps and theta or beta power                               \n 2 should match the duration of baseline-correction                             \n 3 as a rule of thumb, i would plot at least 1/3 of the duration (post-stimulus…\n 4 half of the illustrated task interval                                        \n 5 in general i would always try to plot the full baseline period used for base…\n 6 the same duration as the one used for baseline correction                    \n 7 at least 300, preferably more                                                \n 8 put down 100, but that's just what i typically use, might be diff for differ…\n 9 at least the baseline window used for the baseline correction?               \n10 in this case it has sense as the -100 : 0 ms is not flat                     \n11 1/3 to 1/2 of the post-stimulus time plotted                                 \n12 i would plot the same baseline period as the one used for baseline correction\n13 i would recommend to plot the baseline period corresponding to the baseline-…\n14 in general, i think it should be roughly the same length as the time window …\n15 assuming the baseline is -250 to 0 ms, i would like to see activity before t…\n16 the actual baseline length you have in the experiment                        \n17 ideally, the entire duration for the baseline correction should be depicted  \n18 it depends - at least as long as the period you use for correction (which ma…\n```\n:::\n\n```{.r .cell-code}\nj %>% filter(!is.na(dependson)) %>% select(dependson)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 33 × 1\n   dependson                                                                    \n   <chr>                                                                        \n 1 \"the design of course\"                                                       \n 2 \"the topic\"                                                                  \n 3 \"the study. if you have interstimulus interval of 1 second and you expect to…\n 4 \"the experiment and research question\"                                       \n 5 \"the rest period between the measured evoked responses. e.g. it can be very …\n 6 \"the analysis\"                                                               \n 7 \"paradigm, 100-300 ms range preferable\"                                      \n 8 \"the task design\"                                                            \n 9 \"the type of response (eg for mrcps response is seen before actual movement …\n10 \"the task design, paradigm and signal of interest.\"                          \n# … with 23 more rows\n```\n:::\n\n```{.r .cell-code}\n  #View()\n```\n:::\n\n\n## Colorbars\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data[117]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Are you aware of perceptual controvericies of colorbars?\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data[118]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(position = \"dodge\", stat = \"identity\", width=0.5) + theme_classic() +\n  theme(axis.title.x=element_blank(), legend.position=\"none\", plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Do you know about two-dimensional colorbars?\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrbind(table(data[117]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"answer\", \"scores\")) %>% \n  mutate(questions = \"Awareness about\\ncontrovercies of\\ncolorbars\")%>%\n  mutate(percent_score = round(scores / sum(scores) * 100)),\n\ntable(data[118]) %>% data.frame() %>% \n  rename_at(vars(colnames(.)), ~ c(\"answer\", \"scores\")) %>% \n  mutate(questions = \"Awareness about\\n2d colorbars\") %>%\n  mutate(percent_score = round(scores / sum(scores) * 100))\n) %>% \n  \n  ggplot(., aes(x = percent_score, y = questions, fill = answer)) +\n  geom_col(stat = \"identity\", width = 0.5) +\n   geom_text(aes(label = paste0(percent_score, \"%\", \"\\n(\", answer, \")\")), \n            position = position_stack(vjust = 0.5), size = 4) + \n    theme_classic()+ \n  theme(plot.title = element_text(hjust = 0.5),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        legend.position = \"none\",\n        legend.title = element_blank(),\n        axis.title.y=element_blank()\n        ) +\n  scale_color_manual(values = c(\"#FF6666\", \"#66CC66\")) +\n  scale_fill_manual(values = c(\"#FF6666\", \"#66CC66\"))  +\n  labs(x=\"Percent score\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in geom_col(stat = \"identity\", width = 0.5): Ignoring unknown\nparameters: `stat`\n```\n:::\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data[119])  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c(\"position\", \"scores\")) %>% \n  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +\n    geom_bar(stat = \"identity\", width=0.5)  + theme_classic() +\n     theme(axis.title.x=element_blank(), \n        legend.position=\"none\", \n        axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) + ylab(\"Scores\") +\n  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Would you like to use a two-dimensional colorbar\\nin your publications, if it was easily available?\")\n```\n\n::: {.cell-output-display}\n![](exploration_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n## Feedback\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeed <- data[120] %>% dplyr::rename(feed = !!names(.)[1]) %>%  filter(!is.na(feed), feed != \"-\") #%>% View()\nfeed  %>%\n  filter(!row_number() %in% c(3, 14, 17, 32, 37, 41))# just appreciation\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 49 × 1\n   feed                                                                         \n   <chr>                                                                        \n 1 \"Not only 2-d, but also CIRCULAR colorbars please\\r\\nThey are essential to v…\n 2 \"I think a great feature to have would be a selection of colors for comparis…\n 3 \"stop pushing this jet bullshit on me so hard\"                               \n 4 \"Make it very modular. It will be useless to experts or people trying someth…\n 5 \"This is more of a tangential comment, but one issue for me is lack of aware…\n 6 \"Easy creation of different types of error bars on ERP plots (shading)\"      \n 7 \"I use R for most analyses and visualization but matlab/eeglab/Erplab (for n…\n 8 \"Dynamic head montage videos\"                                                \n 9 \"I feel like Matlab is not very easy to implement in public and interactive …\n10 \"I think everything that relates to plotting ERPs + results of statistical t…\n# … with 39 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "exploration_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
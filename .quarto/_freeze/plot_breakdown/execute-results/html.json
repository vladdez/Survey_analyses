{
  "hash": "9e351e5cc5cacac9784b81c29a793a98",
  "result": {
    "markdown": "---\ntitle: \"3.plot_breakdown\"\nformat: html\neditor: visual\n---\n\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# upload to the git\nlibrary(readxl)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tokenizers)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(quanteda)\nlibrary(SemNetCleaner)\nlibrary(purrr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(topicmodels)\nlibrary(SnowballC)\nlibrary(Matrix)\nlibrary(text2vec)\nlibrary(tidyr)\nlibrary(kableExtra)\nlibrary(stringi)\nlibrary(\"xlsx\")\nlibrary(padr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_excel(\"data/results-survey3.xlsx\")\ndata <- data[1:121] %>% \n  filter(.[[18]] !='Yes') # not analysed any EEG method\nvec <- names(data[ , grepl( \"How would you \" , names(data))])\n```\n:::\n\n\n## word_preproc\n\n::: {.cell}\n\n```{.r .cell-code}\nword_preproc <- function(data, N){\n # N = 69\n  stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"like\", \"s\", \"plot\", \"plots\")\n  tmp <- data %>% filter(!is.na(.[[N]])) %>% select(., N) %>% \n    dplyr::rename(words = !!names(.)[1]) %>% mutate(words = tolower(words)) %>% \n    mutate(words_prep = str_split(words, \"\\\\s+\")) %>%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \"))) %>% \n    mutate(words_prep = stri_replace_all_regex(words_prep,\n                                  pattern=c(\" \\\\(.*\", \", or.*\", \" across.*\", \" with.*\", \" at.*\", \" by.*\", \" over.*\", #\" of.*\", \n                                            \" for.*\", \" per.*\", \" across.*\", \" accross.*\", \" between.*\"),\n                                  replacement=c(''),\n                                  vectorize=FALSE)) %>% \n    mutate(words_prep = str_split(words_prep, \"\\\\s+\")) %>%\n    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = \" \")))\n     \n  return(tmp)\n}\n```\n:::\n\n\n## Plot naming\n\nThose who named a plot somehow and those who failed to do that\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna_table <- function(data, vec){\n    temp <- data.frame(1:10)\n    for (i in vec){\n      temp1 <- word_preproc(data, i)  %>%\n      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|why'), \"NA\", as.character(words))) %>%\n      mutate(words = ifelse(nchar(words)==0, NA, words)) %>% \n      table(.) %>% \n      data.frame(.) %>% filter(words != \"NA\") %>% \n      summarise(n = sum(Freq))  \n      temp <- cbind(temp, temp1)\n    }\n    temp <- temp[2:length(temp)]\n    colnames(temp) <- c(\"line plot\",\"butterfly\",\"topoplot\",\"topoarray\",\"topomap\",\"ERP image\",\"parallel\", \"channel image\")\n    return(temp)\n}\n\nnum_named <- na_table(data, vec)\nslice(num_named, 1)  %>% \n  gather(., plots, succeeded, `line plot`:`channel image`, factor_key=TRUE) %>% \n  mutate(failed = nrow(data) - succeeded) %>% \n  gather(., res, score, succeeded:failed, factor_key=TRUE) %>% \n\n  ggplot(., aes(x = plots, y = score, fill = res)) +\n    geom_bar(position = \"dodge\", stat = \"identity\") +\n    labs(x = \"Category\", y = \"Value\", fill = \"Group\") +\n    theme_classic() + theme(axis.title.x=element_blank(), plot.title = element_text(hjust = 0.5)) +\n  geom_text(aes(label = score, group = res), position = position_dodge(width = .9), vjust = -0.2) +\n  ggtitle(\"Plot naming\")\n```\n\n::: {.cell-output-display}\n![](plot_breakdown_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n## The most common names for each plot\n#### 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn1 <- word_preproc(data, 69)  %>%\n   mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\baverage(d)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\baverage(d)?\\\\b\", words_prep) == TRUE ~ \"averaged erp\",\n      grepl(\"\\\\bwave(form|forms)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\bwave(form|forms)?\\\\b\", words_prep) == TRUE ~ \"erp wave(form)s\",\n      grepl(\"\\\\btime(course|series|domain)?\\\\b.*\\\\b(erp(s)?|ep|related)\\\\b|\\\\b(erp(s)?|ep|related)\\\\b.*\\\\btime(course|series|domain)?\\\\b\", words_prep) == TRUE ~ \"erp timecourse (timeseries)\",\n      grepl(\"\\\\b(erp(s)?|ep|related)\\\\b\", words) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(time|timeseries)\\\\b\", words) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(response(s)?)\\\\b\", words) == TRUE ~ \"response\",\n      grepl(\"\\\\b(line|boundedline)\\\\b\", words) == TRUE ~ \"line\",\n      grepl(\"\\\\b(single|singleplot)\\\\b\", words) == TRUE ~ \"single\",\n      grepl(\"\\\\b(waveform(s)?)\\\\b\", words) == TRUE ~ \"waveform\",\n       grepl(\"\\\\b(p300)\\\\b\", words) == TRUE ~ \"p300\",\n      grepl(\"\\\\b(average)\\\\b\", words) == TRUE ~ \"average\",\n      TRUE ~ '_other'\n      ))  %>% #filter(type == \"erp\") %>%  View()\n   filter(!is.na(type), type != \"bad\") %>% dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq))  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Line plot\", \"n\")) \nn1 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     Line plot  n\n1                          erp 74\n2                 averaged erp 30\n3                       _other 13\n4  erp timecourse (timeseries) 12\n5              erp wave(form)s 12\n6                  time series  9\n7                      average  5\n8                       single  5\n9                         line  4\n10                    response  4\n11                        p300  2\n12                    waveform  2\n```\n:::\n:::\n\n\n\n#### 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn2 <- word_preproc(data, 80)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(butterfly|bitterfly|buterfly|buttefly)\\\\b\", words_prep) == TRUE ~ \"butterfly\",\n      grepl(\"\\\\b(spaghetti)\\\\b\", words_prep) == TRUE ~ \"spaghetti\",\n      grepl(\"\\\\b(time|timeseries|timecourse)\\\\b\", words_prep) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(channel|single|singleplot|individual)\\\\b\", words_prep)  == TRUE ~ \"single or individual channel erp\",\n      grepl(\"\\\\b(channels|multichannel|multeple|multiple|multi|all|muti|electrodes)\\\\b\", words_prep)  == TRUE ~ \"multichannel/electrode erp\",\n      grepl(\"\\\\b(evoked)\\\\b\", words_prep)  == TRUE ~ \"evoked responces\",\n      grepl(\"\\\\b(erp(s)?|eprs|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      TRUE ~ '_other'\n      )) %>% filter(type == \"single or individual channel erp\") %>%  #View()\n  filter(!is.na(type), type != \"bad\") %>%\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq))  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Butterfly_plot\", \"n\")) \nn2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    Butterfly_plot  n\n1 single or individual channel erp 19\n```\n:::\n:::\n\n\n#### 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn3 <- word_preproc(data, 85)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(topo|topoplot(s)?)\\\\b\", words_prep) == TRUE ~ \"topo(plot)\", \n      grepl(\"\\\\b(topomap|topomape)\\\\b\", words_prep) == TRUE ~ \"topomap\",\n      grepl(\"\\\\b(topograph(y|ic|ical|ies)|topgraphy|topograbphy)\\\\b\", words_prep) == TRUE ~ \"topography\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(map)\\\\b\", words_prep) == TRUE ~ \"scalp map\",\n      grepl(\"\\\\b(distribution)\\\\b\", words_prep) == TRUE ~ \"scalp distribution\",\n      TRUE ~ '_other'\n      )) %>% \n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq))  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Topoplot\", \"n\")) \nn3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Topoplot  n\n1         topography 68\n2         topo(plot) 63\n3            topomap 13\n4             _other  8\n5          scalp map  7\n6 scalp distribution  5\n7            heatmap  3\n```\n:::\n:::\n\n\n#### 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn4 <- word_preproc(data, 90)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|\\\\?|unclear)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\btime(course)?\\\\b|\\\\btime(course)?\\\\b.*\\\\btopo(plot|plots)?|timetopoplot\\\\b\", words_prep) == TRUE ~ \"time topo\",\n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\bseries\\\\b|\\\\bseries\\\\b.*\\\\btopo(plot|plots)?\\\\b\", words_prep) == TRUE ~ \"topo series\",\n      grepl(\"\\\\b(topo(s)?|topoplot(s)?)\\\\b\", words_prep) == TRUE ~ \"topo\", \n      grepl(\"\\\\b(topomap(s|e)|topomap)\\\\b\", words_prep) == TRUE ~ \"topomap\",\n      grepl(\"\\\\btopograph(y|ic|ical|ies)\\\\b.*\\\\bmap(s)?\\\\b|\\\\bmap(s)?\\\\b.*\\\\btopograph(y|ic|ical|ies)\\\\b\", words_prep) == TRUE ~ \"topographical map\",\n      grepl(\"\\\\btopograph(y|ic|ical|ies)\\\\b.*\\\\btime\\\\b|\\\\btime\\\\b.*\\\\btopograph(y|ic|ical|ies)\\\\b\", words_prep) == TRUE ~ \"time topography\",\n      grepl(\"\\\\b(topograph(y|ic|ical|ies)|topgraphy|topograhy|topograbphy|topgraphies)\\\\b\", words_prep) == TRUE ~ \"topography\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(map(s)?)\\\\b\", words_prep) == TRUE ~ \"scalp map\",\n      grepl(\"\\\\b(time(series)?|serie(s)?)\\\\b\", words_prep) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(distribution)\\\\b\", words_prep) == TRUE ~ \"scalp distribution\",\n      TRUE ~ '_other'\n      )) %>%  #View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Topo array\", \"n\")) \nn4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Topo array  n\n1                topo 39\n2          topography 36\n3           time topo 24\n4             topomap 13\n5     time topography 12\n6   topographical map  9\n7           scalp map  8\n8              _other  6\n9         topo series  6\n10        time series  5\n11            heatmap  3\n12 scalp distribution  3\n```\n:::\n:::\n\n\n#### 5\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn5 <- word_preproc(data, 97)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|\\\\?|unclear|-|ugly|don't|useless)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\btopograph(y|ic|ical|ies)?|toprgraphic\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\btopograph(y|ic|ical|ies)?|toprgraphic\\\\b\", words_prep) == TRUE ~ \"topographic erp\",\n      grepl(\"\\\\btopo(plot|plots)?\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\btopo(plot|plots)?\\\\b\", words_prep) == TRUE ~ \"topo erp\",\n      grepl(\"\\\\b(erp(s)?|eprs|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(multi(plot|channel|ploter|ploterp)|multi)\\\\b\", words_prep) == TRUE ~ \"multi or multichannel plot\",\n      grepl(\"\\\\b(topo(s)?|topoplot(s)?)\\\\b\", words_prep) == TRUE ~ \"topo\", \n      grepl(\"\\\\b(topograph(y|ic|ical|ies)?|topgraphy|topograhy|topograbphy|topgraphies)\\\\b\", words_prep) == TRUE ~ \"topography\",\n      grepl(\"\\\\b(channel(s|plot)?)\\\\b\", words_prep) == TRUE ~ \"channel\",\n      grepl(\"\\\\b(time(series)?|serie(s)?)\\\\b\", words_prep) == TRUE ~ \"time series\",\n      grepl(\"\\\\b(scalp)\\\\b\", words_prep) == TRUE ~ \"scalp\",\n      TRUE ~ '_other'\n      )) %>% #filter(type==\"erp\") %>% View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Topomap\", \"n\")) \nn5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     Topomap  n\n1                        erp 54\n2            topographic erp 29\n3 multi or multichannel plot 17\n4                     _other  9\n5                    channel  6\n6                   topo erp  5\n7                      scalp  4\n8                       topo  4\n9                time series  2\n```\n:::\n:::\n\n\n#### 6\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn6 <- word_preproc(data, 102)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\\\?|\\\\?\\\\?|unclear|-|ugly|don't|x|useless)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\bimage\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\bimage|erpimage|image\\\\b\", words_prep) == TRUE ~ \"erp image\",\n      grepl(\"\\\\bimage\\\\b.*\\\\bepoch(s)?\\\\b|\\\\bepoch(s)?\\\\b.*\\\\bimage\\\\b\", words_prep) == TRUE ~ \"epoch image\",\n      grepl(\"\\\\b(raster(plot)?)\\\\b\", words_prep) == TRUE ~ \"raster\",\n      grepl(\"\\\\b(waterfall)\\\\b\", words_prep) == TRUE ~ \"waterfall\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(sort(ed)?)\\\\b\", words_prep) == TRUE ~ \"sorted trials\",\n      grepl(\"\\\\b(erp(s)?|eprs|ersp|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(voltage)\\\\b\", words_prep) == TRUE ~ \"voltage\",\n      grepl(\"\\\\b(time(series)?|serie(s)?)\\\\b\", words_prep) == TRUE ~ \"time series or frequencies\",\n      grepl(\"\\\\b(trial(s|wise)?|trialplot)\\\\b\", words_prep) == TRUE ~ \"trial or trial variations\",\n      TRUE ~ '_other'\n      )) %>% #View()\n  dplyr::select(type) %>%  table(.) %>%  \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"ERP image\", \"n\")) \nn6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    ERP image  n\n1                   erp image 30\n2                         erp 12\n3                      _other  9\n4               sorted trials  9\n5   trial or trial variations  7\n6                     heatmap  6\n7                      raster  5\n8  time series or frequencies  4\n9                     voltage  3\n10                  waterfall  2\n```\n:::\n:::\n\n\n#### 7\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn7 <- word_preproc(data, 107)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\\\?|\\\\?\\\\?|unclear|-|ugly|don't|x|useless)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\b(amplitude(s)?)\\\\b\", words_prep) == TRUE ~ \"amplitudes\",\n      TRUE ~ '_other'\n      )) %>% #View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\")  %>% \n   rename_at(vars(colnames(.)), ~ c(\"Parallel plot\", \"n\")) \nn7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Parallel plot n\n1    amplitudes 4\n```\n:::\n:::\n\n\n#### 8\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn8 <- word_preproc(data, 112)  %>%\n  mutate(type = case_when(\n      grepl(\"\\\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|normal|\\\\?|\\\\?\\\\?|unclear|recall|-|ugly|don't|x|useless|nan|clear)\\\\b\", words_prep) == TRUE ~ \"bad\", \n      grepl(\"\\\\bimage\\\\b.*\\\\berp(s)?\\\\b|\\\\berp(s)?\\\\b.*\\\\bimage|erpimage\\\\b\", words_prep) == TRUE ~ \"erp image\",\n      grepl(\"\\\\bimage\\\\b.*\\\\bchannel\\\\b|\\\\bchannel\\\\b.*\\\\bimage|chanimage|imagesc\\\\b\", words_prep) == TRUE ~ \"channel image\",\n      grepl(\"\\\\b(heat(map)?)\\\\b\", words_prep) == TRUE ~ \"heatmap\",\n      grepl(\"\\\\b(image)\\\\b\", words_prep) == TRUE ~ \"image\",\n      grepl(\"\\\\b(raster(plot)?|custer)\\\\b\", words_prep) == TRUE ~ \"raster\",\n      grepl(\"\\\\b(matrix)\\\\b\", words_prep) == TRUE ~ \"matrix\",\n      grepl(\"\\\\b(channel(s|wise)?)\\\\b\", words_prep) == TRUE ~ \"channels\",\n      grepl(\"\\\\b(erp(s)?|eprs|ersp|event-related)\\\\b\", words_prep) == TRUE ~ \"erp\",\n      grepl(\"\\\\b(voltage)\\\\b\", words_prep) == TRUE ~ \"voltage\",\n     # TRUE ~ '_other'\n      )) %>% #View()\n  dplyr::select(type) %>%  table(.) %>% \n  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != \"bad\") %>% \n   rename_at(vars(colnames(.)), ~ c(\"Channel_image\", \"n\")) \n\nn8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Channel_image  n\n1      channels 10\n2           erp  9\n3       heatmap  8\n4     erp image  7\n5       voltage  6\n6         image  5\n7        raster  5\n8        matrix  4\n9 channel image  3\n```\n:::\n\n```{.r .cell-code}\nn8 %>% ggplot(data = ., aes(y = reorder(Channel_image, n),  x= n, fill = Channel_image)) +\n    geom_bar(stat=\"identity\") + ylab(\"Channel plot\") +\n    geom_text(aes(label = n), \n    hjust = -0.2) + theme_classic() + theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](plot_breakdown_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n#### Combined\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(n1, n2, n3, n4, n5, n6, n8) %>% kable(.) %>% kable_styling(\"striped\", position = \"center\",) \n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"kable_wrapper table table-striped\" style=\"margin-left: auto; margin-right: auto;\">\n<tbody>\n  <tr>\n   <td> \n\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Line plot </th>\n   <th style=\"text-align:right;\"> n </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> erp </td>\n   <td style=\"text-align:right;\"> 74 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> averaged erp </td>\n   <td style=\"text-align:right;\"> 30 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> _other </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> erp timecourse (timeseries) </td>\n   <td style=\"text-align:right;\"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> erp wave(form)s </td>\n   <td style=\"text-align:right;\"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> time series </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> average </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> single </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> line </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> response </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> p300 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> waveform </td>\n   <td style=\"text-align:right;\"> 2 </td>\n  </tr>\n</tbody>\n</table>\n\n </td>\n   <td> \n\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Butterfly_plot </th>\n   <th style=\"text-align:right;\"> n </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> single or individual channel erp </td>\n   <td style=\"text-align:right;\"> 19 </td>\n  </tr>\n</tbody>\n</table>\n\n </td>\n   <td> \n\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Topoplot </th>\n   <th style=\"text-align:right;\"> n </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> topography </td>\n   <td style=\"text-align:right;\"> 68 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> topo(plot) </td>\n   <td style=\"text-align:right;\"> 63 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> topomap </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> _other </td>\n   <td style=\"text-align:right;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> scalp map </td>\n   <td style=\"text-align:right;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> scalp distribution </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> heatmap </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n</tbody>\n</table>\n\n </td>\n   <td> \n\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Topo array </th>\n   <th style=\"text-align:right;\"> n </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> topo </td>\n   <td style=\"text-align:right;\"> 39 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> topography </td>\n   <td style=\"text-align:right;\"> 36 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> time topo </td>\n   <td style=\"text-align:right;\"> 24 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> topomap </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> time topography </td>\n   <td style=\"text-align:right;\"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> topographical map </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> scalp map </td>\n   <td style=\"text-align:right;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> _other </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> topo series </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> time series </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> heatmap </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> scalp distribution </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n</tbody>\n</table>\n\n </td>\n   <td> \n\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Topomap </th>\n   <th style=\"text-align:right;\"> n </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> erp </td>\n   <td style=\"text-align:right;\"> 54 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> topographic erp </td>\n   <td style=\"text-align:right;\"> 29 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> multi or multichannel plot </td>\n   <td style=\"text-align:right;\"> 17 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> _other </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> channel </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> topo erp </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> scalp </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> topo </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> time series </td>\n   <td style=\"text-align:right;\"> 2 </td>\n  </tr>\n</tbody>\n</table>\n\n </td>\n   <td> \n\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> ERP image </th>\n   <th style=\"text-align:right;\"> n </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> erp image </td>\n   <td style=\"text-align:right;\"> 30 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> erp </td>\n   <td style=\"text-align:right;\"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> _other </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sorted trials </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> trial or trial variations </td>\n   <td style=\"text-align:right;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> heatmap </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> raster </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> time series or frequencies </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> voltage </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> waterfall </td>\n   <td style=\"text-align:right;\"> 2 </td>\n  </tr>\n</tbody>\n</table>\n\n </td>\n   <td> \n\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Channel_image </th>\n   <th style=\"text-align:right;\"> n </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> channels </td>\n   <td style=\"text-align:right;\"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> erp </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> heatmap </td>\n   <td style=\"text-align:right;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> erp image </td>\n   <td style=\"text-align:right;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> voltage </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> image </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> raster </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> matrix </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> channel image </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n</tbody>\n</table>\n\n </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Struggles with plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- names(data[ , grepl( \".*Which parts of*.\" , names(data))])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_preproc_tool_2 <- function(data, N, lim){\n  #lim = 10\n  tmp <- data %>% dplyr::select(N, N+1, N+2) %>% dplyr::rename(soft = !!names(.)[1], parts = !!names(.)[2], new_feature = !!names(.)[3]) %>% \n    filter(!is.na(soft)) %>% \n    mutate_at(vars(colnames(.)), funs(tolower(.))) %>% \n    mutate(soft = str_replace(soft, 'own', \"custom\"), \n           soft = str_replace(soft, '(matlab)', \"matlab\"), \n           soft = case_when(\n      str_detect(soft, 'brain vision') ~ \"brain vision analyser\",\n      #str_detect(soft, 'matlab|bar.m|boundedline') ~ \"custom matlab\",\n      str_detect(soft, 'mne') ~ \"mne\",\n      TRUE ~ as.character(soft)\n    ), \n    parts = case_when(\n      str_detect(parts, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(parts)\n    ),\n    new_feature = case_when(\n      str_detect(new_feature, 'none|n/a|nope|na|idk|nothing|sure|know|can\\'t|don\\'t') ~ \"-\",\n      TRUE ~ as.character(new_feature)\n    )) %>% \n  \n    filter_at(vars(parts, new_feature), all_vars(!is.na(.))) %>% mutate(n = lengths(gregexpr(\"\\\\W+\", soft)) + 1) %>% \n    filter(parts != \"-\" | new_feature != \"-\", n < lim) %>%  dplyr::select(-4) %>% arrange(soft)\n  return(tmp)\n}\n```\n:::\n\n\n#### 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstruggle1 <- word_preproc_tool_2(data, 71, 10) \nseparated_row <- separate_rows(struggle1[98, ], parts, sep = \",|\\\\.\") %>% dplyr::select(parts)\n\nstruggle1 <- struggle1 %>% filter( parts != \"-\") %>% dplyr::select(parts) %>% \n  filter(!row_number() %in% c(2, 11, 40, 41, 69, 78, 83, 87, 89, 91))  %>% \n  separate_rows(parts, sep = \"2\\\\)\", convert = FALSE) %>% \n  separate_rows(parts, sep = \"\\\\\\r\\\\\\n\", convert = FALSE) %>%  rbind(., separated_row) %>%\n  mutate(problems = case_when(\n      grepl(\"\\\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\\\b\", parts) == TRUE ~ \"uncertainty\", \n      grepl(\"\\\\b(axes|lable(s)?|label(s)?|legend|ticks)\\\\b\", parts) == TRUE ~ \"plot components\\n(axes, lables, legend)\", \n      grepl(\"\\\\b(color(s)?|colour(s)?|proportion(s)?|publication|scal(e|ing))\\\\b\", parts) == TRUE ~ \"styling\", \n      grepl(\"\\\\b(preprocessing|extracting|datatype)\\\\b\", parts) == TRUE ~ \"preprocessing\", \n      grepl(\"\\\\b(syncronisation|organizing|groups)\\\\b\", parts) == TRUE ~ \"subplotting\", \n      grepl(\"\\\\b(mean|significan(t|ce)|permutations|combine)\\\\b\", parts) == TRUE ~ \"statistics\", \n      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems))  %>% group_by(problems) %>% dplyr::summarise(n = n()) %>% mutate(percent = round(n / sum(n), 2) * 100) \n\nstruggle1 %>% \n  arrange(desc(n)) %>% \n  kable(escape = F, booktabs = T) %>% kable_styling(\"striped\", position = \"center\",) %>% \n  kable_classic(full_width = F, html_font = \"Arial\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped lightable-classic\" style=\"margin-left: auto; margin-right: auto; font-family: Arial; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> problems </th>\n   <th style=\"text-align:right;\"> n </th>\n   <th style=\"text-align:right;\"> percent </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> uncertainty </td>\n   <td style=\"text-align:right;\"> 57 </td>\n   <td style=\"text-align:right;\"> 63 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> plot components\n(axes, lables, legend) </td>\n   <td style=\"text-align:right;\"> 13 </td>\n   <td style=\"text-align:right;\"> 14 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> styling </td>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> statistics </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> preprocessing </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> subplotting </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n```{.r .cell-code}\n # words = ifelse(nchar(words)==0, NA, words),\n #  write.xlsx(., \"data/struggles.xlsx\", sheetName = \"line plot\", col.names = TRUE, row.names = TRUE, append = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstruggle1 %>% \n  arrange(desc(n)) %>% \n  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +\n  geom_col() +\n  geom_text(aes(label = paste0(percent, \"%\"), y = problems, x = percent),\n            position = position_stack(vjust = 0.5), color = \"black\") +\n  labs(x = \"Percent\", y  = \"Problem category\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12), legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](plot_breakdown_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## New features\n\n\n<!-- ## Frequency of tool usage -->\n\n<!-- ```{r} -->\n<!-- vec <- names(data[ , grepl( \".*Which plotting\" , names(data))]) %>% str_split_i(., \"\\\\? \\\\]\", 2) %>%  -->\n<!--   str_split_i(., \"\\\\...\", 2) %>% as.numeric() -->\n<!-- ``` -->\n\n<!-- ```{r} -->\n<!-- word_preproc_tool <- function(data, N, lim){ -->\n<!--   N = 71 -->\n<!--   #lim = 10 -->\n<!--   tmp <- data %>% dplyr::select(N) %>% filter(!is.na(.)) %>% dplyr::rename(words = !!names(.)[1]) %>%  -->\n<!--     mutate(words = ifelse(str_detect(words, 'own|costum'), \"custom\", as.character(words))) %>%  -->\n<!--   mutate(n = lengths(gregexpr(\"\\\\W+\", words)) + 1) %>% arrange(desc(n)) -->\n<!--   rest <- tmp %>% filter(n >= lim) %>% dplyr::select(words) -->\n<!--   tmp <- tmp %>% filter(n < lim) %>% dplyr::select(words) -->\n\n<!--   t <- foreach(i = 1:nrow(tmp)) %do% strsplit(tmp[[1]][i], \",|/|\\\\|+| and |&| or |\\\\n|\\\\r|;\") -->\n<!--   tul <- foreach(i = 1:nrow(tmp)) %do% unlist(t[[i]]) -->\n<!--   tul1 <- unlist(tul) -->\n<!--   tul2 <- tul1[tul1!=\"\"] -->\n<!--   tul2[tul2==\"-\"] <- NA -->\n<!--   tul2 <- na.omit(tul2) -->\n\n<!--   #t <- foreach(i = 1:nrow(tmp)) %do% tokenize_words(as.character(tmp[i, N]), strip_punct = FALSE) -->\n<!--   stop_list = c(\"a\", \"an\", \"the\", \"wise\", \"by\", \"over\", \"of\", \"per\", \"for\", \"like\", \"s\", \"at\", \"code\", \"script\", \"recently\", \"my\", \"in\", \"written\", \"using\", \"built\", \"function\", \"plot\", \"with\",  \"itself\", \"scripting\", \"scrip\", \"scripts\", \"basic\")#, \"custom\") -->\n<!--   t1 <- foreach(i = 1:length(tul2)) %do% tokenize_words(as.character(tul2[i])) -->\n\n\n<!--   t2 <- foreach(i = 1:length(t1)) %do% map(t1[i][[1]], singularize) -->\n<!--   t21 <- foreach(i = 1:length(t2)) %do% tokenize_words(as.character(t2[i][[1]])) -->\n<!--   t22 <- foreach(i = 1:length(t21)) %do% t21[i][[1]][[1]][!(t21[i][[1]][[1]] %in% stop_list)] -->\n<!--   t3 <- foreach(i = 1:length(t22)) %do% paste((unlist(t22[i])), collapse = ' ')  -->\n<!--   t4 <- data.frame(matrix(t3)) #%>% dplyr::rename(words = !!names(.)[1]) -->\n<!--   return(c(t4, rest)) -->\n<!-- } -->\n<!-- ``` -->\n\n<!-- #### 1 -->\n\n<!-- ```{r} -->\n<!-- test <- word_preproc_tool(data, 71, 10)  -->\n<!-- rest <- test[[2]] -->\n<!-- fromrest <- data.frame(words = c(\"fieldtrip\",\"r\", \"matlab\", \"fieldtrip\", \"adobe illustrator\", \"custom matlab\", \"custom matlab\", \"mne\" )) -->\n\n<!-- base <- data.frame(matrix(test[[1]]))%>% dplyr::rename(words = !!names(.)[1])%>%  -->\n<!--   mutate(words = ifelse(nchar(words)==0, NA, words)) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'brain vision'), \"brain vision analyser\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'mne'), \"mne\", as.character(words))) %>%  rbind(., fromrest) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'ggplot'), \"ggplot\", as.character(words)))  -->\n\n<!-- words <- base %>%  -->\n<!--   table(.) %>%  -->\n<!--   data.frame(.) %>%  arrange(desc(Freq))  -->\n\n<!-- narrow1 <- base %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'matlab|bar.m|boundedline'), \"custom matlab\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'fieldtrip'), \"fieldtrip\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'eeglab'), \"EEGLAB\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'erplab'), \"ERPLAB\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'python|seaborn|matplotlib|plotly'), \"custom python\", as.character(words))) %>% -->\n<!--   mutate(words = ifelse(str_detect(words, 'mne'), \"MNE\", as.character(words))) %>% -->\n<!--   mutate(words = ifelse(str_detect(words, 'ggplot|\\\\br\\\\b'), \"custom r\", as.character(words))) %>%  -->\n<!--   table(.) %>%  -->\n<!--   data.frame(.) %>%  arrange(desc(Freq)) -->\n<!-- narrow1 %>% head() -->\n<!-- ``` -->\n\n<!-- #### 2 -->\n\n\n<!-- ```{r} -->\n<!-- test <- word_preproc_tool(data, 82, 10)  -->\n<!-- rest <- test[[2]] -->\n<!-- fromrest <- data.frame(words = c(\"fieldtrip\",\"r\", \"matlab\", \"fieldtrip\", \"adobe illustrator\", \"custom matlab\", \"custom matlab\", \"mne\" )) -->\n\n<!-- base <- data.frame(matrix(test[[1]]))%>% dplyr::rename(words = !!names(.)[1])%>%  -->\n<!--   mutate(words = ifelse(nchar(words)==0, NA, words)) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'brain vision'), \"brain vision analyser\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'mne'), \"MNE\", as.character(words))) %>%  rbind(., fromrest) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'ggplot'), \"ggplot\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'own|cusom'), \"custom\", as.character(words)))  -->\n\n<!-- words <- base %>%  -->\n<!--   table(.) %>%  -->\n<!--   data.frame(.) %>%  arrange(desc(Freq))  -->\n\n<!-- narrow2 <- base %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'matlab|bar.m|boundedline'), \"custom matlab\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'fieldtrip|fieldteip|field trip'), \"fieldtrip\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'eeglab'), \"EEGLAB\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'erplab'), \"ERPLAB\", as.character(words))) %>%  -->\n<!--   mutate(words = ifelse(str_detect(words, 'python|seaborn|matplotlib|plotly'), \"custom python\", as.character(words))) %>% -->\n<!--   mutate(words = ifelse(str_detect(words, 'ggplot|\\\\br\\\\b'), \"custom r\", as.character(words))) %>%  -->\n<!--    mutate(words = ifelse(str_detect(words, 'cartool'), \"cartool\", as.character(words))) %>%  -->\n<!--   table(.) %>%  -->\n<!--   data.frame(.) %>%  arrange(desc(Freq)) -->\n<!-- narrow2 %>% head() -->\n\n<!-- ``` -->\n",
    "supporting": [
      "plot_breakdown_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
---
title: "exploration"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
editor: visual
---

## Setup

```{r, message= FALSE, warning=FALSE}
# upload to the git
library(readxl)
library(foreach)
library(stringr)
library(dplyr)
library(tokenizers)
library(data.table)
library(ggplot2)
library(plyr)
library(quanteda)
library(SemNetCleaner)
library(purrr)
library(tidytext)
library(tm)
library(topicmodels)
library(SnowballC)
library(Matrix)
library(text2vec)
library(tidyr)
library(kableExtra)

```

```{r, message= FALSE, warning=FALSE}
data <- read_excel("data/results-survey3.xlsx")
data <- data[1:121] %>% 
  filter(.[[18]] !='Yes') # not analysed any EEG method
```

## Bio stats

#### Country

```{r}
data.frame(table(data[8]))  %>% dplyr::rename(country_work = !!names(.)[1]) %>%
  mutate(country_work = ifelse(Freq >= 3, as.character(country_work), "_Others")) %>% group_by(country_work) %>% 
  dplyr::summarise(Freq = sum(Freq)) %>% 
    ggplot(data = ., aes(y = reorder(country_work, Freq),  x= Freq, fill = country_work)) +
    geom_bar(stat="identity") + ylab("Country of work for participant") +
    geom_text(aes(label = Freq), 
    hjust = -0.2) + theme_classic() + theme(legend.position="none")

```

#### Field

```{r}
field <- as.data.frame(table(data[9])) %>% arrange(desc(Freq)) %>% head(3)
field$Freq[1] <- field$Freq[1] + 1 # from Others
field$Freq[2] <- field$Freq[2] + 1
field$Freq[3] <- field$Freq[3] + 1
field %>% dplyr::rename(area = !!names(.)[1]) %>%
    ggplot(data = ., aes(x = reorder(area, Freq),  y= Freq, fill = area)) +
    geom_bar(stat="identity") + xlab("Area of research") +
    geom_text(aes(label = Freq), 
    vjust = -0.2) + theme_classic() + theme(legend.position="none")
```

```{r, include=FALSE}
as.data.frame(na.omit(data[10])) 
# recode!!! 
```

### Area

```{r}
t <- foreach(i = 1:nrow(data)) %do% tokenize_words(as.character(data[i, 11]))
tt <- foreach(i = 1:length(t)) %do% paste(unlist(t[i]), collapse = ' ') 


area <- data.frame(matrix(tt)) %>% dplyr::rename(words = !!names(.)[1]) %>%
  mutate(words = ifelse(str_detect(.[[1]], 'emot|empathy'), "affective neuroscience", words)) %>%  
  #mutate(words =ifelse(str_detect(.[[1]], 'spatial'), "spatial", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'memory'), "memory", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'hearing|audit'), "auditory", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'cognition|consciousness|meditation|cognitive control|self|executive functions'), "cognitive control", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'dbs'), "deep brain stimulation", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'decision making|reward'), "decision making", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'ageing'), "ageing", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'social'), "social cognition", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'olfac'), "olfaction", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'communication|language|speech|biling|english|language processing'), "language and speech", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'bci'), "bci", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'sleep'), "sleep", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'timing|time|temporal'), "time", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'cognitive load|selective attention|attention|perception'), "attention and perception", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'vis'), "vision", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'developmental|development'), "development", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'spatial|brain body|motor|motion'), "motor control", words)) %>% 
  mutate(words =ifelse(str_detect(.[[1]], 'diagnostics|disorder|psychiatry|epilepsy|autism|patients|therapy|psychopharmacology'), "mental disorders", words)) %>%   
  mutate(words =ifelse(str_detect(.[[1]], 'signal processing|event related potentials|method|sdf|ieeg'), "dsp", words))

   
area %>% group_by(words) %>% dplyr::summarise(Freq = n()) %>% 
  data.frame(.)  %>% mutate(words = as.character(words)) %>%  #arrange(desc(Freq)) %>% 
    ggplot(data = ., aes(y = reorder(words, Freq),  x= Freq, fill = words)) +
    geom_bar(stat="identity") + ylab("Words") +
    geom_text(aes(label = Freq), 
    hjust = -0.2) + theme_classic() + theme(legend.position="none")

```

### Method

```{r}
method <- data[14:17]
ch <- colnames(method)
ch1 <- foreach(i = ch) %do% str_split_i(i, "\\? \\[", 2) 
colnames(method) <- foreach(i = ch1) %do% str_sub(i, 1, -2)
d <- data.frame(rowSums(t(data.frame(foreach(i = colnames(method)) %do% ifelse(method[i]=="Yes", 1, 0))))) 
d <- tibble::rownames_to_column(d, "plots") 
colnames(d) <- c("method", "sum_scores")
d %>% arrange(desc(sum_scores)) %>% 
    ggplot(., aes(x = reorder(method, sum_scores), y = sum_scores, fill = method)) +
    geom_col(stat = "identity") + labs(x = "Method", y = "Value", fill = "Method") +
    theme_classic() + theme(legend.position="none")
```

### Experience

Papers

```{r}
data[19] %>% dplyr::rename(papers = !!names(.)[1]) %>% filter(papers < 100) %>%  ggplot(data = ., aes(papers)) +
  geom_histogram() +
  labs(x ="How many published papers/preprints do you have, where you used EEG, MEG or iEEG analysis?") + theme_classic()
# PCA for clustering it 
```

Position

```{r}
#na.omit(data[13]) # recode Others
as.data.frame(table(na.omit(data[12]))) %>% dplyr::rename(position = !!names(.)[1]) %>%
  arrange(desc(Freq)) %>% 
    ggplot(data = ., aes(y = reorder(position, Freq),  x= Freq, fill = position)) +
    geom_bar(stat="identity") + ylab("Position") +
    geom_text(aes(label = Freq), 
    hjust = -0.2) + theme_classic() + theme(legend.position="none")
```

Years

```{r}
data %>% filter(.[[20]] < 50) %>% ggplot(data = ., aes_(as.name(names(data)[20]))) +
  geom_histogram() +  scale_x_continuous(breaks=seq(0, 30, 5)) +
    labs(x ="Years of experience with EEG, MEG, or iEEG analysis") + theme_classic()
```

Self-assessed level

```{r}
table(data[21]) %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%
    ggplot(data = ., aes(x = level, y= Freq, fill = level)) +
    geom_bar(stat="identity") + xlab("Self-assessed level") +
    geom_text(aes(label = Freq), vjust = -0.2) + theme_classic() + theme(legend.position="none") +
    scale_x_discrete(limits = c("Beginner", "Intermediate", "Expert")) 

```

Code contribution

```{r}
table(data[22])  %>% data.frame()%>% dplyr::rename(level = !!names(.)[1]) %>%
    ggplot(data = ., aes(x = reorder(level, Freq),  y= Freq, fill = level)) +
    geom_bar(stat="identity") + xlab("Code contribution") +
    geom_text(aes(label = Freq), vjust = -0.2)  + theme_classic() + theme(legend.position="none")
```

### Channels

How many channels do you typically measure?

```{r}
data %>% ggplot(data = ., aes_(as.name(names(data)[23]))) +
  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30)) +
    labs(x ="How many channels do you typically measure?")
```

How many channels do you typically measure?

```{r}
data %>% filter(.[[24]] < 500) %>% ggplot(data = ., aes_(as.name(names(data)[24]))) +
  geom_histogram() +  scale_x_continuous(breaks=seq(0, 300, 30))+
    labs(x ="How many channels of those you measured do you typically analyse?")

# plots should be combined
```

## Software usage

#### frequency

```{r}
na.omit(data[51]) %>% nrow()
 

other <- c(rep("Custom scripts",each=9), "4DBTi", rep("letswave", 3), "mTRF", "RAGU", "IGOR Pro", "EEGProcessor", "ELAN", "WinEEG") %>% table(.) %>% data.frame(.) %>% rename_at(vars(colnames(.)), ~ c("soft", "sum_scores"))
```

```{r, warning=FALSE}
vec <- names(data[25:50]) %>% str_split_i(., "\\? \\[", 2) %>%  str_sub(., 1, -2)

software <- data[25:50] %>%
    rename_at(vars(colnames(.)), ~ vec) %>% 
  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.=="Yes", 1, 0)))


d <- data.frame(rowSums(t(software))) %>%  tibble::rownames_to_column(., "soft") %>% 
   rename_at(vars(colnames(.)), ~ c("soft", "sum_scores"))   %>% 
  rbind(., other) %>% dplyr::group_by(soft) %>% dplyr::summarise(sum_scores = sum(sum_scores)) %>% 
  arrange(., desc(sum_scores))

d  %>% filter(sum_scores >= 1) %>% mutate(soft = ifelse(sum_scores >= 3, as.character(soft), "_Others")) %>% group_by(soft) %>% 
  dplyr::summarise(sum_scores = sum(sum_scores)) %>% 
    ggplot(data = ., aes(y = reorder(soft, sum_scores),  x= sum_scores, fill = soft)) +
    geom_bar(stat="identity") + ylab("Soft") +
    geom_text(aes(label = sum_scores), 
    hjust = -0.2) + theme_classic() + theme(legend.position="none")

```


#### cooccurence

```{r, warning=FALSE}
# how to order by diagonal matrix 
# how to add others
software <- data[25:50]
ch <- colnames(software)
ch1 <- foreach(i = ch) %do% str_split_i(i, "\\? \\[", 2) 
ch1 <- foreach(i = ch1) %do% str_sub(i, 1, -2)
d1 <- foreach(i = colnames(software)) %do% ifelse(software[i]=="Yes", 1, 0)
c <- crossprod(matrix(unlist(d1), ncol = 26))
rownames(c) <- ch1
colnames(c) <- rownames(c)

diag.order <- order(diag(c), decreasing = FALSE)
mat_reordered <- c[diag.order, diag.order]

melt(mat_reordered) %>% ggplot(., aes(x=Var1, y=Var2)) + 
  geom_tile(aes(fill = value)) + 
  geom_text(aes(label = value)) +
  scale_fill_gradient(low = "white", high = "red") +
  theme(legend.title = element_blank(),
        axis.title=element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 1, hjust=1)) 

```


## Important features

```{r, warning=FALSE}
features <- data[52:60]
ch <- colnames(features)
ch1 <- foreach(i = ch) %do% str_split_i(i, "\\? \\[", 2) 
colnames(features) <- foreach(i = ch1) %do% str_sub(i, 1, -2)

features <- features %>%  mutate_at(c(colnames(features)), 
        funs(recode(.,
        "Very important"= 2, "Important"= 1, "Neutral"= 0,
        "Low importance"= -1, "Not at all important" = -2 ))) %>% 
  colSums(., na.rm =T) %>% data.frame(.) %>%  tibble::rownames_to_column(., "Feature") %>% 
  arrange(desc(.))
colnames(features) <- c("Feature", "sum_scores")
features %>%   kbl() 
# divide by number of people 
# individual plots
# correlation with experience factor
```

## Familiarity with plots
#### Recognition

```{r, warning=FALSE}
vec <- c("line", "butterfly", "topo", "topo_array", "topo_map", "erp_image", "parallel", "channel_image")
familiar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ vec) %>% 
  mutate_at(vars(vec), function(., na.rm = FALSE) (x = ifelse(.=="Yes", 1, 0)))

data.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., "plot") %>% 
   rename_at(vars(colnames(.)), ~ c("plot", "sum_scores"))  %>% 
  arrange(., desc(sum_scores)) %>% 
  ggplot(data = ., aes(y = reorder(plot, sum_scores), x= sum_scores, fill=plot)) +
  geom_bar(stat="identity") + ylab("plot") + theme_classic() + 
  theme(legend.position="none", plot.title = element_text(hjust = 0.5)) +
  ggtitle("Select ERP plot you are familiar with") 

```

#### Plotting

```{r}
vec <- names(data[ , grepl( "Have you ever plotted" , names(data))])
```

```{r}

do_vec <- function(vec, data){
  t1 <- table(data[vec[1]])
  for (i in 2:length(vec)) {
    t <- table(data[vec[i]])
    t1 <- rbind(t1, t)
  }
  rownames(t1) <- array(paste0("t_", 1:length(vec)))
  return(t1)
}
tab <- do_vec(vec, data) %>%  data.frame() %>% tibble::rownames_to_column(., "plots") %>%  
  gather(., answer, score, `N.A`:`Yes`, factor_key=TRUE) %>% 
  mutate(answer = str_replace(answer, 'N.A', "No"))

tab %>% 
  ggplot(., aes(x = plots, y = score, fill = answer)) +
    geom_bar(position = "dodge", stat = "identity") +
    labs(x = "Category", y = "Value", fill = "Group") +
    theme_classic() +  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("Have you ever plotted this kind of figure?")



```

#### Recognition and plotting

```{r, warning=FALSE}
vec <- names(data[ , grepl( "Have you ever plotted " , names(data))]) #%>% str_split_i(., "\\.....", 2) 
plot_names <- c("line", "butterfly", "topo", "topo_array", "topo_map", "erp_img", "parallel", "channel_img")

do_vec <- function(vec, data, plot_names){
  t1 <- table(data[vec[1]])
  for (i in 2:length(vec)) {
    t <- table(data[vec[i]])
    t1 <- rbind(t1, t)
  }
  rownames(t1) <- plot_names #array(paste0("t_", 1:length(vec)))
  return(t1)
}
tab <- do_vec(vec, data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., "plots") %>%  
  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% 
  filter(type == "Yes") %>% dplyr::select(-type) 

familiar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% 
  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.=="Yes", 1, 0)))

data.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., "plot") %>% 
   rename_at(vars(colnames(.)), ~ c("plots", "recognized")) %>% merge(., tab)  %>% 
  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% 
  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +
    geom_bar(position = "dodge", stat = "identity") +
    labs(x = "Plot type", y = "Number of users", fill = "Level of familiarity\nwith plot") +
    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2) +  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("Familiarity with plots")
```

## Up or down

```{r}
table(data[79]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c("position", "scores")) %>% 
    ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +
    geom_bar(position = "dodge", stat = "identity", width=0.5) + theme_classic() +
  theme(axis.title.x=element_blank(), legend.position="none", plot.title = element_text(hjust = 0.5)) +
  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +
  ggtitle("In ERP plot, should positive voltages be plotted upwards, or downwards?")
```

## Error bars

```{r}
table(data[74]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c("position", "scores")) %>% 
    ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +
    geom_bar(position = "dodge", stat = "identity", width=0.5) + theme_classic() +
  theme(axis.title.x=element_blank(), legend.position="none", plot.title = element_text(hjust = 0.5)) +
  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +
  ggtitle("In your paper, did you published ERP plot with error bars?")
```

```{r}
data[75] %>%  filter(!is.na(.)) %>% table()  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c("position", "scores")) %>% 
    ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +
    geom_bar(position = "dodge", stat = "identity", width=0.5) + theme_classic() +
  theme(axis.title.x=element_blank(), legend.position="none", plot.title = element_text(hjust = 0.5)) +
  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +
  ggtitle("In your figure, what did error bars depicted?")
```

```{r}
data[76] %>%  filter(!is.na(.)) %>% table()
```

## Baseline

#### periods

```{r}
table(abs(data[77])) %>% data.frame() %>%  dplyr::rename(baseline = !!names(.)[1]) %>%
    ggplot(data = ., aes(x = baseline, y= Freq)) +
    geom_bar(stat="identity") + xlab("Recomended baseline in msec") +  
  scale_y_continuous(breaks=seq(0, 60, 5)) + theme_classic() +
  theme(legend.position="none", plot.title = element_text(hjust = 0.5)) +
  geom_text(aes(label = Freq, group = baseline), position = position_dodge(width = .9), vjust = -0.2)
```

#### justification

```{r}
# If you don't want to provide a number on previous question, please, provide a justification
# depends on what??
# manual categorization of depending
j <- data %>%    
  dplyr::rename(q = !!names(.)[78]) %>% filter(!is.na(q)) %>% dplyr::select(q) %>% 
  mutate(q = tolower(q)) %>% mutate(q = gsub('depends in|depending on', 'depends on', q),
         dependson = ifelse(grepl("depends|depend", q), q, NA)) %>% 
  separate(dependson, into = c("a","b"), sep = "depends on |depend on ") %>% 
  dplyr::select(-a) %>% 
  dplyr::rename(dependson = b) #%>% 
j %>% filter(is.na(dependson))  %>% select(-dependson)
j %>% filter(!is.na(dependson)) %>% select(dependson)
  #View()
```

## Colorbars

```{r}
table(data[117]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c("position", "scores")) %>% 
  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +
    geom_bar(position = "dodge", stat = "identity", width=0.5) + theme_classic() +
  theme(axis.title.x=element_blank(), legend.position="none", plot.title = element_text(hjust = 0.5)) +
  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +
  ggtitle("Are you aware of perceptual controvericies of colorbars?")
```

```{r}
table(data[118]) %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c("position", "scores")) %>% 
  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +
    geom_bar(position = "dodge", stat = "identity", width=0.5) + theme_classic() +
  theme(axis.title.x=element_blank(), legend.position="none", plot.title = element_text(hjust = 0.5)) +
  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +
  ggtitle("Do you know about two-dimensional colorbars?")
```

```{r}
table(data[119])  %>% data.frame() %>% rename_at(vars(colnames(.)), ~ c("position", "scores")) %>% 
  ggplot(., aes(x = position, y = scores, fill = as.factor(scores))) +
    geom_bar(stat = "identity", width=0.5)  + theme_classic() +
  theme(axis.title.x=element_blank(), legend.position="none", plot.title = element_text(hjust = 0.5)) +
  geom_text(aes(label = scores, group = position), position = position_dodge(width = .9), vjust = -0.2) +
  ggtitle("Would you like to use a two-dimensional colorbar\nin your publications, if it was easily available?")
```

## Feedback

```{r}
feed <- data[120] %>% dplyr::rename(feed = !!names(.)[1]) %>%  filter(!is.na(feed), feed != "-") #%>% View()
feed  %>%
  filter(!row_number() %in% c(3, 14, 17, 32, 37, 41))# just appreciation
```

```{r, eval = FALSE, echo = FALSE}
corpus <- VCorpus(VectorSource(d))
corpus <- corpus %>%
  tm_map(removeNumbers) %>%
  tm_map(removePunctuation) %>%
  tm_map(stripWhitespace) %>%
  tm_map(content_transformer(tolower)) %>%
  tm_map(removeWords, stopwords("english")) %>%
  tm_map(stemDocument)

corpus[[1]][[1]][1]
  
dtm <- DocumentTermMatrix(corpus)
lda <- LDA(dtm, k = 10)
terms(lda, 10)



```

## Time of finishing survey in minutes

```{r}
median(as.numeric(as.matrix(data[121]))) / 60
```

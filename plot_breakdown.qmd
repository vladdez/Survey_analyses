---
title: "3.plot_breakdown"
format: html
editor: visual
---

## Setup

```{r, message= FALSE, warning=FALSE}
# upload to the git
library(readxl)
library(foreach)
library(stringr)
library(dplyr)
library(tokenizers)
library(data.table)
library(ggplot2)
library(plyr)
library(quanteda)
library(SemNetCleaner)
library(purrr)
library(tidytext)
library(tm)
library(topicmodels)
library(SnowballC)
library(Matrix)
library(text2vec)
library(tidyr)
library(kableExtra)
library(stringi)
library("xlsx")
library(padr)
```

```{r, message= FALSE, warning=FALSE}
data <- read_excel("data/results-survey3.xlsx")
data <- data[1:121] %>% 
  filter(.[[18]] !='Yes') # not analysed any EEG method
vec <- names(data[ , grepl( "How would you " , names(data))])
```

## word_preproc

```{r}
word_preproc <- function(data, N){
 # N = 69
  stop_list = c("a", "an", "the", "wise", "like", "s", "plot", "plots")
  tmp <- data %>% filter(!is.na(.[[N]])) %>% select(., N) %>% 
    dplyr::rename(words = !!names(.)[1]) %>% mutate(words = tolower(words)) %>% 
    mutate(words_prep = str_split(words, "\\s+")) %>%
    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = " "))) %>% 
    mutate(words_prep = stri_replace_all_regex(words_prep,
                                  pattern=c(" \\(.*", ", or.*", " across.*", " with.*", " at.*", " by.*", " over.*", #" of.*", 
                                            " for.*", " per.*", " across.*", " accross.*", " between.*"),
                                  replacement=c(''),
                                  vectorize=FALSE)) %>% 
    mutate(words_prep = str_split(words_prep, "\\s+")) %>%
    mutate(words_prep = sapply(words_prep, function(x) paste(x[!x %in% stop_list], collapse = " ")))
     
  return(tmp)
}

```

## Plot naming

Those who named a plot somehow and those who failed to do that

```{r, warning=FALSE}
plot_names <- c("line", "butterfly", "topo", "topo_array", "topo_map", "erp_img", "parallel", "channel_img")

na_table <- function(data, vec){
    temp <- data.frame(1:10)
    for (i in vec){
      temp1 <- word_preproc(data, i)  %>%
      mutate(words = ifelse(str_detect(words, 'idea|sure|confus|aware|do not|why'), "NA", as.character(words))) %>%
      mutate(words = ifelse(nchar(words)==0, NA, words)) %>% 
      table(.) %>% 
      data.frame(.) %>% filter(words != "NA") %>% 
      summarise(n = sum(Freq))  
      temp <- cbind(temp, temp1)
    }
    temp <- temp[2:length(temp)]
    colnames(temp) <- plot_names
    return(temp)
}

num_named <- na_table(data, vec)
slice(num_named, 1)  %>% 
  gather(., plots, succeeded, `line`:`channel_img`, factor_key=TRUE) %>% 
  mutate(failed = nrow(data) - succeeded) %>% 
  gather(., res, score, succeeded:failed, factor_key=TRUE) %>% 

  ggplot(., aes(x = plots, y = score, fill = res)) +
    geom_bar(position = "dodge", stat = "identity") +
    labs(x = "Category", y = "Value", fill = "Group") +
    theme_classic() + theme(axis.title.x=element_blank(), plot.title = element_text(hjust = 0.5)) +
  geom_text(aes(label = score, group = res), position = position_dodge(width = .9), vjust = -0.2) +
  ggtitle("Plot naming")


```


```{r, warning=FALSE}
vec <- names(data[ , grepl( "Have you ever plotted " , names(data))]) 


do_vec <- function(vec, data, plot_names){
  t1 <- table(data[vec[1]])
  for (i in 2:length(vec)) {
    t <- table(data[vec[i]])
    t1 <- rbind(t1, t)
  }
  rownames(t1) <- plot_names #array(paste0("t_", 1:length(vec)))
  return(t1)
}
tab <- do_vec(vec, data, plot_names) %>%  data.frame() %>% tibble::rownames_to_column(., "plots") %>%  
  gather(., type, plotted, `N.A`:`Yes`, factor_key=TRUE) %>% 
  filter(type == "Yes") %>% dplyr::select(-type) 

memoried <- slice(num_named, 1)  %>% 
  gather(., plots, succeeded, `line`:`channel_img`, factor_key=TRUE)%>% 
  mutate(failed = nrow(data) - succeeded) %>% 
  dplyr::rename(named = succeeded) %>% 
  dplyr::select(-failed)

familiar <-  data[61:68] %>% rename_at(vars(colnames(.)), ~ plot_names) %>% 
  mutate_at(vars(plot_names), function(., na.rm = FALSE) (x = ifelse(.=="Yes", 1, 0)))

data.frame(rowSums(t(familiar))) %>%  tibble::rownames_to_column(., "plot") %>% 
   rename_at(vars(colnames(.)), ~ c("plots", "recognized")) %>%
  merge(., memoried)  %>% left_join(., tab)  %>% #filter(plots != "parallel") %>% 
  gather(., type, score,  recognized:plotted, factor_key=TRUE) %>% 
  ggplot(., aes(x = reorder(plots, -score), y = score, fill = type)) +
    geom_bar(position = "dodge", stat = "identity") +
    labs(x = "Plot type", y = "Number of users", fill = "Level of\nfamiliarity\nwith plot") +
    theme_classic() + geom_text(aes(label = score, group = type), position = position_dodge(width = .9), vjust = -0.2) +  theme(plot.title = element_text(hjust = 0.5)) +
  ggtitle("Familiarity with plots")
```


## The most common names for each plot
#### 1

```{r}
n1 <- word_preproc(data, 69)  %>%
   mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|remember)\\b", words_prep) == TRUE ~ "bad", 
      grepl("\\baverage(d)?\\b.*\\b(erp(s)?|ep|related)\\b|\\b(erp(s)?|ep|related)\\b.*\\baverage(d)?\\b", words_prep) == TRUE ~ "averaged erp",
      grepl("\\bwave(form|forms)?\\b.*\\b(erp(s)?|ep|related)\\b|\\b(erp(s)?|ep|related)\\b.*\\bwave(form|forms)?\\b", words_prep) == TRUE ~ "erp wave(form)s",
      grepl("\\btime(course|series|domain)?\\b.*\\b(erp(s)?|ep|related)\\b|\\b(erp(s)?|ep|related)\\b.*\\btime(course|series|domain)?\\b", words_prep) == TRUE ~ "erp timecourse (timeseries)",
      grepl("\\b(erp(s)?|ep|related)\\b", words) == TRUE ~ "erp",
      grepl("\\b(time|timeseries)\\b", words) == TRUE ~ "time series",
      grepl("\\b(response(s)?)\\b", words) == TRUE ~ "response",
      grepl("\\b(line|boundedline)\\b", words) == TRUE ~ "line",
      grepl("\\b(single|singleplot)\\b", words) == TRUE ~ "single",
      grepl("\\b(waveform(s)?)\\b", words) == TRUE ~ "waveform",
       grepl("\\b(p300)\\b", words) == TRUE ~ "p300",
      grepl("\\b(average)\\b", words) == TRUE ~ "average",
      TRUE ~ '_other'
      ))  %>% #filter(type == "erp") %>%  View()
   filter(!is.na(type), type != "bad") %>% dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq))  %>% 
   rename_at(vars(colnames(.)), ~ c("Line plot", "n")) 
n1 
```


#### 2

```{r}
n2 <- word_preproc(data, 80)  %>%
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\b", words_prep) == TRUE ~ "bad", 
      grepl("\\b(butterfly|bitterfly|buterfly|buttefly)\\b", words_prep) == TRUE ~ "butterfly",
      grepl("\\b(spaghetti)\\b", words_prep) == TRUE ~ "spaghetti",
      grepl("\\b(time|timeseries|timecourse)\\b", words_prep) == TRUE ~ "time series",
      grepl("\\b(channel|single|singleplot|individual)\\b", words_prep)  == TRUE ~ "single or individual channel erp",
      grepl("\\b(channels|multichannel|multeple|multiple|multi|all|muti|electrodes)\\b", words_prep)  == TRUE ~ "multichannel/electrode erp",
      grepl("\\b(evoked)\\b", words_prep)  == TRUE ~ "evoked responces",
      grepl("\\b(erp(s)?|eprs|event-related)\\b", words_prep) == TRUE ~ "erp",
      TRUE ~ '_other'
      )) %>% filter(type == "single or individual channel erp") %>%  #View()
  filter(!is.na(type), type != "bad") %>%
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq))  %>% 
   rename_at(vars(colnames(.)), ~ c("Butterfly_plot", "n")) 
n2
```

#### 3

```{r}
n3 <- word_preproc(data, 85)  %>%
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess)\\b", words_prep) == TRUE ~ "bad", 
      grepl("\\b(topo|topoplot(s)?)\\b", words_prep) == TRUE ~ "topo(plot)", 
      grepl("\\b(topomap|topomape)\\b", words_prep) == TRUE ~ "topomap",
      grepl("\\b(topograph(y|ic|ical|ies)|topgraphy|topograbphy)\\b", words_prep) == TRUE ~ "topography",
      grepl("\\b(heat(map)?)\\b", words_prep) == TRUE ~ "heatmap",
      grepl("\\b(map)\\b", words_prep) == TRUE ~ "scalp map",
      grepl("\\b(distribution)\\b", words_prep) == TRUE ~ "scalp distribution",
      TRUE ~ '_other'
      )) %>% 
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq))  %>% 
   rename_at(vars(colnames(.)), ~ c("Topoplot", "n")) 
n3
```

#### 4

```{r}
n4 <- word_preproc(data, 90)  %>%
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|\\?|unclear)\\b", words_prep) == TRUE ~ "bad", 
      grepl("\\btopo(plot|plots)?\\b.*\\btime(course)?\\b|\\btime(course)?\\b.*\\btopo(plot|plots)?|timetopoplot\\b", words_prep) == TRUE ~ "time topo",
      grepl("\\btopo(plot|plots)?\\b.*\\bseries\\b|\\bseries\\b.*\\btopo(plot|plots)?\\b", words_prep) == TRUE ~ "topo series",
      grepl("\\b(topo(s)?|topoplot(s)?)\\b", words_prep) == TRUE ~ "topo", 
      grepl("\\b(topomap(s|e)|topomap)\\b", words_prep) == TRUE ~ "topomap",
      grepl("\\btopograph(y|ic|ical|ies)\\b.*\\bmap(s)?\\b|\\bmap(s)?\\b.*\\btopograph(y|ic|ical|ies)\\b", words_prep) == TRUE ~ "topographical map",
      grepl("\\btopograph(y|ic|ical|ies)\\b.*\\btime\\b|\\btime\\b.*\\btopograph(y|ic|ical|ies)\\b", words_prep) == TRUE ~ "time topography",
      grepl("\\b(topograph(y|ic|ical|ies)|topgraphy|topograhy|topograbphy|topgraphies)\\b", words_prep) == TRUE ~ "topography",
      grepl("\\b(heat(map)?)\\b", words_prep) == TRUE ~ "heatmap",
      grepl("\\b(map(s)?)\\b", words_prep) == TRUE ~ "scalp map",
      grepl("\\b(time(series)?|serie(s)?)\\b", words_prep) == TRUE ~ "time series",
      grepl("\\b(distribution)\\b", words_prep) == TRUE ~ "scalp distribution",
      TRUE ~ '_other'
      )) %>%  #View()
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != "bad")  %>% 
   rename_at(vars(colnames(.)), ~ c("Topo array", "n")) 
n4
```

#### 5

```{r}
n5 <- word_preproc(data, 97)  %>%
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|remember|unsure|confusing|mess|\\?|unclear|-|ugly|don't|useless)\\b", words_prep) == TRUE ~ "bad", 
      grepl("\\btopograph(y|ic|ical|ies)?|toprgraphic\\b.*\\berp(s)?\\b|\\berp(s)?\\b.*\\btopograph(y|ic|ical|ies)?|toprgraphic\\b", words_prep) == TRUE ~ "topographic erp",
      grepl("\\btopo(plot|plots)?\\b.*\\berp(s)?\\b|\\berp(s)?\\b.*\\btopo(plot|plots)?\\b", words_prep) == TRUE ~ "topo erp",
      grepl("\\b(erp(s)?|eprs|event-related)\\b", words_prep) == TRUE ~ "erp",
      grepl("\\b(multi(plot|channel|ploter|ploterp)|multi)\\b", words_prep) == TRUE ~ "multi or multichannel plot",
      grepl("\\b(topo(s)?|topoplot(s)?)\\b", words_prep) == TRUE ~ "topo", 
      grepl("\\b(topograph(y|ic|ical|ies)?|topgraphy|topograhy|topograbphy|topgraphies)\\b", words_prep) == TRUE ~ "topography",
      grepl("\\b(channel(s|plot)?)\\b", words_prep) == TRUE ~ "channel",
      grepl("\\b(time(series)?|serie(s)?)\\b", words_prep) == TRUE ~ "time series",
      grepl("\\b(scalp)\\b", words_prep) == TRUE ~ "scalp",
      TRUE ~ '_other'
      )) %>% #filter(type=="erp") %>% View()
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != "bad")  %>% 
   rename_at(vars(colnames(.)), ~ c("Topomap", "n")) 
n5

```

#### 6

```{r}
n6 <- word_preproc(data, 102)  %>%
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\?|\\?\\?|unclear|-|ugly|don't|x|useless)\\b", words_prep) == TRUE ~ "bad", 
      grepl("\\bimage\\b.*\\berp(s)?\\b|\\berp(s)?\\b.*\\bimage|erpimage|image\\b", words_prep) == TRUE ~ "erp image",
      grepl("\\bimage\\b.*\\bepoch(s)?\\b|\\bepoch(s)?\\b.*\\bimage\\b", words_prep) == TRUE ~ "epoch image",
      grepl("\\b(raster(plot)?)\\b", words_prep) == TRUE ~ "raster",
      grepl("\\b(waterfall)\\b", words_prep) == TRUE ~ "waterfall",
      grepl("\\b(heat(map)?)\\b", words_prep) == TRUE ~ "heatmap",
      grepl("\\b(sort(ed)?)\\b", words_prep) == TRUE ~ "sorted trials",
      grepl("\\b(erp(s)?|eprs|ersp|event-related)\\b", words_prep) == TRUE ~ "erp",
      grepl("\\b(voltage)\\b", words_prep) == TRUE ~ "voltage",
      grepl("\\b(time(series)?|serie(s)?)\\b", words_prep) == TRUE ~ "time series or frequencies",
      grepl("\\b(trial(s|wise)?|trialplot)\\b", words_prep) == TRUE ~ "trial or trial variations",
      TRUE ~ '_other'
      )) %>% #View()
  dplyr::select(type) %>%  table(.) %>%  
  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != "bad")  %>% 
   rename_at(vars(colnames(.)), ~ c("ERP image", "n")) 
n6
```

#### 7

```{r}
n7 <- word_preproc(data, 107)  %>%
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|\\?|\\?\\?|unclear|-|ugly|don't|x|useless)\\b", words_prep) == TRUE ~ "bad", 
      grepl("\\b(amplitude(s)?)\\b", words_prep) == TRUE ~ "amplitudes",
      TRUE ~ '_other'
      )) %>% #View()
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != "bad")  %>% 
   rename_at(vars(colnames(.)), ~ c("Parallel plot", "n")) 
n7
```

#### 8

```{r}
n8 <- word_preproc(data, 112)  %>%
  mutate(type = case_when(
      grepl("\\b(idea|sure|confus|aware|do not|know|why|good|remember|unsure|confusing|mess|normal|\\?|\\?\\?|unclear|recall|-|ugly|don't|x|useless|nan|clear)\\b", words_prep) == TRUE ~ "bad", 
      grepl("\\bimage\\b.*\\berp(s)?\\b|\\berp(s)?\\b.*\\bimage|erpimage\\b", words_prep) == TRUE ~ "erp image",
      grepl("\\bimage\\b.*\\bchannel\\b|\\bchannel\\b.*\\bimage|chanimage|imagesc\\b", words_prep) == TRUE ~ "channel image",
      grepl("\\b(heat(map)?)\\b", words_prep) == TRUE ~ "heatmap",
      grepl("\\b(image)\\b", words_prep) == TRUE ~ "image",
      grepl("\\b(raster(plot)?|custer)\\b", words_prep) == TRUE ~ "raster",
      grepl("\\b(matrix)\\b", words_prep) == TRUE ~ "matrix",
      grepl("\\b(channel(s|wise)?)\\b", words_prep) == TRUE ~ "channels",
      grepl("\\b(erp(s)?|eprs|ersp|event-related)\\b", words_prep) == TRUE ~ "erp",
      grepl("\\b(voltage)\\b", words_prep) == TRUE ~ "voltage",
     # TRUE ~ '_other'
      )) %>% #View()
  dplyr::select(type) %>%  table(.) %>% 
  data.frame(.) %>% arrange(desc(Freq)) %>% filter(type != "bad") %>% 
   rename_at(vars(colnames(.)), ~ c("Channel_image", "n")) 

n8
n8 %>% ggplot(data = ., aes(y = reorder(Channel_image, n),  x= n, fill = Channel_image)) +
    geom_bar(stat="identity") + ylab("Channel plot") +
    geom_text(aes(label = n), 
    hjust = -0.2) + theme_classic() + theme(legend.position="none")

```


#### Combined

```{r}
list(n1, n2, n3, n4, n5, n6, n8) %>% kable(.) %>% kable_styling("striped", position = "center",) 
```


## Struggles with plots

```{r}
vec <- names(data[ , grepl( ".*Which parts of*." , names(data))])
```

```{r, warning=FALSE}
word_preproc_tool_2 <- function(data, N, lim){
  #lim = 10
  tmp <- data %>% dplyr::select(N, N+1, N+2) %>% dplyr::rename(soft = !!names(.)[1], parts = !!names(.)[2], new_feature = !!names(.)[3]) %>% 
    filter(!is.na(soft)) %>% 
    mutate_at(vars(colnames(.)), funs(tolower(.))) %>% 
    mutate(soft = str_replace(soft, 'own', "custom"), 
           soft = str_replace(soft, '(matlab)', "matlab"), 
           soft = case_when(
      str_detect(soft, 'brain vision') ~ "brain vision analyser",
      #str_detect(soft, 'matlab|bar.m|boundedline') ~ "custom matlab",
      str_detect(soft, 'mne') ~ "mne",
      TRUE ~ as.character(soft)
    ), 
    parts = case_when(
      str_detect(parts, 'none|n/a|nope|na|idk|nothing|sure|know|can\'t|don\'t') ~ "-",
      TRUE ~ as.character(parts)
    ),
    new_feature = case_when(
      str_detect(new_feature, 'none|n/a|nope|na|idk|nothing|sure|know|can\'t|don\'t') ~ "-",
      TRUE ~ as.character(new_feature)
    )) %>% 
  
    filter_at(vars(parts, new_feature), all_vars(!is.na(.))) %>% mutate(n = lengths(gregexpr("\\W+", soft)) + 1) %>% 
    filter(parts != "-" | new_feature != "-", n < lim) %>%  dplyr::select(-4) %>% arrange(soft)
  return(tmp)
}
```

#### 1

```{r, warning=FALSE}
struggle1 <- word_preproc_tool_2(data, 71, 10) 
separated_row <- separate_rows(struggle1[98, ], parts, sep = ",|\\.") %>% dplyr::select(parts)

struggle1 <- struggle1 %>% filter( parts != "-") %>% dplyr::select(parts) %>% 
  filter(!row_number() %in% c(2, 11, 40, 41, 69, 78, 83, 87, 89, 91))  %>% 
  separate_rows(parts, sep = "2\\)", convert = FALSE) %>% 
  separate_rows(parts, sep = "\\\r\\\n", convert = FALSE) %>%  rbind(., separated_row) %>%
  mutate(problems = case_when(
      grepl("\\b(ci|se|sem|errorbar(s)?|sme|sd|uncertainty|error(s)?|confidence|variance|deviation(s)?|shading|shaded|bars|transparency)\\b", parts) == TRUE ~ "uncertainty", 
      grepl("\\b(axes|lable(s)?|label(s)?|legend|ticks)\\b", parts) == TRUE ~ "plot components\n(axes, lables, legend)", 
      grepl("\\b(color(s)?|colour(s)?|proportion(s)?|publication|scal(e|ing))\\b", parts) == TRUE ~ "styling", 
      grepl("\\b(preprocessing|extracting|datatype)\\b", parts) == TRUE ~ "preprocessing", 
      grepl("\\b(syncronisation|organizing|groups)\\b", parts) == TRUE ~ "subplotting", 
      grepl("\\b(mean|significan(t|ce)|permutations|combine)\\b", parts) == TRUE ~ "statistics", 
      )) %>% filter(nchar(parts) != 0) %>% filter(!is.na(problems))  %>% group_by(problems) %>% dplyr::summarise(n = n()) %>% mutate(percent = round(n / sum(n), 2) * 100) 

struggle1 %>% 
  arrange(desc(n)) %>% 
  kable(escape = F, booktabs = T) %>% kable_styling("striped", position = "center",) %>% 
  kable_classic(full_width = F, html_font = "Arial")

 # words = ifelse(nchar(words)==0, NA, words),
 #  write.xlsx(., "data/struggles.xlsx", sheetName = "line plot", col.names = TRUE, row.names = TRUE, append = FALSE)

```

```{r}
struggle1 %>% 
  arrange(desc(n)) %>% 
  ggplot(., aes(y = reorder(problems, percent), x = percent, fill = problems)) +
  geom_col() +
  geom_text(aes(label = paste0(percent, "%"), y = problems, x = percent),
            position = position_stack(vjust = 0.5), color = "black") +
  labs(x = "Percent", y  = "Problem category") +
  theme_classic() +
  theme(axis.text = element_text(size = 12), legend.position = "none")
```

## New features


<!-- ## Frequency of tool usage -->

<!-- ```{r} -->
<!-- vec <- names(data[ , grepl( ".*Which plotting" , names(data))]) %>% str_split_i(., "\\? \\]", 2) %>%  -->
<!--   str_split_i(., "\\...", 2) %>% as.numeric() -->
<!-- ``` -->

<!-- ```{r} -->
<!-- word_preproc_tool <- function(data, N, lim){ -->
<!--   N = 71 -->
<!--   #lim = 10 -->
<!--   tmp <- data %>% dplyr::select(N) %>% filter(!is.na(.)) %>% dplyr::rename(words = !!names(.)[1]) %>%  -->
<!--     mutate(words = ifelse(str_detect(words, 'own|costum'), "custom", as.character(words))) %>%  -->
<!--   mutate(n = lengths(gregexpr("\\W+", words)) + 1) %>% arrange(desc(n)) -->
<!--   rest <- tmp %>% filter(n >= lim) %>% dplyr::select(words) -->
<!--   tmp <- tmp %>% filter(n < lim) %>% dplyr::select(words) -->

<!--   t <- foreach(i = 1:nrow(tmp)) %do% strsplit(tmp[[1]][i], ",|/|\\|+| and |&| or |\\n|\\r|;") -->
<!--   tul <- foreach(i = 1:nrow(tmp)) %do% unlist(t[[i]]) -->
<!--   tul1 <- unlist(tul) -->
<!--   tul2 <- tul1[tul1!=""] -->
<!--   tul2[tul2=="-"] <- NA -->
<!--   tul2 <- na.omit(tul2) -->

<!--   #t <- foreach(i = 1:nrow(tmp)) %do% tokenize_words(as.character(tmp[i, N]), strip_punct = FALSE) -->
<!--   stop_list = c("a", "an", "the", "wise", "by", "over", "of", "per", "for", "like", "s", "at", "code", "script", "recently", "my", "in", "written", "using", "built", "function", "plot", "with",  "itself", "scripting", "scrip", "scripts", "basic")#, "custom") -->
<!--   t1 <- foreach(i = 1:length(tul2)) %do% tokenize_words(as.character(tul2[i])) -->


<!--   t2 <- foreach(i = 1:length(t1)) %do% map(t1[i][[1]], singularize) -->
<!--   t21 <- foreach(i = 1:length(t2)) %do% tokenize_words(as.character(t2[i][[1]])) -->
<!--   t22 <- foreach(i = 1:length(t21)) %do% t21[i][[1]][[1]][!(t21[i][[1]][[1]] %in% stop_list)] -->
<!--   t3 <- foreach(i = 1:length(t22)) %do% paste((unlist(t22[i])), collapse = ' ')  -->
<!--   t4 <- data.frame(matrix(t3)) #%>% dplyr::rename(words = !!names(.)[1]) -->
<!--   return(c(t4, rest)) -->
<!-- } -->
<!-- ``` -->

<!-- #### 1 -->

<!-- ```{r} -->
<!-- test <- word_preproc_tool(data, 71, 10)  -->
<!-- rest <- test[[2]] -->
<!-- fromrest <- data.frame(words = c("fieldtrip","r", "matlab", "fieldtrip", "adobe illustrator", "custom matlab", "custom matlab", "mne" )) -->

<!-- base <- data.frame(matrix(test[[1]]))%>% dplyr::rename(words = !!names(.)[1])%>%  -->
<!--   mutate(words = ifelse(nchar(words)==0, NA, words)) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'brain vision'), "brain vision analyser", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'mne'), "mne", as.character(words))) %>%  rbind(., fromrest) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'ggplot'), "ggplot", as.character(words)))  -->

<!-- words <- base %>%  -->
<!--   table(.) %>%  -->
<!--   data.frame(.) %>%  arrange(desc(Freq))  -->

<!-- narrow1 <- base %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'matlab|bar.m|boundedline'), "custom matlab", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'fieldtrip'), "fieldtrip", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'eeglab'), "EEGLAB", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'erplab'), "ERPLAB", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'python|seaborn|matplotlib|plotly'), "custom python", as.character(words))) %>% -->
<!--   mutate(words = ifelse(str_detect(words, 'mne'), "MNE", as.character(words))) %>% -->
<!--   mutate(words = ifelse(str_detect(words, 'ggplot|\\br\\b'), "custom r", as.character(words))) %>%  -->
<!--   table(.) %>%  -->
<!--   data.frame(.) %>%  arrange(desc(Freq)) -->
<!-- narrow1 %>% head() -->
<!-- ``` -->

<!-- #### 2 -->


<!-- ```{r} -->
<!-- test <- word_preproc_tool(data, 82, 10)  -->
<!-- rest <- test[[2]] -->
<!-- fromrest <- data.frame(words = c("fieldtrip","r", "matlab", "fieldtrip", "adobe illustrator", "custom matlab", "custom matlab", "mne" )) -->

<!-- base <- data.frame(matrix(test[[1]]))%>% dplyr::rename(words = !!names(.)[1])%>%  -->
<!--   mutate(words = ifelse(nchar(words)==0, NA, words)) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'brain vision'), "brain vision analyser", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'mne'), "MNE", as.character(words))) %>%  rbind(., fromrest) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'ggplot'), "ggplot", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'own|cusom'), "custom", as.character(words)))  -->

<!-- words <- base %>%  -->
<!--   table(.) %>%  -->
<!--   data.frame(.) %>%  arrange(desc(Freq))  -->

<!-- narrow2 <- base %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'matlab|bar.m|boundedline'), "custom matlab", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'fieldtrip|fieldteip|field trip'), "fieldtrip", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'eeglab'), "EEGLAB", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'erplab'), "ERPLAB", as.character(words))) %>%  -->
<!--   mutate(words = ifelse(str_detect(words, 'python|seaborn|matplotlib|plotly'), "custom python", as.character(words))) %>% -->
<!--   mutate(words = ifelse(str_detect(words, 'ggplot|\\br\\b'), "custom r", as.character(words))) %>%  -->
<!--    mutate(words = ifelse(str_detect(words, 'cartool'), "cartool", as.character(words))) %>%  -->
<!--   table(.) %>%  -->
<!--   data.frame(.) %>%  arrange(desc(Freq)) -->
<!-- narrow2 %>% head() -->

<!-- ``` -->
